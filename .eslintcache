[{"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\index.js":"1","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\redux\\store.js":"2","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\App\\index.js":"3","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\redux\\reducers\\index.js":"4","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\locale\\i18n.js":"5","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\locale\\locale.js":"6","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\RegisteredTeiList\\index.js":"7","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\ControlBar\\index.js":"8","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Search\\index.js":"9","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Form\\index.js":"10","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\HeaderBar\\index.js":"11","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Administration\\index.js":"12","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Translation\\index.js":"13","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Export\\index.js":"14","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\redux\\actions\\user\\index.js":"15","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\redux\\actions\\route\\index.js":"16","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\redux\\reducers\\route.js":"17","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\redux\\actions\\metadata\\index.js":"18","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\redux\\reducers\\data.js":"19","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\redux\\actions\\admin\\index.js":"20","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\redux\\reducers\\metadata.js":"21","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\redux\\reducers\\admin.js":"22","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\redux\\reducers\\user.js":"23","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\index.jsx":"24","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Form\\Profile.js":"25","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Form\\DeathCertificate.js":"26","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Form\\Stage.js":"27","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\utils\\index.js":"28","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Translation\\TranslationTable.js":"29","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\redux\\actions\\route\\type.js":"30","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\redux\\actions\\metadata\\type.js":"31","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Translation\\const.js":"32","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\redux\\reducers\\data-methods.js":"33","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\redux\\actions\\user\\type.js":"34","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Export\\Content.js":"35","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\utils\\excel.utility.js":"36","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\redux\\actions\\admin\\type.js":"37","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\redux\\actions\\data\\type.js":"38","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Form\\WarningDialog.jsx":"39","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Search\\Result.jsx":"40","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\run.js":"41","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Administration\\FrameA.jsx":"42","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Administration\\Selections.jsx":"43","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Administration\\FrameB.jsx":"44","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Administration\\AssignUsers.jsx":"45","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Administration\\AssignOrgUnits.jsx":"46","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Administration\\Attributes.jsx":"47","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Administration\\Certificate.jsx":"48","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Administration\\Review.jsx":"49","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Administration\\Finish.jsx":"50","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\utils\\generateChildChart.js":"51","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\utils.js":"52","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\redux\\actions\\data\\index.js":"53","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\WidgetContainer\\WidgetContainer.jsx":"54","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\hocs\\withLoading.js":"55","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Icd11Tool\\EmbeddedIcd11Tool.js":"56","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\utils\\const.js":"57","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\utils\\generateMetadata.js":"58","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Administration\\CustomCertificate.jsx":"59","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\utils\\generateChildCharts.js":"60","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\InputField\\index.js":"61","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\page9\\index.js":"62","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\page6\\index.js":"63","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\page7\\index.js":"64","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\page2\\index.js":"65","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\page8\\index.js":"66","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\page4\\index.js":"67","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Icd11Tool\\RawCodingTool.js":"68","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\page3\\index.js":"69","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\page5\\index.js":"70","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\example\\index.js":"71","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\page1\\index.js":"72","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\page0\\index.js":"73","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\utils\\certificate.js":"74","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\Widget\\index.js":"75","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\IconButton\\index.jsx":"76","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\example\\html-chart.js":"77","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\example\\treemap-chart.js":"78","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\example\\children-chart.js":"79","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\Widget\\Nodata.jsx":"80","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\Widget\\Bublemap.jsx":"81","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\Widget\\Treemap.jsx":"82","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\IconButton\\const.js":"83","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\Widget\\Html.jsx":"84","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\Widget\\Pie.jsx":"85","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\Widget\\Line.jsx":"86","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\Widget\\Bar.jsx":"87","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\Widget\\Map.jsx":"88","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\Widget\\Statistic.jsx":"89","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\Widget\\CombinedChart.jsx":"90","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\Widget\\DoubleStackedBarChart.jsx":"91","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\Widget\\StackedBarChart.jsx":"92","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\Widget\\VerticalStackedBarChart.jsx":"93","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\example\\stacked-bar-chart.js":"94","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\example\\line-chart.js":"95","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\example\\pie-chart.js":"96","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\example\\combined-chart.js":"97","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\example\\bar-chart.js":"98","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\example\\statistic.js":"99","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\page2\\stackedBar-chart.js":"100","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\page2\\line-chart.js":"101"},{"size":551,"mtime":1697430748224,"results":"102","hashOfConfig":"103"},{"size":229,"mtime":1697430748229,"results":"104","hashOfConfig":"103"},{"size":10382,"mtime":1697430748191,"results":"105","hashOfConfig":"103"},{"size":558,"mtime":1697430748228,"results":"106","hashOfConfig":"103"},{"size":1025,"mtime":1697430748224,"results":"107","hashOfConfig":"103"},{"size":17775,"mtime":1698137484268,"results":"108","hashOfConfig":"103"},{"size":8078,"mtime":1697430748209,"results":"109","hashOfConfig":"103"},{"size":14166,"mtime":1698137509654,"results":"110","hashOfConfig":"103"},{"size":7532,"mtime":1698134250243,"results":"111","hashOfConfig":"103"},{"size":1129,"mtime":1697430748206,"results":"112","hashOfConfig":"103"},{"size":309,"mtime":1697430748207,"results":"113","hashOfConfig":"103"},{"size":16495,"mtime":1697430748191,"results":"114","hashOfConfig":"103"},{"size":6060,"mtime":1697430748210,"results":"115","hashOfConfig":"103"},{"size":5606,"mtime":1697430748203,"results":"116","hashOfConfig":"103"},{"size":139,"mtime":1697430748227,"results":"117","hashOfConfig":"103"},{"size":144,"mtime":1697430748227,"results":"118","hashOfConfig":"103"},{"size":283,"mtime":1697430748229,"results":"119","hashOfConfig":"103"},{"size":2615,"mtime":1697430748227,"results":"120","hashOfConfig":"103"},{"size":1209,"mtime":1697430748228,"results":"121","hashOfConfig":"103"},{"size":2018,"mtime":1697430748226,"results":"122","hashOfConfig":"103"},{"size":3772,"mtime":1697430748228,"results":"123","hashOfConfig":"103"},{"size":3636,"mtime":1697430748228,"results":"124","hashOfConfig":"103"},{"size":478,"mtime":1697430748229,"results":"125","hashOfConfig":"103"},{"size":6752,"mtime":1697430748197,"results":"126","hashOfConfig":"103"},{"size":11344,"mtime":1697430748204,"results":"127","hashOfConfig":"103"},{"size":3702,"mtime":1697430748203,"results":"128","hashOfConfig":"103"},{"size":36976,"mtime":1697430748205,"results":"129","hashOfConfig":"103"},{"size":8527,"mtime":1697430748230,"results":"130","hashOfConfig":"103"},{"size":1329,"mtime":1698137687863,"results":"131","hashOfConfig":"103"},{"size":45,"mtime":1697430748227,"results":"132","hashOfConfig":"103"},{"size":1224,"mtime":1697430748227,"results":"133","hashOfConfig":"103"},{"size":65469,"mtime":1698133510370,"results":"134","hashOfConfig":"103"},{"size":5266,"mtime":1697430748228,"results":"135","hashOfConfig":"103"},{"size":47,"mtime":1697430748227,"results":"136","hashOfConfig":"103"},{"size":1219,"mtime":1697430748202,"results":"137","hashOfConfig":"103"},{"size":772,"mtime":1697430748230,"results":"138","hashOfConfig":"103"},{"size":777,"mtime":1697430748226,"results":"139","hashOfConfig":"103"},{"size":382,"mtime":1697430748226,"results":"140","hashOfConfig":"103"},{"size":995,"mtime":1697430748205,"results":"141","hashOfConfig":"103"},{"size":4236,"mtime":1697430748209,"results":"142","hashOfConfig":"103"},{"size":634,"mtime":1697430748201,"results":"143","hashOfConfig":"103"},{"size":8928,"mtime":1697430748190,"results":"144","hashOfConfig":"103"},{"size":4224,"mtime":1697430748191,"results":"145","hashOfConfig":"103"},{"size":9465,"mtime":1697430748190,"results":"146","hashOfConfig":"103"},{"size":6645,"mtime":1697430748189,"results":"147","hashOfConfig":"103"},{"size":5375,"mtime":1697430748188,"results":"148","hashOfConfig":"103"},{"size":22366,"mtime":1697430748189,"results":"149","hashOfConfig":"103"},{"size":20169,"mtime":1697430748189,"results":"150","hashOfConfig":"103"},{"size":19243,"mtime":1697430748191,"results":"151","hashOfConfig":"103"},{"size":18313,"mtime":1697430748189,"results":"152","hashOfConfig":"103"},{"size":1813,"mtime":1697430748201,"results":"153","hashOfConfig":"103"},{"size":4266,"mtime":1697430748201,"results":"154","hashOfConfig":"103"},{"size":1341,"mtime":1697430748226,"results":"155","hashOfConfig":"103"},{"size":7058,"mtime":1697430748196,"results":"156","hashOfConfig":"103"},{"size":534,"mtime":1697430748224,"results":"157","hashOfConfig":"103"},{"size":1070,"mtime":1697430748207,"results":"158","hashOfConfig":"103"},{"size":8879,"mtime":1697430748229,"results":"159","hashOfConfig":"103"},{"size":16786,"mtime":1697430748230,"results":"160","hashOfConfig":"103"},{"size":7509,"mtime":1697430748189,"results":"161","hashOfConfig":"103"},{"size":37278,"mtime":1697430748202,"results":"162","hashOfConfig":"103"},{"size":4083,"mtime":1697430748208,"results":"163","hashOfConfig":"103"},{"size":3559,"mtime":1697430748201,"results":"164","hashOfConfig":"103"},{"size":4651,"mtime":1697430748200,"results":"165","hashOfConfig":"103"},{"size":4722,"mtime":1697430748201,"results":"166","hashOfConfig":"103"},{"size":456,"mtime":1697430748199,"results":"167","hashOfConfig":"103"},{"size":4614,"mtime":1697430748201,"results":"168","hashOfConfig":"103"},{"size":2727,"mtime":1697430748199,"results":"169","hashOfConfig":"103"},{"size":3610,"mtime":1697430748207,"results":"170","hashOfConfig":"103"},{"size":1986,"mtime":1697430748199,"results":"171","hashOfConfig":"103"},{"size":4493,"mtime":1697430748200,"results":"172","hashOfConfig":"103"},{"size":1437,"mtime":1697430748198,"results":"173","hashOfConfig":"103"},{"size":2064,"mtime":1697430748199,"results":"174","hashOfConfig":"103"},{"size":1655,"mtime":1697430748198,"results":"175","hashOfConfig":"103"},{"size":3291,"mtime":1697430748229,"results":"176","hashOfConfig":"103"},{"size":655,"mtime":1697430748196,"results":"177","hashOfConfig":"103"},{"size":305,"mtime":1697430748193,"results":"178","hashOfConfig":"103"},{"size":2875,"mtime":1697430748197,"results":"179","hashOfConfig":"103"},{"size":1097,"mtime":1697430748198,"results":"180","hashOfConfig":"103"},{"size":1860,"mtime":1697430748197,"results":"181","hashOfConfig":"103"},{"size":546,"mtime":1697430748195,"results":"182","hashOfConfig":"103"},{"size":3101,"mtime":1697430748193,"results":"183","hashOfConfig":"103"},{"size":1439,"mtime":1697430748196,"results":"184","hashOfConfig":"103"},{"size":193,"mtime":1697430748192,"results":"185","hashOfConfig":"103"},{"size":160,"mtime":1697430748194,"results":"186","hashOfConfig":"103"},{"size":457,"mtime":1697430748195,"results":"187","hashOfConfig":"103"},{"size":789,"mtime":1697430748194,"results":"188","hashOfConfig":"103"},{"size":794,"mtime":1697430748193,"results":"189","hashOfConfig":"103"},{"size":3129,"mtime":1697430748195,"results":"190","hashOfConfig":"103"},{"size":230,"mtime":1697430748195,"results":"191","hashOfConfig":"103"},{"size":1040,"mtime":1697430748194,"results":"192","hashOfConfig":"103"},{"size":1012,"mtime":1697430748194,"results":"193","hashOfConfig":"103"},{"size":873,"mtime":1697430748195,"results":"194","hashOfConfig":"103"},{"size":910,"mtime":1697430748196,"results":"195","hashOfConfig":"103"},{"size":960,"mtime":1697430748198,"results":"196","hashOfConfig":"103"},{"size":1100,"mtime":1697430748198,"results":"197","hashOfConfig":"103"},{"size":645,"mtime":1697430748198,"results":"198","hashOfConfig":"103"},{"size":998,"mtime":1697430748197,"results":"199","hashOfConfig":"103"},{"size":931,"mtime":1697430748197,"results":"200","hashOfConfig":"103"},{"size":358,"mtime":1697430748198,"results":"201","hashOfConfig":"103"},{"size":2545,"mtime":1697430748199,"results":"202","hashOfConfig":"103"},{"size":2527,"mtime":1697430748199,"results":"203","hashOfConfig":"103"},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},"e40vf7",{"filePath":"207","messages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"209","messages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"206"},{"filePath":"212","messages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"218","messages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"206"},{"filePath":"221","messages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"206"},{"filePath":"224","messages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"226","messages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"230","messages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"206"},{"filePath":"233","messages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"206"},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"206"},{"filePath":"239","messages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"241","messages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"243","messages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"206"},{"filePath":"246","messages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"248","messages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"206"},{"filePath":"251","messages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"253","messages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"206"},{"filePath":"256","messages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"206"},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"206"},{"filePath":"262","messages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"206"},{"filePath":"265","messages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"206"},{"filePath":"268","messages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"270","messages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"206"},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"206"},{"filePath":"276","messages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"278","messages":"279","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"280","messages":"281","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"282","messages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"284","messages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"286","messages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"288","messages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"290","messages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"292","messages":"293","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"294","messages":"295","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"296","messages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"298","messages":"299","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"300","messages":"301","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302","usedDeprecatedRules":"206"},{"filePath":"303","messages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"305","messages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"307","usedDeprecatedRules":"206"},{"filePath":"308","messages":"309","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"310","messages":"311","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"206"},{"filePath":"313","messages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"206"},{"filePath":"316","messages":"317","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"206"},{"filePath":"319","messages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"206"},{"filePath":"322","messages":"323","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"206"},{"filePath":"325","messages":"326","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327","usedDeprecatedRules":"206"},{"filePath":"328","messages":"329","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"330","messages":"331","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"332","messages":"333","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"334","messages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"206"},{"filePath":"337","messages":"338","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"339","messages":"340","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"206"},{"filePath":"342","messages":"343","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"344","messages":"345","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"346","usedDeprecatedRules":"206"},{"filePath":"347","messages":"348","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"349","usedDeprecatedRules":"206"},{"filePath":"350","messages":"351","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"352","messages":"353","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"206"},{"filePath":"355","messages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"206"},{"filePath":"358","messages":"359","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"360","messages":"361","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"362","messages":"363","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"364","messages":"365","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"366","messages":"367","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"368","messages":"369","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"370","usedDeprecatedRules":"206"},{"filePath":"371","messages":"372","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"373","messages":"374","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"375","messages":"376","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"377","messages":"378","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"379","messages":"380","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"381","usedDeprecatedRules":"206"},{"filePath":"382","messages":"383","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"384","usedDeprecatedRules":"206"},{"filePath":"385","messages":"386","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"387","messages":"388","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"389","usedDeprecatedRules":"206"},{"filePath":"390","messages":"391","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"392","messages":"393","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"394","messages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"396","messages":"397","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"398","usedDeprecatedRules":"206"},{"filePath":"399","messages":"400","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"401","usedDeprecatedRules":"206"},{"filePath":"402","messages":"403","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"404","messages":"405","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"406","messages":"407","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"408","messages":"409","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"410","messages":"411","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"412","messages":"413","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"414","messages":"415","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"416","usedDeprecatedRules":"206"},{"filePath":"417","messages":"418","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"419","messages":"420","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"421","messages":"422","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"423","messages":"424","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"425","messages":"426","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"427","messages":"428","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"429","messages":"430","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"431","messages":"432","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"433","messages":"434","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"435","messages":"436","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"437","messages":"438","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"439","messages":"440","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"441","usedDeprecatedRules":"206"},{"filePath":"442","messages":"443","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"444","usedDeprecatedRules":"206"},"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\index.js",[],["445","446"],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\redux\\store.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\App\\index.js",["447"],"import { useEffect, useState } from \"react\";\r\nimport \"./index.css\";\r\nimport HeaderBarContainer from \"../HeaderBar\";\r\nimport ControlBar from \"../ControlBar\";\r\nimport RegisteredTeiList from \"../RegisteredTeiList\";\r\nimport SearchForm from \"../Search\";\r\nimport Administration from \"../Administration\";\r\nimport Form from \"../Form\";\r\nimport Export from \"../Export\";\r\nimport Dashboard from \"../Dashboard\";\r\nimport Translation from \"../Translation\";\r\nimport { Hooks, Components } from \"tracker-capture-app-core\";\r\nimport { InitTranslation } from \"../../locale/i18n\";\r\n\r\n/* REDUX */\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  setTrackerDataElements,\r\n  setProgramMetadata,\r\n  setTeas,\r\n  setUsers,\r\n  setOrgUnitGroups,\r\n  setOrgUnitLevels,\r\n  setOrgUnits,\r\n  getICD11Options,\r\n  getTrackedEntityTypes,\r\n  setUserGroups,\r\n  setFormMapping,\r\n  setCertificateTemplate,\r\n  setFemaleCode,\r\n  setFullnameOption,\r\n  setUILocale,\r\n  setIcdApiToken\r\n} from \"../../redux/actions/metadata\";\r\nimport {\r\n  setFemaleOption,\r\n  changeCerticateTemplate,\r\n  setCertificateLogo,\r\n} from \"../../redux/actions/admin\";\r\nimport { setUserRole } from \"../../redux/actions/user\";\r\nimport { changeRoute } from \"../../redux/actions/route\";\r\nimport localeFile from \"../../locale/locale\";\r\n/*       */\r\n\r\n\r\nconst { useApi } = Hooks;\r\nconst { LoadingMask } = Components;\r\n\r\nconst App = ({\r\n  route,\r\n  setProgramMetadata,\r\n  setTeas,\r\n  setTrackerDataElements,\r\n  setUsers,\r\n  setOrgUnitGroups,\r\n  setOrgUnitLevels,\r\n  setOrgUnits,\r\n  getICD11Options,\r\n  getTrackedEntityTypes,\r\n  setUserGroups,\r\n  // setFemaleOption,\r\n  // changeCerticateTemplate,\r\n  setCertificateLogo,\r\n  setFormMapping,\r\n  setCertificateTemplate,\r\n  setFemaleCode,\r\n  setFullnameOption,\r\n  setUserRole,\r\n  changeRoute,\r\n  setUILocale,\r\n  setIcdApiToken\r\n}) => {\r\n  const { metadataApi } = useApi();\r\n  const [loading, setLoading] = useState(false);\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    (async () => {\r\n      /** FOR TRANSLATION */\r\n      const translationData = await metadataApi.get(\"/api/dataStore/WHO_ICD11_COD/translation\");\r\n      console.log(\"init translation DataStore\");\r\n      if (translationData.status) {\r\n        let array = [];\r\n        let arrayLanguages = [\r\n          {\r\n            label: \"English\",\r\n            key: \"en\",\r\n          },\r\n        ];\r\n        Object.entries(localeFile.en.translation).forEach((value) => {\r\n          let object = {\r\n            key: value[0],\r\n            translation: { en: value[1] },\r\n          };\r\n          array.push(object);\r\n        });\r\n        await metadataApi.push(\"/api/dataStore/WHO_ICD11_COD/translation\", {\r\n          translations: array,\r\n          languages: arrayLanguages,\r\n        });\r\n      }\r\n      else{\r\n        console.log(translationData);\r\n        Object.entries(localeFile.en.translation).forEach((value) => {\r\n          let findKey = translationData.translations.find(e=>e.key === value[0]);\r\n          if(!findKey){\r\n            let object = {\r\n              key: value[0],\r\n              translation: { en: value[1] },\r\n            };\r\n            translationData.translations.push(object);\r\n          }else{\r\n            findKey.translation.en = value[1]\r\n          }\r\n        })\r\n        await metadataApi.push(\"/api/dataStore/WHO_ICD11_COD/translation\", {\r\n          translations: translationData.translations,\r\n          languages: translationData.languages,\r\n        },\"PUT\");\r\n      }\r\n\r\n\r\n\r\n      Promise.all([\r\n        metadataApi.get(\"/api/dataStore/WHO_ICD11_COD/program\"),\r\n        metadataApi.getOrgUnitGroups(),\r\n        metadataApi.getOrgUnitLevels(),\r\n        metadataApi.get(\r\n          \"/api/trackedEntityAttributes.json\",\r\n          { paging: false },\r\n          [\"fields=id,displayName,valueType,optionSet,formName\"]\r\n        ),\r\n        metadataApi.getTrackerDataElements(),\r\n        metadataApi.get(\"/api/users.json\", { paging: false }, [\r\n          \"fields=id,displayName,organisationUnits~size\",\r\n        ]),\r\n        metadataApi.get(\"/api/organisationUnits.json\", { paging: false }, [\r\n          \"fields=id,displayName,path,level\",\r\n        ]),\r\n        metadataApi.get(\"/api/trackedEntityTypes.json\", { paging: false }, [\r\n          \"fields=id,displayName\",\r\n        ]),\r\n        metadataApi.get(\"/api/userGroups.json\", { paging: false }, [\r\n          \"fields=id,displayName\",\r\n        ]),\r\n        metadataApi.getMe()\r\n      ]).then( async (results) => {\r\n\r\n        await InitTranslation(translationData,results[9].settings.keyUiLocale);\r\n        setUILocale(results[9].settings.keyUiLocale)\r\n\r\n        // for admin module\r\n        setOrgUnitGroups(results[1].organisationUnitGroups);\r\n        setOrgUnitLevels(results[2].organisationUnitLevels);\r\n        setTeas(results[3].trackedEntityAttributes);\r\n        setTrackerDataElements(results[4].dataElements);\r\n        setUsers(results[5].users);\r\n        setOrgUnits(results[6].organisationUnits);\r\n        getTrackedEntityTypes(results[7].trackedEntityTypes);\r\n        setUserGroups(results[8].userGroups);\r\n\r\n        // for entry module\r\n        if (results[0].status) {\r\n          metadataApi.push(\"/api/dataStore/WHO_ICD11_COD/program\", {\r\n            id: null,\r\n          });\r\n          metadataApi.push(\"/api/dataStore/WHO_ICD11_COD/icdOptionSet\", {\r\n            id: null,\r\n          });\r\n          metadataApi.push(\"/api/dataStore/WHO_ICD11_COD/femaleOption\", {\r\n            code: null,\r\n          });\r\n          metadataApi.push(\"/api/dataStore/WHO_ICD11_COD/fullnameOption\", {\r\n            fullnameOption: false,\r\n          });\r\n          metadataApi.push(\"/api/dataStore/WHO_ICD11_COD/certificateTemplate\", {\r\n            certificate: null,\r\n          });\r\n          metadataApi.push(\"/api/dataStore/WHO_ICD11_COD/formMapping\", {\r\n            formMapping: null,\r\n          });\r\n          metadataApi.push(\"/api/dataStore/WHO_ICD11_COD/fullnameOption\", {\r\n            fullnameOption: false,\r\n          });\r\n          changeRoute(\"administration\");\r\n          setLoading(false);\r\n        } else {\r\n          if (results[0].id !== null) {\r\n            Promise.all([\r\n              metadataApi.getProgramMetadata(results[0].id),\r\n              metadataApi.get(\"/api/dataStore/WHO_ICD11_COD/femaleOption\"),\r\n              metadataApi.get(\"/api/dataStore/WHO_ICD11_COD/icdOptionSet\"),\r\n              metadataApi.get(\r\n                \"/api/dataStore/WHO_ICD11_COD/certificateTemplate\"\r\n              ),\r\n              metadataApi.get(\"/api/dataStore/WHO_ICD11_COD/formMapping\"),\r\n              metadataApi.get(\"/api/dataStore/WHO_ICD11_COD/fullnameOption\"),\r\n            ]).then( async (res) => {\r\n              console.log(res[0])\r\n              // Set userRoles\r\n              let roles = {\r\n                admin: false,\r\n                data: false,\r\n                view: false\r\n              };\r\n              results[9].userGroups.forEach( userGroup => {\r\n                const role = res[0].userGroupAccesses.find( ({id}) => id === userGroup.id );\r\n                if ( role ) {\r\n                  if ( role.access.charAt(1) === 'w' ) {\r\n                    roles = {\r\n                      ...roles,\r\n                      admin: true\r\n                    }\r\n                  }\r\n                  if ( role.access.charAt(3) === 'w' ) {\r\n                    roles = {\r\n                      ...roles,\r\n                      data: true\r\n                    }\r\n                  }\r\n                  if ( role.access.charAt(0) === 'r' && role.access.charAt(2) === 'r'  ) {\r\n                    roles = {\r\n                      ...roles,\r\n                      view: true\r\n                    }\r\n                  }\r\n                }\r\n              });\r\n              setUserRole(roles);\r\n\r\n\r\n              // Set other states\r\n              setProgramMetadata(res[0]);\r\n              setFemaleCode(res[1].code);\r\n              setFullnameOption(res[5].fullnameOption);\r\n              if (res[3].certificate !== null) setCertificateTemplate(res[3].certificate);\r\n              setFormMapping(res[4]);\r\n              changeRoute(\"list\");\r\n\r\n              await metadataApi.get(\"/api/options.json\", { paging: false }, [\r\n                \"fields=id,name,code,attributeValues[value,attribute[id]]\",\r\n                \"filter=optionSet.id:eq:\" + res[2].id,\r\n              ])\r\n              .then(({ options }) => {\r\n                console.log(\"options\",options);\r\n                getICD11Options(options);\r\n              });\r\n              \r\n\r\n              // Get Token for ICD11 API\r\n              await fetch(\"https://dhis2.world/services/icd11\", {\r\n                method: \"POST\"\r\n              })\r\n              .then(response => response.json())\r\n              .then(result => {\r\n                setIcdApiToken(result.token);\r\n              })\r\n              .catch(error => console.log('error', error));\r\n\r\n              setLoading(false);\r\n\r\n            });\r\n          } else {\r\n            changeRoute(\"administration\");\r\n            setLoading(false);\r\n          }\r\n        }\r\n      });\r\n    })();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"header-bar-container\">\r\n        <HeaderBarContainer />\r\n      </div>\r\n      {loading ? (\r\n        <LoadingMask />\r\n      ) : (\r\n        <div className=\"app-content\">\r\n          {!loading && <ControlBar />}\r\n          {route === \"list\" && <RegisteredTeiList />}\r\n          {route === \"search\" && <SearchForm />}\r\n          {route === \"form\" && <Form />}\r\n          {route === \"administration\" && <Administration />}\r\n          {route === \"export\" && <Export />}\r\n          {route === \"dashboard\" && <Dashboard />}\r\n          {route === \"translation\" && <Translation />}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    route: state.route,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  changeRoute,\r\n  setUserRole,\r\n\r\n  // for admin module\r\n  setTeas,\r\n  setTrackerDataElements,\r\n  setUsers,\r\n  setUserGroups,\r\n  setOrgUnitGroups,\r\n  setOrgUnitLevels,\r\n  setOrgUnits,\r\n  getTrackedEntityTypes,\r\n\r\n  // for entry module\r\n  setProgramMetadata,\r\n  getICD11Options,\r\n  setFemaleOption,\r\n  changeCerticateTemplate,\r\n  setCertificateLogo,\r\n  setFormMapping,\r\n  setCertificateTemplate,\r\n  setFemaleCode,\r\n  setFullnameOption,\r\n  setUILocale,\r\n  setIcdApiToken\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\redux\\reducers\\index.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\locale\\i18n.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\locale\\locale.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\RegisteredTeiList\\index.js",["448","449","450","451","452","453","454"],"import { useRef, useEffect, useState } from \"react\";\r\nimport { Table, Tag } from \"antd\";\r\nimport { Hooks, Components } from \"tracker-capture-app-core\";\r\nimport \"./index.css\";\r\nimport { generateTableColumns, generateTableFilter } from \"../../utils/index\";\r\n/* REDUX */\r\nimport { connect } from \"react-redux\";\r\nimport { initData } from \"../../redux/actions/data\";\r\nimport { changeRoute } from \"../../redux/actions/route\";\r\nimport { useTranslation } from \"react-i18next\";\r\n/*       */\r\n\r\n/* Components */\r\nimport { SearchOutlined } from \"@ant-design/icons\";\r\nconst { useApi } = Hooks;\r\nconst { LoadingMask } = Components;\r\n\r\nconst RegisteredTeiList = ({ metadata, data, initData, changeRoute }) => {\r\n  const { t } = useTranslation();\r\n  const { dataApi } = useApi();\r\n  const { programMetadata, selectedOrgUnit } = metadata;\r\n  const tableContainer = useRef(null);\r\n  const [size, setSize] = useState({ height: 0 });\r\n  const [loadingTable, setLoadingTable] = useState(true);\r\n  const [loadingPage, setLoadingPage] = useState(true);\r\n  const [sortTable, setSortTable] = useState(\"order=created:desc\");\r\n  const [filterTable, setFilterTable] = useState([]);\r\n\r\n  const [tableData, setTableData] = useState({\r\n    columns: null,\r\n    data: null,\r\n    pager: null,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const tableContainerHeight = tableContainer.current.offsetHeight;\r\n    setSize({\r\n      ...size,\r\n      height: tableContainerHeight,\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (!programMetadata || !selectedOrgUnit) return;\r\n      setLoadingPage(true);\r\n      setFilterTable([]);\r\n      setSortTable(\"order=created:desc\");\r\n      setTableData({\r\n        ...tableData,\r\n        columns: null,\r\n        data: null,\r\n        pager: null,\r\n      });\r\n      const instanceList = await dataApi.getTrackedEntityInstanceListByQuery(\r\n        selectedOrgUnit.id,\r\n        programMetadata.id,\r\n        10,\r\n        1,\r\n        \"\",\r\n        sortTable\r\n      );\r\n      setupUI(instanceList);\r\n    })();\r\n  }, [\r\n    programMetadata ? programMetadata.id : null,\r\n    selectedOrgUnit ? selectedOrgUnit.id : null,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (selectedOrgUnit) {\r\n      (async () => {\r\n        setLoadingTable(true);\r\n        const instanceList = await dataApi.getTrackedEntityInstanceListByQuery(\r\n          selectedOrgUnit.id,\r\n          programMetadata.id,\r\n          tableData.pager ? tableData.pager.pageSize : 10,\r\n          tableData.page ? tableData.pager.page : 1,\r\n          returnFilterString(filterTable),\r\n          sortTable\r\n        );\r\n        setupUI(instanceList);\r\n      })();\r\n    }\r\n  }, [filterTable, sortTable]);\r\n\r\n  const returnFilterString = (arr) => {\r\n    let filterString = \"\";\r\n    arr.forEach((e) => {\r\n      if (e.type === \"select\") {\r\n        filterString += `&attribute=${e.teiId}:EQ:${e.value}`;\r\n      } else {\r\n        filterString += `&attribute=${e.teiId}:LIKE:${e.value}`;\r\n      }\r\n    });\r\n    return filterString;\r\n  };\r\n\r\n  const onSort = async (sorter) => {\r\n    if (sorter) {\r\n      let orderString = \"\";\r\n      if (sorter.order === \"descend\") {\r\n        orderString = `order=${sorter.columnKey}:desc`;\r\n      } else {\r\n        if (sorter.order === \"ascend\") {\r\n          orderString = `order=${sorter.columnKey}:asc`;\r\n        } else {\r\n          orderString = `order=lastupdated:desc`;\r\n        }\r\n      }\r\n      setSortTable(orderString);\r\n    }\r\n  };\r\n\r\n  const onFilter = async (value, teiId, type) => {\r\n    let arr = [];\r\n    arr = filterTable;\r\n    if (value && arr) {\r\n      let find = arr.findIndex((e) => e.teiId === teiId);\r\n      if (find >= 0) {\r\n        arr[find].value = value;\r\n      } else {\r\n        arr.push({\r\n          value,\r\n          teiId,\r\n          type: type ? type : null,\r\n        });\r\n      }\r\n    } else {\r\n      let find = arr.findIndex((e) => e.teiId === teiId);\r\n      arr.splice(find, 1);\r\n    }\r\n    setFilterTable([...arr]);\r\n  };\r\n\r\n  const setupUI = (instanceList) => {\r\n    let columns = programMetadata.trackedEntityAttributes\r\n      .filter((tea) => tea.displayInList)\r\n      .map((tea) => {\r\n        const teaObject = {\r\n          title: tea.displayFormName,\r\n          dataIndex: tea.id,\r\n          key: tea.id,\r\n          sorter: true,\r\n          filterDropdown: generateTableFilter(tea, onFilter),\r\n          render: generateTableColumns(tea),\r\n        };\r\n        return teaObject;\r\n      });\r\n    const lastUpdatedObject = {\r\n      title: t(\"lastUpdated\"),\r\n      dataIndex: \"lastupdated\",\r\n      key: \"lastupdated\",\r\n      sorter: true,\r\n      // filterDropdown: generateTableFilter(null, onFilter, {\r\n      //   name: \"lastupdated\",\r\n      //   type: \"DATE\",\r\n      // }),\r\n      render: generateTableColumns(null, { name: \"lastupdated\", type: \"DATE\" }),\r\n    };\r\n    columns.unshift(lastUpdatedObject);\r\n    const data = instanceList.rows.map((row, index) => {\r\n      const rowObject = {\r\n        key: index,\r\n      };\r\n\r\n      const teiIdIndex = instanceList.headers.findIndex(\r\n        (h) => h.name === \"instance\"\r\n      );\r\n      rowObject.teiId = row[teiIdIndex];\r\n\r\n      columns.forEach((column) => {\r\n        const columnIndex = instanceList.headers.findIndex((h) => {\r\n          return h.name === column.dataIndex;\r\n        });\r\n        rowObject[column.dataIndex] =\r\n          columnIndex !== -1 ? row[columnIndex] : \"\";\r\n      });\r\n      return rowObject;\r\n    });\r\n\r\n    setLoadingPage(false);\r\n    setLoadingTable(false);\r\n    setTableData({\r\n      ...tableData,\r\n      columns,\r\n      data,\r\n      pager: instanceList.metaData.pager,\r\n    });\r\n  };\r\n\r\n  const onChangePage = async (page, pageSize) => {\r\n    setLoadingTable(true);\r\n    const instanceList = await dataApi.getTrackedEntityInstanceListByQuery(\r\n      selectedOrgUnit.id,\r\n      programMetadata.id,\r\n      pageSize,\r\n      page,\r\n      returnFilterString(filterTable),\r\n      sortTable\r\n    );\r\n    setupUI(instanceList);\r\n  };\r\n\r\n  return (\r\n    <div className=\"registered-tei-list-wrapper\">\r\n      <div className=\"registered-tei-list-container\" ref={tableContainer}>\r\n        {selectedOrgUnit ? (\r\n          !loadingPage ? (\r\n            <Table\r\n              onRow={(record, rowIndex) => {\r\n                return {\r\n                  onClick: async (event) => {\r\n                    setLoadingPage(true);\r\n                    const result = await dataApi.getTrackedEntityInstanceById(\r\n                      record.teiId,\r\n                      programMetadata.id\r\n                    );\r\n                    setLoadingPage(false);\r\n                    initData(result, programMetadata);\r\n                    changeRoute(\"form\");\r\n                  },\r\n                };\r\n              }}\r\n              sticky\r\n              tableLayout={\"fixed\"}\r\n              pagination={\r\n                tableData.pager\r\n                  ? {\r\n                      position: [\"bottomCenter\"],\r\n                      showSizeChanger: true,\r\n                      defaultCurrent: tableData.pager.page,\r\n                      total: tableData.pager.total,\r\n                      onChange: onChangePage,\r\n                    }\r\n                  : null\r\n              }\r\n              columns={tableData.columns}\r\n              dataSource={tableData.data}\r\n              scroll={{ y: size.height - 200 }}\r\n              loading={loadingTable}\r\n              onChange={(pagination, filters, sorter, extra) => {\r\n                onSort(sorter);\r\n              }}\r\n              bordered={true}\r\n              locale={{\r\n                triggerDesc: t(\"triggerDesc\"),\r\n                triggerAsc: t(\"triggerAsc\"),\r\n                cancelSort: t(\"cancelSort\"),\r\n              }}\r\n            />\r\n          ) : (\r\n            <LoadingMask />\r\n          )\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    metadata: state.metadata,\r\n    data: state.data,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  initData,\r\n  changeRoute,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RegisteredTeiList);\r\n","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\ControlBar\\index.js",["455"],"import { useState, useEffect } from \"react\";\r\n\r\nimport { Popover } from \"antd\";\r\nimport {\r\n  Button,\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n  InputLabel,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  IconButton,\r\n  Divider,\r\n  Slide,\r\n} from \"@mui/material\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faCircleQuestion,\r\n  faCircleInfo,\r\n  faClose,\r\n  faArrowLeft,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Components } from \"tracker-capture-app-core\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport \"./index.css\";\r\n\r\n/* REDUX */\r\nimport { connect } from \"react-redux\";\r\nimport { setSelectedOrgUnit } from \"../../redux/actions/metadata\";\r\nimport {\r\n  initNewData,\r\n  mutateTei,\r\n  mutateEnrollment,\r\n  mutateEvent,\r\n} from \"../../redux/actions/data\";\r\nimport { changeRoute } from \"../../redux/actions/route\";\r\n\r\nimport WarningDialog from \"../Form/WarningDialog\";\r\n\r\n/*       */\r\nconst { OrgUnitSelector } = Components;\r\n// const { Option } = Select;\r\n\r\nconst ControlBar = ({\r\n  metadata,\r\n  setSelectedOrgUnit,\r\n  changeRoute,\r\n  initNewData,\r\n  mutateTei,\r\n  mutateEnrollment,\r\n  mutateEvent,\r\n  route,\r\n  userRoles,\r\n  currentEventId,\r\n  isDirty,\r\n}) => {\r\n  const [routeText, setRouteText] = useState(\"\");\r\n\r\n  const { selectedOrgUnit, programMetadata } = metadata;\r\n  const { t } = useTranslation();\r\n\r\n  const [about, setAbout] = useState(false);\r\n  const [help, setHelp] = useState(false);\r\n  const [doc, setDoc] = useState(null);\r\n  const [exitWarning, setExitWarning] = useState(false);\r\n\r\n  useEffect(() => {\r\n    console.log(userRoles);\r\n  }, [userRoles]);\r\n\r\n  return (\r\n    <div className=\"control-bar-container\">\r\n      <Popover\r\n        trigger=\"click\"\r\n        content={\r\n          <div className=\"orgunit-selector-container\">\r\n            <OrgUnitSelector\r\n              selectedOrgUnit={selectedOrgUnit}\r\n              handleSelectOrgUnit={(orgUnit) => {\r\n                setSelectedOrgUnit(orgUnit);\r\n                if (isDirty) {\r\n                  setRouteText(\"list\");\r\n                  setExitWarning(true);\r\n                } else {\r\n                  changeRoute(\"list\");\r\n                }\r\n              }}\r\n            />\r\n          </div>\r\n        }\r\n        onVisibleChange={(visible) => {\r\n          console.log(visible);\r\n        }}\r\n        // onCancel={() => {\r\n        //   setSelectedOrgUnit(null);\r\n        // }}\r\n        // onConfirm={() => {\r\n        //   console.log(\"confirm\");\r\n        // }}\r\n        // okText={t(\"ok\")}\r\n        // cancelText={t(\"cancel\")}\r\n      >\r\n        <div className=\"button-container\">\r\n          <Button variant=\"outlined\" disabled={!programMetadata}>\r\n            {selectedOrgUnit ? (\r\n              <>\r\n                {t(\"orgUnit\")}: <b>{selectedOrgUnit.displayName} </b>\r\n              </>\r\n            ) : (\r\n              t(\"selectOrgUnit\")\r\n            )}\r\n          </Button>\r\n        </div>\r\n      </Popover>\r\n      <div className=\"button-container\">\r\n        <Button\r\n          variant=\"contained\"\r\n          disabled={\r\n            !selectedOrgUnit ||\r\n            !programMetadata.organisationUnits.find(\r\n              (ou) => ou.id === selectedOrgUnit.id\r\n            )\r\n          }\r\n          onClick={() => {\r\n            if (isDirty) {\r\n              setRouteText(\"form\");\r\n              setExitWarning(true);\r\n            } else {\r\n              changeRoute(\"form\");\r\n              initNewData(selectedOrgUnit, programMetadata);\r\n            }\r\n          }}\r\n        >\r\n          {t(\"newRegistration\")}\r\n        </Button>\r\n      </div>\r\n      <div className=\"button-container\">\r\n        <Button\r\n          disabled={!programMetadata}\r\n          onClick={() => {\r\n            if (isDirty) {\r\n              setRouteText(route === \"search\" ? \"list\" : \"search\");\r\n              setExitWarning(true);\r\n            } else {\r\n              changeRoute(route === \"search\" ? \"list\" : \"search\");\r\n            }\r\n          }}\r\n        >\r\n          {route === \"search\" ? t(\"list\") : t(\"search\")}\r\n        </Button>\r\n      </div>\r\n      <div className=\"button-container menu-button-container\">\r\n        <FormControl sx={{ m: 1, minWidth: 120 }} size=\"small\">\r\n          <InputLabel id=\"demo-select-small-label\">Menu</InputLabel>\r\n          <Select\r\n            labelId=\"demo-select-small-label\"\r\n            id=\"demo-select-small\"\r\n            value={\r\n              route\r\n                ? route === \"form\" || route === \"search\"\r\n                  ? \"list\"\r\n                  : route\r\n                : \"list\"\r\n            }\r\n            label=\"Menu\"\r\n            style={{ width: 150 }}\r\n            onChange={(value) => {\r\n              if (isDirty) {\r\n                setRouteText(value.target.value);\r\n                setExitWarning(true);\r\n              } else {\r\n                changeRoute(value.target.value);\r\n              }\r\n            }}\r\n          >\r\n            {programMetadata !== null &&\r\n              (userRoles.data || userRoles.admin) && (\r\n                <MenuItem value=\"list\">{t(\"dataEntry\")}</MenuItem>\r\n              )}\r\n            {programMetadata !== null &&\r\n              (userRoles.view || userRoles.admin) && (\r\n                <MenuItem value=\"export\">{t(\"anacodExport\")}</MenuItem>\r\n              )}\r\n            {programMetadata !== null &&\r\n              (userRoles.view || userRoles.admin) && (\r\n                <MenuItem value=\"dashboard\">{t(\"dashboard\")}</MenuItem>\r\n              )}\r\n            {userRoles.admin && (\r\n              <MenuItem value=\"administration\">{t(\"administration\")}</MenuItem>\r\n            )}\r\n            {userRoles.admin && (\r\n              <MenuItem value=\"translation\">{t(\"translation\")}</MenuItem>\r\n            )}\r\n          </Select>\r\n        </FormControl>\r\n        {/* <div className=\"exit-app-button\">\r\n          <Button\r\n            onClick={() => {\r\n              window.location.href = \"../../../dhis-web-dashboard/\";\r\n            }}\r\n          >\r\n            {t(\"exitApp\")}\r\n          </Button>\r\n        </div> */}\r\n        <div className=\"exit-app-button\">\r\n          <IconButton\r\n            size=\"small\"\r\n            onClick={() => {\r\n              setHelp(true);\r\n            }}\r\n          >\r\n            <FontAwesomeIcon icon={faCircleQuestion} />\r\n          </IconButton>\r\n        </div>\r\n        <div className=\"exit-app-button\">\r\n          <IconButton\r\n            size=\"small\"\r\n            onClick={() => {\r\n              setAbout(true);\r\n            }}\r\n          >\r\n            <FontAwesomeIcon icon={faCircleInfo} />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n      <Dialog\r\n        open={about}\r\n        fullWidth\r\n        maxWidth=\"sm\"\r\n        onClose={() => {\r\n          setAbout(false);\r\n        }}\r\n      >\r\n        <DialogTitle>\r\n          About\r\n          <IconButton\r\n            aria-label=\"close\"\r\n            onClick={() => {\r\n              setAbout(false);\r\n            }}\r\n            sx={{\r\n              position: \"absolute\",\r\n              right: 8,\r\n              top: 12,\r\n            }}\r\n          >\r\n            <FontAwesomeIcon icon={faClose} fontSize={24} />\r\n          </IconButton>\r\n        </DialogTitle>\r\n        <Divider />\r\n        <DialogContent>\r\n          <div>\r\n            <strong>Cause of Death App</strong> <i>(version 1.0.1)</i>\r\n          </div>\r\n          <div>\r\n            Developed of HISP Vietnam in collaboration with University of Oslo\r\n            and WHO\r\n          </div>\r\n          <br />\r\n          <div>DHIS2 version tested:</div>\r\n          <ul>\r\n            <li>2.35</li>\r\n            <li>2.36</li>\r\n            <li>2.37</li>\r\n            <li>2.38</li>\r\n            <li>2.39</li>\r\n            <li>2.40</li>\r\n          </ul>\r\n        </DialogContent>\r\n      </Dialog>\r\n      <Dialog\r\n        open={help}\r\n        fullWidth\r\n        maxWidth=\"xl\"\r\n        onClose={() => {\r\n          setHelp(false);\r\n          setDoc(null);\r\n        }}\r\n      >\r\n        <DialogTitle>\r\n          {t(\"help\")}\r\n          <IconButton\r\n            aria-label=\"close\"\r\n            onClick={() => {\r\n              setHelp(false);\r\n              setDoc(null);\r\n            }}\r\n            sx={{\r\n              position: \"absolute\",\r\n              right: 8,\r\n              top: 12,\r\n            }}\r\n          >\r\n            <FontAwesomeIcon icon={faClose} fontSize={24} />\r\n          </IconButton>\r\n        </DialogTitle>\r\n        <Divider />\r\n        <DialogContent>\r\n          <div className=\"help-container\">\r\n            <Slide direction=\"right\" in={!doc} mountOnEnter unmountOnExit>\r\n              <div className=\"help-homepage\">\r\n                <div className=\"help-title\">{t(\"userManual\")}</div>\r\n                <div className=\"help-subtitle\">{t(\"causeOfDeathVersion\")}</div>\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <div className=\"help-title\">{t(\"appFeatures\")}</div>\r\n                <ul className=\"help-listing\">\r\n                  <li\r\n                    onClick={() => {\r\n                      setDoc({\r\n                        label: \"dataentry\",\r\n                        type: \"googleDoc\",\r\n                        url: \"https://docs.google.com/document/d/e/2PACX-1vT7is5PmIEG0jVWfnT7kGJrwu0Ihj0rGlBsMA8JZWmwFdkK8YHAAW-WxL6FkgbrGX5cAPpyVUChVDlJ/pub?embedded=true\",\r\n                      });\r\n                    }}\r\n                  >\r\n                    {t(\"dataEntry\")}\r\n                  </li>\r\n                  <li\r\n                    onClick={() => {\r\n                      setDoc({\r\n                        label: \"anacod\",\r\n                        type: \"googleDoc\",\r\n                        url: \"https://docs.google.com/document/d/e/2PACX-1vQdr2wU1vpl_Aq0qR3tzx4_Ye2MeS4Vl5ngVw4_-URLG9P0y6zpLHtAJj4rJh47QGdN0az0XbbuZt6t/pub?embedded=true\",\r\n                      });\r\n                    }}\r\n                  >\r\n                    {t(\"anacodExport\")}\r\n                  </li>\r\n                  <li\r\n                    onClick={() => {\r\n                      setDoc({\r\n                        label: \"dashboard\",\r\n                        type: \"googleDoc\",\r\n                        url: \"https://docs.google.com/document/d/e/2PACX-1vRtwuTMcvKmUBWKoI1Cgt9WLjGLiuA9Ti_0ii9HVSpcMRRlh4rBd99GpalRytZp4N6P05K9QYvYOm62/pub?embedded=true\",\r\n                      });\r\n                    }}\r\n                  >\r\n                    {t(\"dashboard\")}\r\n                  </li>\r\n                  <li\r\n                    onClick={() => {\r\n                      setDoc({\r\n                        label: \"translation\",\r\n                        type: \"googleDoc\",\r\n                        url: \"https://docs.google.com/document/d/e/2PACX-1vRTLVO0CS8SyEo7U_WgGMpyZDwFanKJ0ov7nRRyW5p64q4HT563pS_ZgAbf7V2drkaeQlcojnsTQfb4/pub?embedded=true\",\r\n                      });\r\n                    }}\r\n                  >\r\n                    {t(\"translation\")}\r\n                  </li>\r\n                  <li\r\n                    onClick={() => {\r\n                      setDoc({\r\n                        label: \"administration\",\r\n                        type: \"googleDoc\",\r\n                        url: \"https://docs.google.com/document/d/e/2PACX-1vSSVBG46xrDYjA1c8gkl3RdY3JcgLgLhf-rQPJHtvf67CnBMoSdlg14vxpKXb1yDpLB8sFTQo1JBJEf/pub?embedded=true\",\r\n                      });\r\n                    }}\r\n                  >\r\n                    {t(\"administration\")}\r\n                  </li>\r\n                  <li\r\n                    onClick={() => {\r\n                      setDoc({\r\n                        label: \"installation\",\r\n                        type: \"googleDoc\",\r\n                        url: \"https://docs.google.com/document/d/e/2PACX-1vSQ1HmJ1_VpuKiuWd23N14kDbWLZwyqwqLmqLxAx_aFF5PIqw7w-iCDjIyeaa_O-A/pub?embedded=true\",\r\n                      });\r\n                    }}\r\n                  >\r\n                    {t(\"installation\")}\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n            </Slide>\r\n            <Slide direction=\"left\" in={doc} mountOnEnter unmountOnExit>\r\n              <div className=\"help-content\">\r\n                {doc && (\r\n                  <iframe\r\n                    src={doc.url + `&time=${new Date()}`}\r\n                    width=\"750px\"\r\n                    height=\"100%\"\r\n                    frameBorder=\"0\"\r\n                  ></iframe>\r\n                )}\r\n              </div>\r\n            </Slide>\r\n          </div>\r\n        </DialogContent>\r\n        <Divider />\r\n        <DialogActions>\r\n          <Button\r\n            variant=\"contained\"\r\n            size=\"large\"\r\n            onClick={() => {\r\n              setDoc(null);\r\n            }}\r\n          >\r\n            <FontAwesomeIcon icon={faArrowLeft} />\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      <WarningDialog\r\n        open={exitWarning}\r\n        handleCancel={() => {\r\n          setExitWarning(false);\r\n        }}\r\n        handleOk={() => {\r\n          if (routeText === \"form\") {\r\n            initNewData(selectedOrgUnit, programMetadata);\r\n          } else {\r\n            mutateTei(\"isDirty\", false);\r\n            mutateEnrollment(\"isDirty\", false);\r\n            if (currentEventId) {\r\n              mutateEvent(currentEventId, \"isDirty\", false);\r\n            }\r\n          }\r\n          setExitWarning(false);\r\n          changeRoute(routeText);\r\n        }}\r\n      ></WarningDialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    metadata: state.metadata,\r\n    route: state.route,\r\n    userRoles: state.user.userRoles,\r\n    isDirty:\r\n      (state.data.currentEnrollment && state.data.currentEnrollment.isDirty) ||\r\n      (state.data.currentTei && state.data.currentTei.isDirty) ||\r\n      (state.data.currentEvents.length > 0 &&\r\n        state.data.currentEvents[0].isDirty),\r\n    currentEventId:\r\n      state.data.currentEvents.length > 0\r\n        ? state.data.currentEvents[0].event\r\n        : null,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  setSelectedOrgUnit,\r\n  changeRoute,\r\n  initNewData,\r\n  mutateTei,\r\n  mutateEnrollment,\r\n  mutateEvent,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ControlBar);\r\n","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Search\\index.js",["456","457","458"],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Form\\index.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\HeaderBar\\index.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Administration\\index.js",["459"],"import { useState, useEffect } from \"react\";\r\nimport Selections from \"./Selections\";\r\nimport Attributes from \"./Attributes\";\r\nimport FrameA from \"./FrameA\";\r\nimport FrameB from \"./FrameB\";\r\nimport AssignOrgUnits from \"./AssignOrgUnits\";\r\nimport AssignUsers from \"./AssignUsers\";\r\nimport Certificate from \"./Certificate\";\r\nimport Review from \"./Review\";\r\nimport Finish  from \"./Finish\";\r\nimport { Steps, Button, message, Spin } from \"antd\";\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\nimport { Hooks } from \"tracker-capture-app-core\";\r\n/* REDUX */\r\nimport { connect } from \"react-redux\";\r\nimport { changeStep } from \"../../redux/actions/admin\";\r\nimport { setFormMapping_TEAs, setProgramMetadata, setCertificateTemplate, setFemaleCode } from \"../../redux/actions/metadata\";\r\n/*       */\r\nimport \"./index.css\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst { Step } = Steps;\r\nconst { useApi } = Hooks;\r\n\r\nconst Administration = ({ admin, programMetadata, formMapping, changeStep, setFormMapping_TEAs, setProgramMetadata, setCertificateTemplate, setFemaleCode }) => {\r\n  const { t } = useTranslation();\r\n  \r\n  const [open, setOpen] = useState(false);\r\n  const [spinning, setSpinning] = useState(false);\r\n  const { metadataApi } = useApi();\r\n  const { \r\n    step, \r\n    type,\r\n    trackedEntityAttributes,\r\n    trackedEntityType,\r\n    certificateTemplate,\r\n    femaleOption,\r\n    fullnameOption\r\n  } = admin;\r\n\r\n  const antIcon = <LoadingOutlined style={{ fontSize: 102 }} />;\r\n\r\n  useEffect(() => {\r\n    if ( programMetadata !== null ) { \r\n      setOpen(false);\r\n      changeStep(0);\r\n    }\r\n  },[programMetadata])\r\n\r\n  return (\r\n    <div className=\"administration-wrapper\">\r\n      <Finish open={open} />\r\n      {\r\n        (programMetadata === null) ? \r\n        <div className=\"administration-container\">\r\n          <div className=\"administration-stepper\">\r\n            <Steps current={step} size=\"small\">\r\n              <Step title={t(\"step1Installation\")} disabled={true} />\r\n              <Step title={t(\"step2Attribute\")} />\r\n              <Step title={t(\"step3FrameA\")} />\r\n              <Step title={t(\"step4FrameB\")} />\r\n              <Step title={t(\"step5OUs\")} />\r\n              <Step title={t(\"step6Users\")} />\r\n              <Step title={t(\"step7Review\")} />\r\n            </Steps>\r\n          </div>\r\n          {step !== 0 && (\r\n            <div className=\"administration-navigation-buttons-container\">\r\n              <Button\r\n                onClick={() => {\r\n                  // changeStep(step === 4 && type === \"default\" ? 0 : step >= 1 ? step - 1 : 0);\r\n                  changeStep(step === 4 && type === \"default\" ? 0 : step - 1);\r\n                }}\r\n              >\r\n                Back\r\n              </Button>\r\n              { (step===6) ? \r\n                <Button type=\"primary\"\r\n                  style={{ marginLeft: 10 }}\r\n                  onClick={() => setOpen(true)}\r\n                >\r\n                  Install\r\n                </Button> \r\n                :\r\n                <Button\r\n                  onClick={() => {\r\n                    if (step === 0) {\r\n                      if ( type === \"default\" ) {\r\n                        changeStep(4);\r\n                      }\r\n                    }\r\n                    else if ( step === 1 ) {\r\n                      if ( type === \"custom\" ) {\r\n                        if ( trackedEntityType === null || femaleOption === \"\" ) {\r\n                          // Show error\r\n                          message.error(t(\"errorMissingTET\"));\r\n                        } \r\n                        // else if (!fullnameOption && trackedEntityAttributes.filter( ([destination,]) => destination !== '' ).length < 7) {\r\n                        //   message.error(t(\"errorMissingTET\"));\r\n                        // }\r\n                        else if ( fullnameOption === \"noname\" &&  trackedEntityAttributes.filter( ([destination,]) => destination !== '' ).length < 5) {\r\n                          message.error(t(\"errorMissingTET\"));\r\n                        }\r\n                        else if ( fullnameOption === \"fullname\" &&  trackedEntityAttributes.filter( ([destination,]) => destination !== '' ).length < 6) {\r\n                          message.error(t(\"errorMissingTET\"));\r\n                        }\r\n                        else if ( fullnameOption === \"firstlastname\" &&  trackedEntityAttributes.filter( ([destination,]) => destination !== '' ).length < 7) {\r\n                          message.error(t(\"errorMissingTET\"));\r\n                        }\r\n                        else if ( fullnameOption === \"firstmidlastname\" &&  trackedEntityAttributes.filter( ([destination,]) => destination !== '' ).length < 8) {\r\n                          message.error(t(\"errorMissingTET\"));\r\n                        }\r\n                        else changeStep(2);\r\n                      }\r\n                    }\r\n                    else changeStep(step < 6 ? step + 1 : 6);\r\n                  }}\r\n                  style={{ marginLeft: 10 }}\r\n                >\r\n                  Next\r\n                </Button>\r\n              }\r\n            </div>\r\n          )}\r\n          <div className=\"administration-content-container\">\r\n            {step === 0 && <Selections />}\r\n            {step === 1 && <Attributes />}\r\n            {step === 2 && <FrameA />}\r\n            {step === 3 && <FrameB />}\r\n            {step === 4 && <AssignOrgUnits />}\r\n            {step === 5 && <AssignUsers />}\r\n            {step === 6 && <Review />}\r\n          </div>\r\n        </div>\r\n        : \r\n        <div className=\"administration-container\">\r\n          <div className=\"administration-stepper\">\r\n            <Steps current={step} size=\"small\">\r\n              <Step title={t(\"step1Attributes\")} />\r\n              <Step title={t(\"step2Certificate\")} />\r\n            </Steps>\r\n          </div>\r\n          <Spin spinning={spinning} indicator={antIcon} >\r\n            <div className=\"administration-navigation-buttons-container\">\r\n              {\r\n                (step===1) ? \r\n                  <>\r\n                    <Button onClick={() => changeStep(step - 1) }>Back</Button>\r\n                    <Button type=\"primary\"\r\n                      style={{ marginLeft: 10 }}\r\n                      onClick={() => {\r\n                        setSpinning(true);\r\n                        metadataApi.push(\"/api/dataStore/WHO_ICD11_COD/certificateTemplate\", {certificate: certificateTemplate}, \"PUT\").then( res => {\r\n                          setCertificateTemplate(certificateTemplate);\r\n                          message.success(t(\"saveSuccessful\"));\r\n                          setSpinning(false);\r\n                        });\r\n                      }}\r\n                    >\r\n                      {t(\"save\")}\r\n                    </Button> \r\n                  </>\r\n                  :\r\n                  <>\r\n                    <Button onClick={() => changeStep(step + 1) }>Next</Button>\r\n                    <Button type=\"primary\"\r\n                      style={{ marginLeft: 10 }}\r\n                      onClick={() => {\r\n                        setSpinning(true);\r\n                        // Update formMapping in redux and dataStore\r\n                        let attributes = {};\r\n                        admin.trackedEntityAttributes.forEach( defaultAttribute => {\r\n                          if (defaultAttribute[1] === \"Unique ID\") attributes[\"system_id\"] = defaultAttribute[0];\r\n                          if (defaultAttribute[1] === \"First Name\") attributes[\"given_name\"] = defaultAttribute[0];\r\n                          if (defaultAttribute[1] === \"Last Name\") attributes[\"family_name\"] = defaultAttribute[0];\r\n                          if (defaultAttribute[1] === \"Date of Birth\") attributes[\"dob\"] = defaultAttribute[0];\r\n                          if (defaultAttribute[1] === \"Date of Birth is estimated\") attributes[\"estimated_dob\"] = defaultAttribute[0];\r\n                          if (defaultAttribute[1] === \"Age in years\") attributes[\"age\"] = defaultAttribute[0];\r\n                          if (defaultAttribute[1] === \"Address\") attributes[\"address\"] = defaultAttribute[0];\r\n                          if (defaultAttribute[1] === \"Sex\") attributes[\"sex\"] = defaultAttribute[0];\r\n                        });\r\n                        setFormMapping_TEAs(attributes);\r\n                        metadataApi.push(\"/api/dataStore/WHO_ICD11_COD/formMapping\", {\r\n                          ...formMapping,\r\n                          attributes: attributes\r\n                        }, \"PUT\");\r\n\r\n                        // Update femaleCode\r\n                        setFemaleCode(femaleOption);\r\n                        metadataApi.push(\"/api/dataStore/WHO_ICD11_COD/femaleOption\", {code: femaleOption}, \"PUT\");\r\n                        \r\n                        // Update program in DHIS2 and programMetadata in Redux\r\n                        metadataApi.get(\"/api/programs.json\", { paging: false }, [\"fields=:owner\",\"filter=id:eq:\"+programMetadata.id] ).then( programs => {\r\n                          //default attributes\r\n                          let program = {\r\n                            ...programs.programs[0],\r\n                            trackedEntityType: {\r\n                              id: admin.trackedEntityType\r\n                            },\r\n                            programTrackedEntityAttributes: [\r\n                              {\r\n                                \"mandatory\": true,\r\n                                \"searchable\": true,\r\n                                \"renderOptionsAsRadio\": false,\r\n                                \"displayInList\": true,\r\n                                \"sortOrder\": 1,\r\n                                \"program\": { \"id\": programMetadata.id },\r\n                                \"trackedEntityAttribute\": { \"id\": admin.trackedEntityAttributes[0][0] },\r\n                                \"programTrackedEntityAttributeGroups\": []\r\n                              },\r\n                              {\r\n                                \"mandatory\": false,\r\n                                \"searchable\": true,\r\n                                \"renderOptionsAsRadio\": false,\r\n                                \"displayInList\": true,\r\n                                \"sortOrder\": 2,\r\n                                \"program\": { \"id\": programMetadata.id  },\r\n                                \"trackedEntityAttribute\": { \"id\": admin.trackedEntityAttributes[1][0] },\r\n                                \"programTrackedEntityAttributeGroups\": []\r\n                              },\r\n                              {\r\n                                \"mandatory\": false,\r\n                                \"searchable\": true,\r\n                                \"renderOptionsAsRadio\": false,\r\n                                \"displayInList\": true,\r\n                                \"sortOrder\": 3,\r\n                                \"program\": { \"id\": programMetadata.id  },\r\n                                \"trackedEntityAttribute\": { \"id\": admin.trackedEntityAttributes[2][0] },\r\n                                \"programTrackedEntityAttributeGroups\": []\r\n                              },\r\n                              {\r\n                                \"mandatory\": false,\r\n                                \"searchable\": true,\r\n                                \"renderOptionsAsRadio\": false,\r\n                                \"displayInList\": true,\r\n                                \"sortOrder\": 4,\r\n                                \"program\": { \"id\": programMetadata.id  },\r\n                                \"trackedEntityAttribute\": { \"id\": admin.trackedEntityAttributes[3][0] },\r\n                                \"programTrackedEntityAttributeGroups\": []\r\n                              },\r\n                              {\r\n                                \"mandatory\": false,\r\n                                \"searchable\": false,\r\n                                \"renderOptionsAsRadio\": false,\r\n                                \"displayInList\": false,\r\n                                \"sortOrder\": 5,\r\n                                \"program\": { \"id\": programMetadata.id  },\r\n                                \"trackedEntityAttribute\": { \"id\": admin.trackedEntityAttributes[4][0] },\r\n                                \"programTrackedEntityAttributeGroups\": []\r\n                              },\r\n                              {\r\n                                \"mandatory\": false,\r\n                                \"searchable\": false,\r\n                                \"renderOptionsAsRadio\": false,\r\n                                \"displayInList\": false,\r\n                                \"sortOrder\": 6,\r\n                                \"program\": { \"id\": programMetadata.id  },\r\n                                \"trackedEntityAttribute\": { \"id\": admin.trackedEntityAttributes[5][0] },\r\n                                \"programTrackedEntityAttributeGroups\": []\r\n                              },\r\n                              {\r\n                                \"mandatory\": false,\r\n                                \"searchable\": true,\r\n                                \"renderOptionsAsRadio\": false,\r\n                                \"displayInList\": true,\r\n                                \"sortOrder\": 7,\r\n                                \"program\": { \"id\": programMetadata.id  },\r\n                                \"trackedEntityAttribute\": { \"id\": admin.trackedEntityAttributes[6][0] },\r\n                                \"programTrackedEntityAttributeGroups\": []\r\n                              },\r\n                              {\r\n                                \"mandatory\": false,\r\n                                \"searchable\": false,\r\n                                \"renderOptionsAsRadio\": false,\r\n                                \"displayInList\": false,\r\n                                \"sortOrder\": 8,\r\n                                \"program\": { \"id\": programMetadata.id  },\r\n                                \"trackedEntityAttribute\": { \"id\": admin.trackedEntityAttributes[7][0] },\r\n                                \"programTrackedEntityAttributeGroups\": []\r\n                              }\r\n                            ]\r\n                          };\r\n                          //other attributes\r\n                          admin.trackedEntityAttributes.slice(8,admin.trackedEntityAttributes.length).forEach( (tea, index) => {\r\n                            program.programTrackedEntityAttributes.push({\r\n                              \"mandatory\": false,\r\n                              \"searchable\": false,\r\n                              \"renderOptionsAsRadio\": false,\r\n                              \"displayInList\": false,\r\n                              \"sortOrder\": (9 + index),\r\n                              \"program\": { \"id\": programMetadata.id  },\r\n                              \"trackedEntityAttribute\": { \"id\": tea[0] },\r\n                              \"programTrackedEntityAttributeGroups\": []\r\n                            })\r\n                          });\r\n                          // update program in DHIS2\r\n                          metadataApi.push(`/api/metadata?importStrategy=IMPORT_AND_UPDATE`, { programs: [program]}).then( res => {\r\n                            metadataApi.getProgramMetadata(programMetadata.id).then( metadata => {\r\n                              // update program in dataStore\r\n                              setProgramMetadata(metadata);\r\n                              setSpinning(false);\r\n                              message.success('Successfully Save!');\r\n                            })\r\n                          });\r\n                        })\r\n                      }}\r\n                    >\r\n                      Save\r\n                    </Button>\r\n                  </>\r\n              }\r\n            </div>\r\n            <div className=\"administration-content-container\">\r\n              {step === 0 && <Attributes />}\r\n              {step === 1 && <Certificate />}\r\n            </div>\r\n          </Spin>\r\n        </div>\r\n      }\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    admin: state.admin,\r\n    programMetadata: state.metadata.programMetadata,\r\n    formMapping: state.metadata.formMapping\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  changeStep,\r\n  setFormMapping_TEAs,\r\n  setProgramMetadata,\r\n  setCertificateTemplate,\r\n  setFemaleCode\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Administration);\r\n","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Translation\\index.js",["460","461"],"import { useState, useEffect } from \"react\";\r\nimport { Tabs, Button, Modal, Select } from \"antd\";\r\nimport { Hooks, Components } from \"tracker-capture-app-core\";\r\nimport TranslationTable from \"./TranslationTable\";\r\nimport \"./index.css\";\r\nimport { TRANSLATIONS, LOCALES } from \"./const\";\r\nimport localeFile from \"../../locale/locale\";\r\nimport { InitTranslation } from \"../../locale/i18n\";\r\nimport { useTranslation } from \"react-i18next\";\r\nconst { Option } = Select;\r\nconst { TabPane } = Tabs;\r\nconst { useApi } = Hooks;\r\nconst { LoadingMask } = Components;\r\n\r\nconst Translation = () => {\r\n  const { t } = useTranslation();\r\n  const { metadataApi } = useApi();\r\n  const [translations, setTranslations] = useState(null);\r\n  const [addLanguageModal, setAddLanguageModal] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [languages, setLanguages] = useState(null);\r\n  const [selectedAddLanguage, setSelectedAddLanguage] = useState(null);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      setLoading(true);\r\n      let result = await metadataApi.get(\r\n        \"/api/dataStore/WHO_ICD11_COD/translation\"\r\n      );\r\n      if (result.status) {\r\n        let array = [];\r\n        let arrayLanguages = [\r\n          {\r\n            label: \"English\",\r\n            key: \"en\",\r\n          },\r\n        ];\r\n        Object.entries(localeFile.en.translation).forEach((value) => {\r\n          let object = {\r\n            key: value[0],\r\n            translation: { en: value[1] },\r\n          };\r\n          array.push(object);\r\n        });\r\n        setTranslations(array);\r\n        setLanguages(arrayLanguages);\r\n        await metadataApi.push(\"setLanguages\", {\r\n          translations: array,\r\n          languages: arrayLanguages,\r\n        });\r\n        setLoading(false);\r\n      } else {\r\n        setTranslations(result.translations);\r\n        setLanguages(result.languages);\r\n        setLoading(false);\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  const changeTranslation = (key, lang, value) => {\r\n    const foundIndex = translations.findIndex((t) => t.key === key);\r\n    translations[foundIndex].translation[lang] = value;\r\n    setTranslations([...translations]);\r\n  };\r\n\r\n  const addNewLanguage = () => {\r\n    if (selectedAddLanguage) {\r\n      let findExistLanguage = languages.find(\r\n        (e) => e.key === selectedAddLanguage\r\n      );\r\n      if (!findExistLanguage) {\r\n        languages.push({\r\n          label: LOCALES[selectedAddLanguage],\r\n          key: selectedAddLanguage,\r\n        });\r\n        setLanguages(languages);\r\n      }\r\n      setSelectedAddLanguage(null);\r\n    }\r\n    setAddLanguageModal(false);\r\n  };\r\n\r\n  const closeAddLanguageModal = () => {\r\n    setAddLanguageModal(false);\r\n  };\r\n\r\n  const saveTranslation = async () => {\r\n    setLoading(true);\r\n    await metadataApi.push(\r\n      \"/api/dataStore/WHO_ICD11_COD/translation\",\r\n      {\r\n        translations: translations,\r\n        languages: languages,\r\n      },\r\n      \"PUT\"\r\n    );\r\n    InitTranslation();\r\n    setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"translation-wrapper\">\r\n      {loading ? (\r\n        <LoadingMask />\r\n      ) : (\r\n        <div className=\"translation-container\">\r\n          <Tabs defaultActiveKey=\"1\">\r\n            <TabPane tab={t(\"dataEntry\")} key=\"1\">\r\n              <TranslationTable\r\n                type=\"dataEntry\"\r\n                translations={translations}\r\n                changeTranslation={changeTranslation}\r\n                languages={languages}\r\n              />\r\n            </TabPane>\r\n            <TabPane tab={t(\"anacodExport\")} key=\"2\">\r\n              <TranslationTable\r\n                type=\"anacodExport\"\r\n                translations={translations}\r\n                changeTranslation={changeTranslation}\r\n                languages={languages}\r\n              />\r\n            </TabPane>\r\n            <TabPane tab={t(\"dashboard\")} key=\"3\">\r\n              <TranslationTable\r\n                type=\"dashboard\"\r\n                translations={translations}\r\n                changeTranslation={changeTranslation}\r\n                languages={languages}\r\n              />\r\n            </TabPane>\r\n            <TabPane tab={t(\"administration\")} key=\"4\">\r\n              <TranslationTable\r\n                type=\"administration\"\r\n                translations={translations}\r\n                changeTranslation={changeTranslation}\r\n                languages={languages}\r\n              />\r\n            </TabPane>\r\n            <TabPane tab={t(\"translation\")} key=\"5\">\r\n              <TranslationTable\r\n                type=\"translation\"\r\n                translations={translations}\r\n                changeTranslation={changeTranslation}\r\n                languages={languages}\r\n              />\r\n            </TabPane>\r\n          </Tabs>\r\n          <div className=\"translation-buttons-container\">\r\n            <div style={{ paddingRight: \"10px\" }}>\r\n              <Button type=\"primary\" onClick={saveTranslation}>\r\n                {t(\"save\")}\r\n              </Button>\r\n            </div>\r\n            <Button\r\n              onClick={() => {\r\n                setAddLanguageModal(true);\r\n              }}\r\n            >\r\n              {t(\"addLanguage\")}\r\n            </Button>\r\n            <Modal\r\n              title={t(\"addLanguage\")}\r\n              visible={addLanguageModal}\r\n              onOk={addNewLanguage}\r\n              onCancel={closeAddLanguageModal}\r\n              okText={t(\"add\")}\r\n              cancelText={t(\"cancel\")}\r\n            >\r\n              <Select\r\n                placeholder={t(\"pleaseSelectLanguage\")}\r\n                style={{ width: \"100%\" }}\r\n                showSearch\r\n                allowClear\r\n                onChange={(value) => {\r\n                  setSelectedAddLanguage(value);\r\n                }}\r\n              >\r\n                {Object.keys(LOCALES).map((key) => {\r\n                  return <Option value={key}>{LOCALES[key]}</Option>;\r\n                })}\r\n              </Select>\r\n            </Modal>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Translation;\r\n","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Export\\index.js",["462","463"],"import moment from \"moment\";\r\n/* REDUX */\r\nimport { connect } from \"react-redux\";\r\n/*       */\r\nimport { Button, Col, Row, Select } from \"antd\";\r\nimport { CaretRightOutlined, FileExcelOutlined } from \"@ant-design/icons\";\r\nimport \"./index.css\";\r\nimport { useState } from \"react\";\r\nimport { writeFile } from \"../../utils/excel.utility\";\r\nimport { Hooks } from \"tracker-capture-app-core\";\r\nimport Content from \"./Content\";\r\nimport XLSX from \"xlsx\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst { useApi } = Hooks;\r\n\r\nconst { Option } = Select;\r\nconst OPTIONS = [];\r\nfor (let i = moment().year(); i >= 1970; i--) {\r\n  OPTIONS.push(<Option key={i}>{i}</Option>);\r\n}\r\n\r\nconst Export = ({ route }) => {\r\n  const { t } = useTranslation();\r\n  const { dataApi } = useApi();\r\n  const getData = async (year) =>\r\n    dataApi.pull(\r\n      `/api/sqlViews/XpI2kVApPIH/data?paging=false&var=year:${year}`\r\n    );\r\n  const [periodType, setPeriodType] = useState(\"Yearly\");\r\n  const [selectedPeriods, selectPeriod] = useState([]);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [data, setData] = useState(null);\r\n  const [isEnableExport, setIsEnableExport] = useState(false);\r\n  return (\r\n    <div className=\"export-wrapper\">\r\n      <div className=\"export-container\">\r\n        <Row style={{ width: \"100%\", padding: 9 }} gutter={5}>\r\n          <Col>\r\n            {/* <Select\r\n              style={{ width: 200 }}\r\n              value={periodType}\r\n              placeholder=\"Select period type\"\r\n              onChange={setPeriodType}\r\n            >\r\n              {OPTIONS.map((option) => (\r\n                <Option value={option.value}>{option.label}</Option>\r\n              ))}\r\n            </Select> */}\r\n            <Select\r\n              mode=\"multiple\"\r\n              allowClear\r\n              style={{ width: \"500px\" }}\r\n              placeholder={t(\"pleaseSelectYear\")}\r\n              onChange={(value) => {\r\n                selectPeriod(value);\r\n              }}\r\n            >\r\n              {OPTIONS}\r\n            </Select>\r\n          </Col>\r\n          {/* <Col>\r\n            <D2PeriodPicker\r\n              selectedPeriod={selectedPeriod ? selectedPeriod : null}\r\n              openFuturePeriods={0}\r\n              periodType={periodType}\r\n              onPickPeriod={(value) => {\r\n                selectPeriod(parsePeriod(value));\r\n              }}\r\n            />\r\n          </Col> */}\r\n          <Col>\r\n            <Button\r\n              loading={isRunning}\r\n              disabled={!selectedPeriods || isRunning}\r\n              onClick={async () => {\r\n                setIsRunning(true);\r\n                setData(null);\r\n                const data = {};\r\n                for (let i = 0; i < selectedPeriods.length; i++) {\r\n                  const year = selectedPeriods[i];\r\n                  data[year] = await getData(year);\r\n                }\r\n                // const totalRows = _(data).toPairs().map(([year, yearlyData]) => yearlyData.listGrid.rows).map()\r\n                // data.total = Object.values(data).map(([year, yearlyData]) =>\r\n                //   _(data).toPairs()\r\n                //     .groupBy(function ([code]) {\r\n                //       return code;\r\n                //     })\r\n                //     .map(\r\n                //       (values, code) =>\r\n                //         console.log(\"values\", values) ||\r\n                //         _.zipWith(...values, function (...params) {\r\n                //           return _.sum(params);\r\n                //         })\r\n                //     )\r\n                //     .value()\r\n                // );\r\n                // console.log(\"data\", data);\r\n                // await new Promise((rs) => setTimeout(() => rs(), 1000));\r\n                setData(data);\r\n                setIsRunning(false);\r\n                setIsEnableExport(true);\r\n              }}\r\n              type=\"primary\"\r\n              icon={<CaretRightOutlined />}\r\n            >\r\n              {t(\"run\")}\r\n            </Button>\r\n          </Col>\r\n          <Col>\r\n            <Button\r\n              type=\"primary\"\r\n              disabled={!isEnableExport}\r\n              icon={<FileExcelOutlined />}\r\n              onClick={() => {\r\n                var wb = XLSX.utils.book_new();\r\n                Object.entries(data)\r\n                  .sort(([a], [b]) => b - a)\r\n                  .map(\r\n                    ([\r\n                      year,\r\n                      {\r\n                        listGrid: { rows, headers },\r\n                      },\r\n                    ]) => {\r\n                      const heads = headers.map(({ name }) => name);\r\n                      const ws = XLSX.utils.json_to_sheet(\r\n                        rows.map((row) =>\r\n                          row.reduce((result, cell, index) => {\r\n                            result[heads[index]] = cell;\r\n                            return result;\r\n                          }, {})\r\n                        ),\r\n                        {\r\n                          header: heads,\r\n                        }\r\n                      );\r\n                      return XLSX.utils.book_append_sheet(wb, ws, year);\r\n                    }\r\n                  );\r\n                writeFile(wb, \"ANACOD.xlsx\");\r\n              }}\r\n            >\r\n              {t(\"anacodExportExcel\")}\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n        <Content loading={isRunning} loaded={!!data} data={data} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    route: state.route,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Export);\r\n","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\redux\\actions\\user\\index.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\redux\\actions\\route\\index.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\redux\\reducers\\route.js",["464"],"import { CHANGE_ROUTE } from \"../actions/route/type\";\r\n\r\nconst initialState = null;\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case CHANGE_ROUTE: {\r\n      return action.payload.route;\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\redux\\actions\\metadata\\index.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\redux\\reducers\\data.js",["465"],"import {\r\n  MUTATE_TEI,\r\n  MUTATE_ATTRIBUTE,\r\n  MUTATE_ENROLLMENT,\r\n  MUTATE_EVENT,\r\n  MUTATE_DATAVALUE,\r\n  INIT_DATA,\r\n  INIT_NEW_DATA,\r\n  INIT_NEW_EVENT\r\n} from \"../actions/data/type\";\r\nimport {\r\n  mutateTei,\r\n  mutateAttribute,\r\n  mutateEnrollment,\r\n  mutateEvent,\r\n  mutateDataValue,\r\n  initData,\r\n  initNewData,\r\n  initNewEvent\r\n} from \"./data-methods\";\r\n\r\nconst initialState = {\r\n  currentTei: null,\r\n  currentEnrollment: null,\r\n  currentEvents: []\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case MUTATE_TEI: {\r\n      return mutateTei(state, action);\r\n    }\r\n    case MUTATE_ATTRIBUTE: {\r\n      return mutateAttribute(state, action);\r\n    }\r\n    case MUTATE_ENROLLMENT: {\r\n      return mutateEnrollment(state, action);\r\n    }\r\n    case MUTATE_EVENT: {\r\n      return mutateEvent(state, action);\r\n    }\r\n    case MUTATE_DATAVALUE: {\r\n      return mutateDataValue(state, action);\r\n    }\r\n    case INIT_NEW_DATA: {\r\n      return initNewData(state, action);\r\n    }\r\n    case INIT_DATA: {\r\n      return initData(state, action);\r\n    }\r\n    case INIT_NEW_EVENT: {\r\n      return initNewEvent(state, action);\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\redux\\actions\\admin\\index.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\redux\\reducers\\metadata.js",["466","467"],"import {\r\n  GET_PROGRAM_METADATA,\r\n  SET_TRACKER_DATA_ELEMENTS,\r\n  SET_PROGRAM_METADATA,\r\n  SET_SELECTED_ORGUNIT,\r\n  SET_TEAS,\r\n  SET_USERS,\r\n  SET_ORGUNIT_GROUPS,\r\n  SET_ORGUNIT_LEVELS,\r\n  SET_ORGUNITS,\r\n  GET_ICD11_OPTIONS,\r\n  GET_TRACKED_ENTITY_TYPES,\r\n  SET_USER_GROUPS,\r\n  SET_FORM_MAPPING,\r\n  SET_FORM_MAPPING_TEAS,\r\n  SET_CERTIFICATE_TEMPLATE,\r\n  SET_FEMALE_CODE,\r\n  SET_UI_LOCALE,\r\n  CHANGE_FULLNAMEOPTION,\r\n  GET_ICD_API_CLIENT_TOKEN\r\n} from \"../actions/metadata/type\";\r\n\r\nconst initialState = {\r\n  programMetadata: null,\r\n  selectedOrgUnit: null,\r\n  orgUnitGroups: null,\r\n  orgUnitLevels: null,\r\n  orgUnits: null,\r\n  icd11Options: null,\r\n  formMapping: null,\r\n  certificateTemplate: {\r\n    title: \"Death Certificate\",\r\n    logo: null,\r\n    info: [{\r\n      label: \"Date of Death\",\r\n      enrollment: \"incidentDate\"\r\n    },{\r\n      label: \"Reported Date\",\r\n      enrollment: \"enrollmentDate\"\r\n    }],\r\n    footer:[{\r\n      label: \"Institution Name\",\r\n      enrollment: \"orgUnitName\"\r\n    },{\r\n      label: \"Certificate Date\",\r\n      enrollment: \"enrollmentDate\"\r\n    }]\r\n  },\r\n  femaleCode: \"\",\r\n  fullnameOption: false,\r\n  keyUiLocale: \"en\",\r\n  icdApi_clientToken: \"\"\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case SET_PROGRAM_METADATA: {\r\n      return {\r\n        ...state,\r\n        programMetadata: action.payload.programMetadata\r\n      };\r\n    }\r\n    case SET_SELECTED_ORGUNIT: {\r\n      return {\r\n        ...state,\r\n        selectedOrgUnit: action.payload.selectedOrgUnit\r\n      };\r\n    }\r\n    case SET_ORGUNITS: {\r\n      return {\r\n        ...state,\r\n        orgUnits: action.payload.orgUnits\r\n      };\r\n    }\r\n    case SET_ORGUNIT_GROUPS: {\r\n      return {\r\n        ...state,\r\n        orgUnitGroups: action.payload.orgUnitGroups\r\n      };\r\n    }\r\n    case SET_ORGUNIT_LEVELS: {\r\n      return {\r\n        ...state,\r\n        orgUnitLevels: action.payload.orgUnitLevels\r\n      };\r\n    }\r\n    case SET_TEAS: {\r\n      return {\r\n        ...state,\r\n        trackedEntityAttributes: action.payload.trackedEntityAttributes\r\n      };\r\n    }\r\n    case SET_TRACKER_DATA_ELEMENTS: {\r\n      return {\r\n        ...state,\r\n        dataElements: action.payload.dataElements\r\n      };\r\n    }\r\n    case SET_USERS: {\r\n      return {\r\n        ...state,\r\n        users: action.payload.users\r\n      };\r\n    }\r\n    case GET_ICD11_OPTIONS: {\r\n      return {\r\n        ...state,\r\n        icd11Options: action.payload.options\r\n      }\r\n    }\r\n    case GET_TRACKED_ENTITY_TYPES: {\r\n      return {\r\n        ...state,\r\n        trackedEntityTypes: action.payload.trackedEntityTypes\r\n      }\r\n    }\r\n    case SET_USER_GROUPS: {\r\n      return {\r\n        ...state,\r\n        userGroups: action.payload.userGroups\r\n      }\r\n    }\r\n    case SET_FORM_MAPPING: {\r\n      return {\r\n        ...state,\r\n        formMapping: action.payload.formMapping\r\n      }\r\n    }\r\n    case SET_FORM_MAPPING_TEAS: {\r\n      return {\r\n        ...state,\r\n        formMapping: { \r\n          ...state.formMapping,\r\n          attributes: action.payload.teas\r\n        }\r\n      }\r\n    }\r\n    case SET_CERTIFICATE_TEMPLATE: {\r\n      return {\r\n        ...state,\r\n        certificateTemplate: action.payload.certificateTemplate\r\n      }\r\n    }\r\n    case SET_FEMALE_CODE: {\r\n      return {\r\n        ...state,\r\n        femaleCode: action.payload\r\n      }\r\n    }\r\n    case CHANGE_FULLNAMEOPTION: {\r\n      return {\r\n        ...state,\r\n        fullnameOption: action.payload\r\n      }\r\n    }\r\n    case SET_UI_LOCALE: {\r\n      return {\r\n        ...state,\r\n        keyUiLocale: action.payload\r\n      }\r\n    }\r\n    case GET_ICD_API_CLIENT_TOKEN: {\r\n      return {\r\n        ...state,\r\n        icdApi_clientToken: action.payload\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\redux\\reducers\\admin.js",["468"],"import {\r\n  CHANGE_STEP,\r\n  CHANGE_INSTALLATION_TYPE,\r\n  CHANGE_TEAS,\r\n  CHANGE_DATA_ELEMENTS,\r\n  CHANGE_ASSIGN_USERS,\r\n  ASSIGN_ORGUNITS,\r\n  CHANGE_ICD11_TOOL_URL,\r\n  CHANGE_CERTIFICATE_TEMPLATE,\r\n  SET_CERTIFICATE_LOGO,\r\n  CHANGE_TRACKED_ENTITY_TYPE,\r\n  SET_FEMALE_SECTION,\r\n  SET_INSTALLING_FILE,\r\n  CHANGE_FULLNAMEOPTION\r\n} from \"../actions/admin/type\";\r\n\r\nconst initialState = {\r\n  step: 0,\r\n  type: null,\r\n  trackedEntityAttributes: [],\r\n  trackedEntityType: null,\r\n  femaleOption: null,\r\n  fullnameOption: \"firstlastname\",\r\n  dataElements: {\r\n    frameA: { \r\n      otherSections: [], \r\n      defaultSections: require(`../../asset/metadata/programStageSections.json`).programStageSections.slice(0,6) \r\n    },\r\n    frameB: { \r\n      otherSections: [], \r\n      defaultSections: require(`../../asset/metadata/programStageSections.json`).programStageSections.slice(6,10) \r\n    }\r\n  },\r\n  users: {\r\n    admin: [],\r\n    capture: [],\r\n    view: []\r\n  },\r\n  assignedOrgUnits: [],\r\n  icd11ToolUrl: {\r\n    type: \"global\",\r\n    url: \"https://icd11restapi-developer-test.azurewebsites.net/icd/\"\r\n  },\r\n  certificateTemplate: null,\r\n  installingFile: null\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case CHANGE_STEP: {\r\n      return { ...state, step: action.payload.step };\r\n    }\r\n    case CHANGE_INSTALLATION_TYPE: {\r\n      return { ...state, type: action.payload.type };\r\n    }\r\n    case CHANGE_TEAS: {\r\n      return {\r\n        ...state,\r\n        trackedEntityAttributes: action.payload.trackedEntityAttributes\r\n      };\r\n    }\r\n    case CHANGE_DATA_ELEMENTS: {\r\n      return {\r\n        ...state,\r\n        dataElements: {\r\n          ...state.dataElements,\r\n          [action.payload.frame]: {\r\n            ...state.dataElements[action.payload.frame],\r\n            ...action.payload.section\r\n          }\r\n        }\r\n      };\r\n    }\r\n\r\n    case CHANGE_ASSIGN_USERS: {\r\n      return {\r\n        ...state,\r\n        users: {\r\n          ...state.users,\r\n          [action.payload.group]: action.payload.users\r\n        }\r\n      };\r\n    }\r\n\r\n    case ASSIGN_ORGUNITS: {\r\n      return { ...state, assignedOrgUnits: action.payload.orgUnits };\r\n    }\r\n    case CHANGE_ICD11_TOOL_URL: {\r\n      if (action.payload.type !== undefined) {\r\n        return {\r\n          ...state,\r\n          icd11ToolUrl: {\r\n            ...state.icd11ToolUrl,\r\n            url: action.payload.url,\r\n            type: action.payload.type\r\n          }\r\n        };\r\n      } else {\r\n        return {\r\n          ...state,\r\n          icd11ToolUrl: {\r\n            ...state.icd11ToolUrl,\r\n            url: action.payload.url\r\n          }\r\n        };\r\n      }\r\n    }\r\n\r\n    case CHANGE_CERTIFICATE_TEMPLATE: {\r\n      return {\r\n        ...state,\r\n        certificateTemplate: action.payload.certificateTemplate\r\n      }\r\n    }\r\n\r\n    case SET_CERTIFICATE_LOGO: {\r\n      return {\r\n        ...state,\r\n        certificateTemplate: {\r\n          ...state.certificateTemplate,\r\n          logo: action.payload.image.image\r\n        }\r\n      }\r\n    }\r\n\r\n    case CHANGE_TRACKED_ENTITY_TYPE: {\r\n      return {\r\n        ...state,\r\n        trackedEntityType: action.payload.trackedEntityType\r\n      }\r\n    }\r\n\r\n    case SET_FEMALE_SECTION: {\r\n      return {\r\n        ...state,\r\n        femaleOption: action.payload\r\n      }\r\n    }\r\n\r\n    case CHANGE_FULLNAMEOPTION: {\r\n      return {\r\n        ...state,\r\n        fullnameOption: action.payload\r\n      }\r\n    }\r\n\r\n    case SET_INSTALLING_FILE: {\r\n      return {\r\n        ...state,\r\n        installingFile: action.payload.installingFile\r\n      }\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\redux\\reducers\\user.js",["469"],"import {\r\n    SET_USER_ROLES\r\n} from \"../actions/user/type\";\r\n\r\nconst initialState = {\r\n    userRoles: {\r\n        admin: false,\r\n        data: false,\r\n        view: false\r\n    }\r\n};\r\n\r\nexport default function ( state = initialState, action ) {\r\n    switch ( action.type ) {\r\n        case SET_USER_ROLES: {\r\n            return {\r\n                ...state,\r\n                userRoles: action.payload\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\index.jsx",["470","471"],"import { useEffect, useState } from \"react\";\r\nimport GridLayout from \"react-grid-layout\";\r\nimport { WidthProvider } from \"react-grid-layout\";\r\nimport moment from \"moment\";\r\nimport WidgetContainer from \"./WidgetContainer/WidgetContainer\";\r\nimport { Select, Space } from \"antd\";\r\n\r\nimport generateChildChart from \"./utils/generateChildChart\";\r\nimport { AGE_RANGES, SEXES, randomNumber } from \"./pages/utils\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport \"./index.css\";\r\nimport run from \"./run\";\r\nconst Layout = WidthProvider(GridLayout);\r\nconst { Option } = Select;\r\n\r\nconst OPTIONS = [];\r\nfor (let i = moment().year(); i >= 1970; i--) {\r\n  OPTIONS.push(<Option key={i}>{i}</Option>);\r\n}\r\n\r\nconst ALL_CAUSES = [\r\n  {label: \"Tuberculosis\", value: \"0030\"},\r\n  {label: \"Sexually transmitted diseases excluding HIV\", value: \"0040;0050;0060;0070;0080\"},\r\n  {label: \"HIV\", value: \"0090\"},\r\n  {label: \"Diarrhoeal diseases\", value: \"0100\"},\r\n  {label: \"Pertussis\", value: \"0120\"},\r\n  {label: \"Poliomyelitis\", value: \"0130\"},\r\n  {label: \"Diphtheria\", value: \"0140\"},\r\n  {label: \"Measles\", value: \"0150\"},\r\n  {label: \"Tetanus\", value: \"0160\"},\r\n  {label: \"Meningitis\", value: \"0170\"},\r\n  {label: \"Hepatitis B\", value: \"0180\"},\r\n  {label: \"Hepatitis C\", value: \"0190\"},\r\n  {label: \"Malaria\", value: \"0200\"},\r\n  {label: \"Tropical-cluster diseases\", value: \"0210;0220;0230;0240;0250;0260;0270\"},\r\n  {label: \"Lower respiratory infections\", value: \"0390\"},\r\n  {label: \"Maternal conditions\", value: \"0420;0430;0440;0450;0460;0470;0480\"},\r\n  {label: \"Conditions arising during the perinatal period\", value: \"0490;0500;0510;0520\"},\r\n  {label: \"Nutritional deficiencies\", value: \"0530;0540;0550;0560;0570;0580\"},\r\n  {label: \"Mouth and oropharynx cancers\", value: \"0610\"},\r\n  {label: \"Oesophagus cancer\", value: \"0620\"},\r\n  {label: \"Stomach cancer\", value: \"0630\"},\r\n  {label: \"Colon and rectum cancers\", value: \"0640\"},\r\n  {label: \"Liver cancer\", value: \"0650\"},\r\n  {label: \"Pancreas cancer\", value: \"0660\"},\r\n  {label: \"Trachea, bronchus and lung cancers\", value: \"0670\"},\r\n  {label: \"Melanoma and other skin cancers\", value: \"0680\"},\r\n  {label: \"Breast cancer\", value: \"0690\"},\r\n  {label: \"Cervix uteri cancer\", value: \"0700\"},\r\n  {label: \"Corpus uteri cancer\", value: \"0710\"},\r\n  {label: \"Ovary cancer\", value: \"0720\"},\r\n  {label: \"Prostate cancer\", value: \"0730\"},\r\n  {label: \"Bladder cancer\", value: \"0740\"},\r\n  {label: \"Lymphomas and multiple myeloma\", value: \"0750\"},\r\n  {label: \"Leukaemia\", value: \"0760\"},\r\n  {label: \"Alzheimer and other dementias\", value: \"0870\"},\r\n  {label: \"Parkinson disease\", value: \"0880\"},\r\n  {label: \"Hypertensive  disease\", value: \"1060\"},\r\n  {label: \"Ischaemic heart disease\", value: \"1070\"},\r\n  {label: \"Cerebrovascular disease\", value: \"1080\"},\r\n  {label: \"Chronic obstructive pulmonary disease\", value: \"1120\"},\r\n  {label: \"Asthma\", value: \"1130\"},\r\n  {label: \"Digestive diseases\", value: \"1150\"},\r\n  {label: \"Genito-urinary diseases\", value: \"1200\"},\r\n  {label: \"Congenital anomalies\", value: \"1310\"},\r\n  {label: \"Road traffic accidents\", value: \"1500\"},\r\n  {label: \"Suicide\", value: \"1570\"},\r\n  {label: \"Homicide\", value: \"1580\"}\r\n];\r\n\r\nconst Dashboard = () => {\r\n  const { t } = useTranslation();\r\n  const [pages, setPages] = useState(run(t));\r\n  const [selectedPeriods, selectPeriod] = useState(\"2021\");\r\n  const [selectedPage, setSelectedPage] = useState(pages[0] ? pages[0].id : \"\");\r\n  const page = pages.find((page) => page.id === selectedPage);\r\n\r\n  const [causes, setCauses] = useState([\"0030\",\"0090\",\"0390\",\"0670\",\"0690\",\"1070\",\"1080\",\"1500\",\"1570\"]);\r\n\r\n  return page ? (\r\n    <div className=\"dashboard-container\">\r\n      <div className=\"page-selector\">\r\n        <Space>\r\n          <Select\r\n            allowClear\r\n            style={{ width: \"500px\" }}\r\n            placeholder=\"Please select year\"\r\n            value={selectedPeriods}\r\n            onChange={(value) => {\r\n              selectPeriod(value);\r\n            }}\r\n          >\r\n            {OPTIONS}\r\n          </Select>\r\n          <Select\r\n              value={selectedPage}\r\n              style={{ width: 300 }}\r\n              options={pages.map((p) => ({ value: p.id, label: p.label }))}\r\n              onChange={(value) => {\r\n                setSelectedPage(value);\r\n              }}\r\n              disabled={selectedPeriods.length === 0}\r\n            />\r\n        </Space>\r\n      </div>\r\n      { selectedPage === \"page2\" && <div className=\"page-selector-cod\">\r\n        <Select\r\n          mode=\"multiple\"\r\n          allowClear\r\n          style={{ width: \"99%\" }}\r\n          placeholder=\"Search\"\r\n          options={[...[{ label: \"All\", value: \"all\" }], ...ALL_CAUSES]}\r\n          value={causes}\r\n          onChange={(val) => {\r\n            if (val[val.length - 1] === \"all\") {\r\n              setCauses(ALL_CAUSES.map(({ value }) => value));\r\n            } else {\r\n              setCauses(val);\r\n            }\r\n          }}\r\n        />\r\n      </div> }\r\n      <div className=\"layout-container\">\r\n      { selectedPage === \"page2\" ? \r\n          <Layout \r\n            id=\"grid\" \r\n            className=\"layout\" \r\n            cols={98} \r\n            rowHeight={1}\r\n            layout={ Array(causes.length).fill().map( (o,index) => ({\r\n              i: `2.${index + 1}`,\r\n              x: index % 3 === 0 ? 0 : index % 3 === 1 ? 32 : 64,\r\n              y: Math.floor(index / 3) * 33,\r\n              w: 32,\r\n              h: 33\r\n            }) )} \r\n          >\r\n            {\r\n              causes.map( (code, index) => ({\r\n                i: `2.${index + 1}`,\r\n                children: [\r\n                  generateChildChart(\"line\", {\r\n                    title: `Number of Death by ${ALL_CAUSES.find( ({value}) => value === code ).label}`,\r\n                    dataLabels: SEXES,\r\n                    dataSets: AGE_RANGES.map((name) => ({\r\n                      name,\r\n                      data: Array(SEXES.length)\r\n                        .fill()\r\n                        .map(() => randomNumber(0, 30))\r\n                    })),\r\n                    colors: [\"#4C7FBC\", \"#ED7B2E\"],\r\n                    codes: code\r\n                  })\r\n                ]\r\n              }))\r\n              .map((widget) => {\r\n                return <WidgetContainer key={widget.i} widget={widget} period={selectedPeriods} />;\r\n              })\r\n            }\r\n          </Layout>\r\n          :\r\n          <Layout id=\"grid\" className=\"layout\" cols={98} layout={page.layout} rowHeight={1}>\r\n            {page.widgets.map((widget) => {\r\n              return <WidgetContainer key={widget.i} widget={widget} period={selectedPeriods} />;\r\n            })}\r\n          </Layout>\r\n      }\r\n        \r\n      </div>\r\n    </div>\r\n  ) : null;\r\n};\r\n\r\nexport default Dashboard;\r\n","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Form\\Profile.js",["472","473"],"import { useEffect, useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faUserEdit } from \"@fortawesome/free-solid-svg-icons\";\r\nimport InputField from \"../InputField\";\r\nimport { Button, Col, Row, message } from \"antd\";\r\nimport { Backdrop, CircularProgress } from '@mui/material';\r\nimport moment from \"moment\";\r\n/* REDUX */\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  mutateTei,\r\n  mutateAttribute,\r\n  mutateEnrollment,\r\n  mutateEvent,\r\n} from \"../../redux/actions/data\";\r\nimport { changeRoute } from \"../../redux/actions/route\";\r\n\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\n/*       */\r\nimport { Hooks } from \"tracker-capture-app-core\";\r\nimport { generateDhis2Payload } from \"../../utils\";\r\n\r\n// Leave page\r\nimport WarningDialog from \"./WarningDialog\";\r\n\r\nconst ButtonGroup = Button.Group;\r\nconst { useApi\r\n  // , useRuleEngine \r\n} = Hooks;\r\nconst Profile = ({\r\n  changeRoute,\r\n  mutateTei,\r\n  mutateAttribute,\r\n  mutateEnrollment,\r\n  mutateEvent,\r\n  metadata,\r\n  data,\r\n  openCertificateModal\r\n}) => {\r\n  const { t } = useTranslation();\r\n  const { dataApi, metadataApi } = useApi();\r\n  const { currentTei, currentEnrollment, currentEvents } = data;\r\n  const { programMetadata, formMapping, fullnameOption\r\n  } = metadata;\r\n  // const attributes = fullnameOption ? [\r\n  //   formMapping.attributes[\"system_id\"],\r\n  //   formMapping.attributes[\"given_name\"],\r\n  //   formMapping.attributes[\"sex\"],\r\n  //   formMapping.attributes[\"address\"]\r\n  // ] : \r\n  // [\r\n  //   formMapping.attributes[\"system_id\"],\r\n  //   formMapping.attributes[\"given_name\"],\r\n  //   formMapping.attributes[\"family_name\"],\r\n  //   formMapping.attributes[\"sex\"],\r\n  //   formMapping.attributes[\"address\"]\r\n  // ];\r\n\r\n  // const { run } = useRuleEngine(data, programMetadata);\r\n\r\n  // const result = run();\r\n\r\n  // console.log(result);\r\n\r\n  const [loading,setLoading]=useState(false);\r\n  const [exitWarning,setExitWarning]=useState(false);\r\n\r\n  useEffect(() => {\r\n    if ( getTeaValue(formMapping.attributes[\"system_id\"]) === \"\" ) {\r\n      metadataApi.get(`/api/trackedEntityAttributes/${formMapping.attributes[\"system_id\"]}/generate.json`)\r\n      .then(res => {\r\n        mutateAttribute(formMapping.attributes[\"system_id\"], res.value);\r\n      });\r\n    }\r\n  },[]);\r\n\r\n  useEffect(() => {\r\n    if ( currentEnrollment[\"enrollmentDate\"] && currentEnrollment[\"incidentDate\"] ) {\r\n      if ( currentEnrollment[\"enrollmentDate\"] < currentEnrollment[\"incidentDate\"] ) {\r\n        message.error(\"ERROR!!! Reported Date must be greater than incidentDate\")\r\n      }\r\n    }\r\n  }, [data])\r\n\r\n  const getTeaMetadata = (attribute) =>\r\n    programMetadata.trackedEntityAttributes.find(\r\n      (tea) => tea.id === attribute\r\n    );\r\n\r\n  const getTeaValue = (attribute) => currentTei.attributes[attribute] ? currentTei.attributes[attribute] : \"\";\r\n\r\n  const populateInputField = attribute => {\r\n    const tea = getTeaMetadata(attribute);\r\n    const value = getTeaValue(attribute);\r\n    \r\n    return (\r\n      <InputField\r\n        value={ value }\r\n        valueType={tea.valueType}\r\n        label={tea.displayFormName}\r\n        valueSet={tea.valueSet}\r\n        change={(value) => {\r\n          mutateAttribute(tea.id, value);\r\n        }}\r\n        disabled={attribute === formMapping.attributes[\"system_id\"]}\r\n      />\r\n    );\r\n  };\r\n\r\n  const hasUnderlying = () => {\r\n    const currentEvent = data.currentEvents.find((event) => {\r\n      return event.programStage === formMapping.programStage;\r\n    });\r\n    return (\r\n      currentEvent &&\r\n      currentEvent.dataValues &&\r\n      currentEvent.dataValues[formMapping.dataElements[\"underlyingCOD\"]]\r\n    );\r\n  };\r\n\r\n  const renderDOBGroup = () => {\r\n    const dob = getTeaMetadata(formMapping.attributes[\"dob\"]);\r\n    const age = getTeaMetadata(formMapping.attributes[\"age\"]);\r\n    const isEstimated = getTeaMetadata(formMapping.attributes[\"estimated_dob\"]);\r\n    return (\r\n      <>\r\n        <Row justify=\"start\" align=\"middle\">\r\n          <Col>\r\n            <InputField\r\n              value={getTeaValue(formMapping.attributes[\"estimated_dob\"])}\r\n              valueType={isEstimated.valueType}\r\n              // label={}\r\n              valueSet={isEstimated.valueSet}\r\n              change={(value) => {\r\n                mutateAttribute(isEstimated.id, value);\r\n              }}\r\n            />\r\n          </Col>\r\n          <Col>\r\n            <div className=\"input-label\">{isEstimated.displayFormName}</div>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <InputField\r\n              value={getTeaValue(formMapping.attributes[\"dob\"])}\r\n              // valueType={dob.valueType}\r\n              valueType={\"DATE_WITH_RANGE\"}\r\n              label={dob.displayFormName}\r\n              valueSet={dob.valueSet}\r\n              change={(value) => {\r\n                mutateAttribute(dob.id, value);\r\n                const age_cal = Math.round(moment(currentEnrollment.incidentDate, \"YYYY-MM-DD\").diff(\r\n                  moment(getTeaValue(formMapping.attributes[\"dob\"]), \"YYYY-MM-DD\"),\r\n                  \"years\",\r\n                  true\r\n                ));\r\n                if (age_cal > 150) \r\n                  message.error(\"Age can't be greater than 150\")\r\n                else if (age_cal < 0)\r\n                  message.error(\"Age can't be negative number\")\r\n                else \r\n                  mutateAttribute(age.id, age_cal);\r\n              }}\r\n              disabledDate={current => current && current >= moment().startOf('day')}\r\n            />\r\n          </Col>\r\n          <Col>\r\n            <InputField\r\n              value={getTeaValue(formMapping.attributes[\"age\"])}\r\n              valueType={age.valueType}\r\n              label={age.displayFormName}\r\n              valueSet={age.valueSet}\r\n              change={(value) => {\r\n                (value > 150) ?\r\n                  message.error(\"Age can't be greater than 150\")\r\n                  : (value < 0) ? \r\n                    message.error(\"Age can't be negative number\")\r\n                    : mutateAttribute(age.id, Math.round(value));\r\n              }}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"profile-section-container\">\r\n      <Backdrop\r\n        sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}\r\n        open={loading}\r\n      >\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <WarningDialog \r\n        open={exitWarning}\r\n        handleCancel={() => {\r\n          setExitWarning(false);\r\n        }}\r\n        handleOk={() => {\r\n          mutateTei(\"isDirty\", false);\r\n          mutateEnrollment(\"isDirty\", false);\r\n          mutateEvent(currentEvents[0].event, \"isDirty\", false);\r\n          changeRoute(\"list\");\r\n        }}\r\n      ></WarningDialog>\r\n      <div className=\"section-title section-title-profile\">\r\n        <FontAwesomeIcon icon={faUserEdit} style={{ fontSize: 15 }} />\r\n        &nbsp; {t(\"profile\")}\r\n      </div>\r\n      <div className=\"profile-section\">\r\n        <div className=\"profile-content\">\r\n          <InputField\r\n            value={currentEnrollment.enrollmentDate || \"\"}\r\n            label={t(\"reportedDate\")}\r\n            valueType={\"DATE_WITH_RANGE\"}\r\n            disabledDate={current => current && current >= moment().startOf('day')}\r\n            change={(value) => {\r\n              mutateEnrollment(\"enrollmentDate\", value);\r\n            }}\r\n          />\r\n          <InputField\r\n            value={currentEnrollment.incidentDate || \"\"}\r\n            label={t(\"incidentDate\")}\r\n            valueType={\"DATE_WITH_RANGE\"}\r\n            disabledDate={current => current && current >= moment().startOf('day')}\r\n            change={(value) => {\r\n              mutateEnrollment(\"incidentDate\", value);\r\n              currentEvents.forEach((event) => {\r\n                mutateEvent(event.event, \"eventDate\", value);\r\n                mutateEvent(event.event, \"dueDate\", value);\r\n              });\r\n            }}\r\n          />\r\n          {/* {attributes\r\n            .slice(0, 3)\r\n            .map((attribute) => populateInputField(attribute))} */}\r\n          {populateInputField(formMapping.attributes[\"system_id\"])}\r\n          {fullnameOption !== \"noname\" && populateInputField(formMapping.attributes[\"given_name\"])}\r\n          {fullnameOption === \"firstmidlastname\" && populateInputField(formMapping.attributes[\"middle_name\"])}\r\n          {(fullnameOption !== \"noname\" && fullnameOption !== \"fullname\") && populateInputField(formMapping.attributes[\"family_name\"])}\r\n          {renderDOBGroup()}\r\n          {/* {attributes.slice(3).map((attribute) => populateInputField(attribute))} */}\r\n          {populateInputField(formMapping.attributes[\"sex\"])}\r\n          {populateInputField(formMapping.attributes[\"address\"])}\r\n\r\n\r\n          {/* For other attributes */}\r\n          {programMetadata.trackedEntityAttributes.filter( \r\n            ({id}) => !Object.values(formMapping.attributes).find( tea => tea === id ) \r\n          ).map( tea => populateInputField(tea.id) )}\r\n        </div>\r\n        <div className=\"profile-button\">\r\n          <ButtonGroup\r\n            style={{\r\n              // float: \"right\",\r\n              padding: \"5px\",\r\n            }}\r\n          >\r\n            <Button\r\n              type=\"primary\"\r\n              onClick={async () => {\r\n                setLoading(true);\r\n                const { currentTei, currentEnrollment } = generateDhis2Payload(\r\n                  data,\r\n                  programMetadata\r\n                );\r\n                await dataApi.pushTrackedEntityInstance(\r\n                  currentTei,\r\n                  programMetadata.id\r\n                );\r\n                await dataApi.pushEnrollment(\r\n                  currentEnrollment,\r\n                  programMetadata.id\r\n                );\r\n                mutateTei(\"isSaved\", true);\r\n\r\n                // Dirty Check\r\n                mutateTei(\"isDirty\", false);\r\n                mutateEnrollment(\"isDirty\", false);\r\n\r\n\r\n                // Notification\r\n                setLoading(false);\r\n                message.success(\"Profile is saved successfully!\")\r\n              }}\r\n            >\r\n            {\r\n              t(\"save\")\r\n            }\r\n            </Button>\r\n            <Button\r\n              type=\"danger\"\r\n              onClick={() => {\r\n                console.log(currentTei,currentEnrollment,currentEvents);\r\n                if ( currentTei.isDirty || currentEnrollment.isDirty || currentEvents[0].isDirty ) {\r\n                  setExitWarning(true);\r\n                }\r\n                else {\r\n                  changeRoute(\"list\");\r\n                }\r\n              }}\r\n            >\r\n            {\r\n              t(\"cancel\")\r\n            }\r\n            </Button>\r\n            <Button disabled={!hasUnderlying()} onClick={openCertificateModal}>\r\n            {\r\n              t(\"printCertificate\")\r\n            }\r\n            </Button>\r\n          </ButtonGroup>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    metadata: state.metadata,\r\n    data: state.data,\r\n  };\r\n};\r\nconst mapDispatchToProps = {\r\n  changeRoute,\r\n  mutateTei,\r\n  mutateAttribute,\r\n  mutateEnrollment,\r\n  mutateEvent,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);\r\n","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Form\\DeathCertificate.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Form\\Stage.js",["474","475","476","477","478","479","480","481","482"],"\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { connect } from \"react-redux\";\r\n\r\n/* Styling tools */\r\nimport {\r\n  faNotesMedical,\r\n  // faQuestionCircle,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Button, Tabs, message } from \"antd\";\r\nimport { Backdrop, CircularProgress } from '@mui/material';\r\nimport moment from \"moment\";\r\nimport InputField from \"../InputField\";\r\nimport Icd11Tool from \"../Icd11Tool/EmbeddedIcd11Tool\";\r\nimport \"./stage.css\";\r\n\r\n/* REDUX */\r\n\r\nimport {\r\n  mutateEvent,\r\n  mutateDataValue,\r\n  initNewEvent,\r\n} from \"../../redux/actions/data\";\r\n\r\n/* Utils */\r\nimport { Hooks } from \"tracker-capture-app-core\";\r\nimport { generateCode, generateDhis2Payload } from \"../../utils\";\r\nconst ButtonGroup = Button.Group;\r\nconst { TabPane } = Tabs;\r\nconst { useApi } = Hooks;\r\n\r\n\r\nconst Stage = ({\r\n  metadata,\r\n  data,\r\n  mutateEvent,\r\n  mutateDataValue,\r\n  initNewEvent,\r\n}) => {\r\n  const { t } = useTranslation();\r\n  const { dataApi } = useApi();\r\n\r\n  const [icdTool, setIcdTool] = useState(false);\r\n  const [activeCauseOfDeath, setActiveCauseOfDeath] = useState(\"\");\r\n  const [causeOfDeaths, setCauseOfDeaths] = useState(null);\r\n  const [checkBoxUnderlying, setCheckBoxUnderlying] = useState(\"\");\r\n  const [flagUnderlying, setFlagUnderlying] = useState(false);\r\n  const [loading,setLoading]=useState(false);\r\n\r\n  const {\r\n    currentEnrollment,\r\n    currentTei: { attributes },\r\n    currentEnrollment: { enrollmentDate: currentTeiDateOfDeath }\r\n  } = data;\r\n  const { programMetadata, formMapping, icd11Options, femaleCode, icdApi_clientToken } = metadata;\r\n  const currentTeiSexAttributeValue = attributes[formMapping.attributes[\"sex\"]];\r\n  const currentTeiDateOfBirthAttributeValue = attributes[formMapping.attributes[\"dob\"]];\r\n  const currentTeiAgeAttributeValue = attributes[formMapping.attributes[\"age\"]];\r\n\r\n  const age = currentTeiAgeAttributeValue ? currentTeiAgeAttributeValue : Math.abs(\r\n    moment(currentTeiDateOfDeath, \"YYYY-MM-DD\").diff(\r\n      moment(currentTeiDateOfBirthAttributeValue, \"YYYY-MM-DD\"),\r\n      \"years\",\r\n      true\r\n    )\r\n  );\r\n  const programStage = programMetadata.programStages.find(\r\n    (ps) => ps.id === formMapping.programStage\r\n  );\r\n  const currentEvent = data.currentEvents.find((event) => {\r\n    return event.programStage === formMapping.programStage;\r\n  });\r\n  const returnInitValue = (de) => {\r\n    return currentEvent ? (currentEvent.dataValues[de] ? currentEvent.dataValues[de] : \"\") : \"\";\r\n  };\r\n  const isShowMaternalDeath = () => currentTeiSexAttributeValue === femaleCode && age >= 10;\r\n  const isShowFetalOrInfantDeath = () => age <= 1;\r\n\r\n  // TESTING\r\n  useEffect(() => {\r\n    console.log(\"Event changed\", data.currentEvents[0]);\r\n  },[data.currentEvents[0]])\r\n\r\n  useEffect(() => {\r\n    if (currentEvent && !isShowFetalOrInfantDeath()) {\r\n      [\r\n        formMapping.dataElements[\"multiple_pregnancies\"],\r\n        formMapping.dataElements[\"stillborn\"],\r\n        formMapping.dataElements[\"hours_newborn_survived\"],\r\n        formMapping.dataElements[\"birth_weight\"],\r\n        formMapping.dataElements[\"completedWeeks_pregnancy\"],\r\n        formMapping.dataElements[\"age_mother\"],\r\n        formMapping.dataElements[\"pregnancy_conditions\"],\r\n      ].map((deId) => mutateDataValue(currentEvent.event, deId, \"\"));\r\n      mutateEvent(currentEvent.event, \"isDirty\", false);\r\n    }\r\n  }, [age]);\r\n\r\n  useEffect(() => {\r\n    if (currentEvent && !isShowMaternalDeath()) {\r\n      [\r\n        formMapping.dataElements[\"pregnancy_inLastYear\"], \r\n        formMapping.dataElements[\"time_from_pregnancy\"], \r\n        formMapping.dataElements[\"pregnancy_contributed_to_death\"]\r\n      ].map((deId) =>\r\n        mutateDataValue(currentEvent.event, deId, \"\")\r\n      );\r\n      mutateEvent(currentEvent.event, \"isDirty\", false);\r\n    }\r\n  }, [currentTeiSexAttributeValue, age]);\r\n\r\n  useEffect(() => {\r\n    if (!currentEvent) {\r\n      const eventId = generateCode();\r\n      initNewEvent(eventId, programStage.id);\r\n      mutateEvent(eventId, \"eventDate\", currentEnrollment.incidentDate);\r\n      mutateEvent(eventId, \"dueDate\", currentEnrollment.incidentDate);\r\n\r\n      // Dirty Check\r\n      mutateEvent(eventId, \"isDirty\", false);\r\n    }\r\n    const cods = {\r\n      [formMapping.dataElements[\"codA\"]]: {\r\n        code: returnInitValue(formMapping.dataElements[\"codA\"]),\r\n        label: returnInitValue(formMapping.dataElements[\"codA_name\"]),\r\n        underlying: returnInitValue(formMapping.dataElements[\"codA_underlying\"]),\r\n        entityId: returnInitValue(formMapping.dataElements[\"codA_entityId\"])\r\n      },\r\n      [formMapping.dataElements[\"codB\"]]: {\r\n        code: returnInitValue(formMapping.dataElements[\"codB\"]),\r\n        label: returnInitValue(formMapping.dataElements[\"codB_name\"]),\r\n        underlying: returnInitValue(formMapping.dataElements[\"codB_underlying\"]),\r\n        entityId: returnInitValue(formMapping.dataElements[\"codB_entityId\"])\r\n      },\r\n      [formMapping.dataElements[\"codC\"]]: {\r\n        code: returnInitValue(formMapping.dataElements[\"codC\"]),\r\n        label: returnInitValue(formMapping.dataElements[\"codC_name\"]),\r\n        underlying: returnInitValue(formMapping.dataElements[\"codC_underlying\"]),\r\n        entityId: returnInitValue(formMapping.dataElements[\"codC_entityId\"])\r\n      },\r\n      [formMapping.dataElements[\"codD\"]]: {\r\n        code: returnInitValue(formMapping.dataElements[\"codD\"]),\r\n        label: returnInitValue(formMapping.dataElements[\"codD_name\"]),\r\n        underlying: returnInitValue(formMapping.dataElements[\"codD_underlying\"]),\r\n        entityId: returnInitValue(formMapping.dataElements[\"codD_entityId\"])\r\n      },\r\n    };\r\n    setCauseOfDeaths(cods);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    causeOfDeaths && setCheckBoxUnderlying(\r\n      causeOfDeaths[formMapping.dataElements[\"codA\"]].underlying\r\n        ? formMapping.dataElements[\"codA_underlying\"]\r\n        : causeOfDeaths[formMapping.dataElements[\"codB\"]].underlying\r\n        ? formMapping.dataElements[\"codB_underlying\"]\r\n        : causeOfDeaths[formMapping.dataElements[\"codC\"]].underlying\r\n        ? formMapping.dataElements[\"codC_underlying\"]\r\n        : causeOfDeaths[formMapping.dataElements[\"codD\"]].underlying\r\n        ? formMapping.dataElements[\"codD_underlying\"]\r\n        : \"\"\r\n    );\r\n  }, [causeOfDeaths])\r\n\r\n  useEffect(() => {\r\n    setFlagUnderlying(!flagUnderlying);\r\n  }, [checkBoxUnderlying])\r\n\r\n  useEffect(() => {\r\n    if ( causeOfDeaths ) {\r\n      fillUpUnderlying(causeOfDeaths);\r\n    }\r\n  }, [flagUnderlying]);\r\n\r\n  const setValueIcdField = (cod) => {\r\n    if (activeCauseOfDeath !== \"\") {\r\n      mutateDataValue(currentEvent.event, activeCauseOfDeath.code, cod[activeCauseOfDeath.code].code);\r\n      mutateDataValue(currentEvent.event, activeCauseOfDeath.label, cod[activeCauseOfDeath.code].label);\r\n      mutateDataValue(currentEvent.event, activeCauseOfDeath.underlying, cod[activeCauseOfDeath.code].underlying);\r\n      mutateDataValue(currentEvent.event, activeCauseOfDeath.entityId, cod[activeCauseOfDeath.code].entityId);\r\n\r\n      // RESET activeCauseOfDeath \r\n      setActiveCauseOfDeath(\"\");\r\n    }\r\n  }\r\n\r\n  const fillUpUnderlying = (cod) => {\r\n    let result = null;\r\n    for (const [key, value] of Object.entries(cod)) {\r\n      if (value.underlying) {\r\n        result = value;\r\n      }\r\n    }\r\n\r\n    const currentUnderlyingCoD = currentEvent && currentEvent.dataValues[formMapping.dataElements[\"underlyingCOD_code\"]] ? currentEvent.dataValues[formMapping.dataElements[\"underlyingCOD_code\"]] : \"\";\r\n    // Save values of underlying\r\n    if (currentEvent) {\r\n      if (result) {\r\n        if ( result.code !== currentUnderlyingCoD ) {\r\n          mutateDataValue(currentEvent.event, formMapping.dataElements[\"underlyingCOD\"], result.label);\r\n          mutateDataValue(currentEvent.event, formMapping.dataElements[\"underlyingCOD_code\"], result.code);\r\n          mutateDataValue(currentEvent.event, formMapping.dataElements[\"underlyingCOD_chapter\"], icd11Options.find( option => option.code === result.code).attributeValues.find( attrVal => attrVal.attribute.id === formMapping.optionAttributes[\"chapter\"] ).value);\r\n          mutateDataValue(currentEvent.event, formMapping.dataElements[\"underlyingCOD_group\"], icd11Options.find( option => option.code === result.code).attributeValues.find( attrVal => attrVal.attribute.id === formMapping.optionAttributes[\"group\"] ).value);\r\n        }\r\n      } else {\r\n        if (currentEvent.isDirty) {\r\n          mutateDataValue(currentEvent.event, formMapping.dataElements[\"underlyingCOD\"], \"\");\r\n          mutateDataValue(currentEvent.event, formMapping.dataElements[\"underlyingCOD_code\"], \"\");\r\n          mutateDataValue(currentEvent.event, formMapping.dataElements[\"underlyingCOD_chapter\"], \"\");\r\n          mutateDataValue(currentEvent.event, formMapping.dataElements[\"underlyingCOD_group\"], \"\");\r\n          mutateDataValue(currentEvent.event, formMapping.dataElements[\"underlyingCOD_report\"], \"\");\r\n        }\r\n        else {\r\n          mutateDataValue(currentEvent.event, formMapping.dataElements[\"underlyingCOD\"], \"\");\r\n          mutateDataValue(currentEvent.event, formMapping.dataElements[\"underlyingCOD_code\"], \"\");\r\n          mutateDataValue(currentEvent.event, formMapping.dataElements[\"underlyingCOD_chapter\"], \"\");\r\n          mutateDataValue(currentEvent.event, formMapping.dataElements[\"underlyingCOD_group\"], \"\");\r\n          mutateDataValue(currentEvent.event, formMapping.dataElements[\"underlyingCOD_report\"], \"\");\r\n          mutateEvent(currentEvent.event, \"isDirty\", false);\r\n        }\r\n        \r\n      }\r\n    }\r\n  };\r\n\r\n  // Render Inputs ( text, checkbox - note: not for code and label fields)\r\n  const renderInputField = (de, extraFunction, placeholder) => {\r\n    const foundDe = programStage.dataElements.find((dataElement) => dataElement.id === de);\r\n    if(!foundDe){\r\n      return null;\r\n    }\r\n    let disable = false;\r\n    if (de === formMapping.dataElements[\"underlyingCOD\"] || \r\n        de === formMapping.dataElements[\"underlyingCOD_chapter\"] || \r\n        de === formMapping.dataElements[\"underlyingCOD_group\"] || \r\n        de === formMapping.dataElements[\"underlyingCOD_code\"]) \r\n    {\r\n      disable = true;\r\n    }\r\n    if (\r\n      de === formMapping.dataElements[\"codA_underlying\"] ||\r\n      de === formMapping.dataElements[\"codB_underlying\"] ||\r\n      de === formMapping.dataElements[\"codC_underlying\"] ||\r\n      de === formMapping.dataElements[\"codD_underlying\"]\r\n    ) {\r\n      if (checkBoxUnderlying !== \"\" && checkBoxUnderlying !== de) {\r\n        disable = true;\r\n      }\r\n    }\r\n    return (\r\n      <InputField\r\n        value={currentEvent && currentEvent.dataValues[de] ? currentEvent.dataValues[de] : \"\"}\r\n        change={(value) => {\r\n          // check if input is underlying checkbox\r\n          if (extraFunction) {\r\n            let currentCauseOfDeath = causeOfDeaths;\r\n            let id = null;\r\n            switch (de) {\r\n              case formMapping.dataElements[\"codA_underlying\"]:\r\n                id = formMapping.dataElements[\"codA\"];\r\n                break;\r\n              case formMapping.dataElements[\"codB_underlying\"]:\r\n                id = formMapping.dataElements[\"codB\"];\r\n                break;\r\n              case formMapping.dataElements[\"codC_underlying\"]:\r\n                id = formMapping.dataElements[\"codC\"];\r\n                break;\r\n              case formMapping.dataElements[\"codD_underlying\"]:\r\n                id = formMapping.dataElements[\"codD\"];\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n            // if (value) {\r\n            //   setCheckBoxUnderlying(de);\r\n            // } else {\r\n            //   setCheckBoxUnderlying(\"\");\r\n            // }\r\n            // set underlying\r\n            if (id) {\r\n              for (const [key, val] of Object.entries(currentCauseOfDeath)) {\r\n                if (key === id) {\r\n                  val.underlying = value;\r\n                } else {\r\n                  val.underlying = false;\r\n                }\r\n              }\r\n              // setFlagUnderlying(!flagUnderlying);\r\n              setCauseOfDeaths({\r\n                ...causeOfDeaths,\r\n                ...currentCauseOfDeath\r\n              });\r\n            }\r\n          }\r\n          mutateDataValue(currentEvent.event, de, value);\r\n        }}\r\n        valueType={foundDe.valueType}\r\n        // label={foundDe.displayFormName}\r\n        valueSet={foundDe.valueSet}\r\n        disabled={disable}\r\n        placeholder={placeholder}\r\n      />\r\n    );\r\n  };\r\n\r\n  const renderCauseOfDeathsInputField = (codCode, codName, codEntityId, codUnderlying) => {\r\n    return (\r\n      <InputField\r\n        addonBefore={\r\n          currentEvent ? currentEvent.dataValues[codCode] ? <b>{currentEvent.dataValues[codCode]}</b> : \"\" : \"\"\r\n        }\r\n        value={currentEvent ? (currentEvent.dataValues[codName] ? currentEvent.dataValues[codName] : \"\") : \"\"}\r\n        valueType=\"TEXT\"\r\n        click={() => {\r\n          setActiveCauseOfDeath({\r\n            // ...activeCauseOfDeath,\r\n            label: codName,\r\n            code: codCode,\r\n            entityId: codEntityId,\r\n            underlying: codUnderlying\r\n          });\r\n          setIcdTool(true);\r\n        }}\r\n        placeholder={\"Click here for ICD 11 code\"}\r\n        allowClear={true}\r\n        change={ value => {\r\n          if ( value === \"\" ) {\r\n            mutateDataValue(currentEvent.event, codCode, \"\");\r\n            mutateDataValue(currentEvent.event, codName, \"\");\r\n            mutateDataValue(currentEvent.event, codUnderlying, false);\r\n            causeOfDeaths[codCode].code = \"\";\r\n            causeOfDeaths[codCode].label = \"\";\r\n            causeOfDeaths[codCode].underlying = false;\r\n            setCauseOfDeaths({ ...causeOfDeaths });\r\n          }\r\n        } }\r\n      />\r\n    );\r\n  };\r\n\r\n  const renderOtherSection = section => {\r\n    return (\r\n      <div className=\"stage-section\">\r\n        <div className=\"stage-section-title\">{section.name}</div>\r\n        <div className=\"stage-section-content\">\r\n          <table className=\"other-section-table\">\r\n            <tbody>\r\n            {\r\n              section.dataElements.map( ({id}) => <tr>\r\n                <td>{programMetadata.programStages[0].dataElements.find( de => de.id === id ).displayFormName}</td>\r\n                <td>\r\n                  {renderInputField(id)}\r\n                </td>\r\n              </tr>)\r\n            }\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const detectUnderlyingCauseOfDeath = async () => {\r\n    let headers = new Headers();\r\n    headers.append(\"accept\", \"application/json\");\r\n    headers.append(\"API-Version\", \"v2\");\r\n    headers.append(\"Accept-Language\", \"en\");\r\n    headers.append(\"Authorization\", `Bearer ${icdApi_clientToken}`);\r\n    const icdApiUrl = `https://id.who.int/icd/release/11/2023-01/doris?causeOfDeathCodeA=${causeOfDeaths[formMapping.dataElements[\"codA\"]].code}&causeOfDeathCodeB=${causeOfDeaths[formMapping.dataElements[\"codB\"]].code}&causeOfDeathCodeC=${causeOfDeaths[formMapping.dataElements[\"codC\"]].code}&causeOfDeathCodeD=${causeOfDeaths[formMapping.dataElements[\"codD\"]].code}`;\r\n    const result = await fetch(icdApiUrl, {\r\n      headers: headers\r\n    })\r\n    .then((result) => {\r\n      return result.json();\r\n    })\r\n    .catch((err) => {\r\n      return err;\r\n    });\r\n    const underlyingCode = result.stemCode;\r\n    if ( underlyingCode !== \"\" ) {\r\n      const cods = {\r\n        [formMapping.dataElements[\"codA\"]]: {\r\n          ...causeOfDeaths[formMapping.dataElements[\"codA\"]],\r\n          underlying: underlyingCode === causeOfDeaths[formMapping.dataElements[\"codA\"]].code,\r\n        },\r\n        [formMapping.dataElements[\"codB\"]]: {\r\n          ...causeOfDeaths[formMapping.dataElements[\"codB\"]],\r\n          underlying: underlyingCode === causeOfDeaths[formMapping.dataElements[\"codB\"]].code,\r\n        },\r\n        [formMapping.dataElements[\"codC\"]]: {\r\n          ...causeOfDeaths[formMapping.dataElements[\"codC\"]],\r\n          underlying: underlyingCode === causeOfDeaths[formMapping.dataElements[\"codC\"]].code,\r\n        },\r\n        [formMapping.dataElements[\"codD\"]]: {\r\n          ...causeOfDeaths[formMapping.dataElements[\"codD\"]],\r\n          underlying: underlyingCode === causeOfDeaths[formMapping.dataElements[\"codD\"]].code,\r\n        }\r\n      };\r\n\r\n      mutateDataValue(currentEvent.event, formMapping.dataElements[\"codA_underlying\"], cods[formMapping.dataElements[\"codA\"]].underlying);\r\n      mutateDataValue(currentEvent.event, formMapping.dataElements[\"codB_underlying\"], cods[formMapping.dataElements[\"codB\"]].underlying);\r\n      mutateDataValue(currentEvent.event, formMapping.dataElements[\"codC_underlying\"], cods[formMapping.dataElements[\"codC\"]].underlying);\r\n      mutateDataValue(currentEvent.event, formMapping.dataElements[\"codD_underlying\"], cods[formMapping.dataElements[\"codD\"]].underlying);\r\n      mutateDataValue(currentEvent.event, formMapping.dataElements[\"underlyingCOD_report\"], result.report);\r\n\r\n      setCauseOfDeaths(cods);\r\n    };\r\n  }\r\n\r\n  const getUcodResult = () => currentEvent && currentEvent.dataValues[formMapping.dataElements[\"underlyingCOD_report\"]] ? currentEvent.dataValues[formMapping.dataElements[\"underlyingCOD_report\"]] : \"* Note: WHO Digital Open Rule Integrated cause of death Selection (DORIS)\";\r\n\r\n  return (\r\n    <div className=\"stage-section-container\">\r\n      <Backdrop\r\n        sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}\r\n        open={loading}\r\n      >\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Icd11Tool\r\n        visible={icdTool}\r\n        setVisible={setIcdTool}\r\n        onSelect={(cod) => {\r\n          const selectedCod = {\r\n            code: cod.code,\r\n            label: cod.title\r\n              .replace(/<em class='found'>/g, \"\")\r\n              .replace(/<em class='nonwbe'>/g, \"\")\r\n              .replace(/<[/]em>/g, \"\"),\r\n            uri: cod.foundationUri\r\n          };\r\n          causeOfDeaths[activeCauseOfDeath.code].code = selectedCod.code;\r\n          causeOfDeaths[activeCauseOfDeath.code].label = selectedCod.label;\r\n          causeOfDeaths[activeCauseOfDeath.code].underlying = false;\r\n          causeOfDeaths[activeCauseOfDeath.code].entityId = selectedCod.uri.split(\"/\")[selectedCod.uri.split(\"/\").length - 1];\r\n          setValueIcdField(causeOfDeaths);\r\n          setCauseOfDeaths({ ...causeOfDeaths });\r\n        }}\r\n        defaultValue={{\r\n          title: (currentEvent && currentEvent.dataValues[activeCauseOfDeath.label]) || \"\",\r\n          code: (currentEvent && currentEvent.dataValues[activeCauseOfDeath.code]) || \"\"\r\n        }}\r\n      />\r\n      <div className=\"section-title section-title-stage\">\r\n        <FontAwesomeIcon icon={faNotesMedical} style={{ fontSize: 15 }} />\r\n        &nbsp; {t(\"causeOfDeath\")}\r\n      </div>\r\n      <div className=\"stage-sections-container\">\r\n        <Tabs defaultActiveKey=\"1\" type=\"card\">\r\n          <TabPane tab=\"Frame A\" key=\"a\">\r\n            <div className=\"tab-container\">\r\n              <div className=\"stage-section\">\r\n                <div className=\"stage-section-title\">{t(\"medicalData\")}</div>\r\n                <div className=\"stage-section-content\">\r\n                  <table className=\"medical-data-table\">\r\n                    <tbody>\r\n                      <tr>\r\n                        <td\r\n                          colSpan=\"5\"\r\n                          style={{\r\n                            fontWeight: \"bold\",\r\n                            textAlign: \"left\",\r\n                            backgroundColor: \"#f5f5f5\"\r\n                          }}\r\n                        >\r\n                        {\r\n                          t(\"reasonLeadingToDeath\")\r\n                        }\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td colSpan=\"3\" style={{ width: \"70%\" }}>\r\n                        {t(\"causeOfDeath\")}\r\n                        </td>\r\n                        <td>{t(\"timeFromOnsetToDeath\")}</td>\r\n                        <td>{t(\"underlying\")}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>{t(\"immediate\")}</td>\r\n                        <td>A</td>\r\n                        <td>\r\n                          <div className=\"two-fields-container\">\r\n                            {renderInputField(formMapping.dataElements[\"codA_other_name\"],undefined,\"Enter Diagnosis (Free text)\")}\r\n                            {/* {renderInputField(formMapping.dataElements[\"codA_other_name\"])} */}\r\n                            {renderCauseOfDeathsInputField(\r\n                              formMapping.dataElements[\"codA\"],\r\n                              formMapping.dataElements[\"codA_name\"],\r\n                              formMapping.dataElements[\"codA_entityId\"],\r\n                              formMapping.dataElements[\"codA_underlying\"]\r\n                            )}\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                          <div className=\"two-fields-container\">\r\n                            {renderInputField(formMapping.dataElements[\"codA_time\"])}\r\n                            {renderInputField(formMapping.dataElements[\"codA_periodType\"])}\r\n                          </div>\r\n                        </td>\r\n                        <td>{renderInputField(formMapping.dataElements[\"codA_underlying\"], \"underlying\")}</td>\r\n                      </tr>\r\n                      {/* <tr>\r\n                        <td\r\n                          colSpan=\"5\"\r\n                          style={{\r\n                            fontWeight: \"bold\",\r\n                            textAlign: \"left\",\r\n                            backgroundColor: \"#f5f5f5\"\r\n                          }}\r\n                        >\r\n                        {\r\n                          t(\"reportDirection\")\r\n                        }\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td colSpan=\"3\">{t(\"causeOfDeath\")}</td>\r\n                        <td>{t(\"timeFromOnsetToDeath\")}</td>\r\n                        <td>{t(\"underlying\")}</td>\r\n                      </tr> */}\r\n                      <tr>\r\n                        <td>{t(\"dueTo\")}</td>\r\n                        <td>B</td>\r\n                        <td>\r\n                          <div className=\"two-fields-container\">\r\n                            {renderInputField(formMapping.dataElements[\"codB_other_name\"],undefined,\"Enter Diagnosis (Free text)\")}\r\n                            {/* {renderInputField(formMapping.dataElements[\"codB_other_name\"])} */}\r\n                            {renderCauseOfDeathsInputField(\r\n                              formMapping.dataElements[\"codB\"],\r\n                              formMapping.dataElements[\"codB_name\"],\r\n                              formMapping.dataElements[\"codB_entityId\"],\r\n                              formMapping.dataElements[\"codB_underlying\"]\r\n                            )}\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                          <div className=\"two-fields-container\">\r\n                            {renderInputField(formMapping.dataElements[\"codB_time\"])}\r\n                            {renderInputField(formMapping.dataElements[\"codB_periodType\"])}\r\n                          </div>\r\n                        </td>\r\n                        <td>{renderInputField(formMapping.dataElements[\"codB_underlying\"], \"underlying\")}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>{t(\"dueTo\")}</td>\r\n                        <td>C</td>\r\n                        <td>\r\n                          <div className=\"two-fields-container\">\r\n                            {renderInputField(formMapping.dataElements[\"codC_other_name\"],undefined,\"Enter Diagnosis (Free text)\")}\r\n                            {/* {renderInputField(formMapping.dataElements[\"codC_other_name\"])} */}\r\n                            {renderCauseOfDeathsInputField(\r\n                              formMapping.dataElements[\"codC\"],\r\n                              formMapping.dataElements[\"codC_name\"],\r\n                              formMapping.dataElements[\"codC_entityId\"],\r\n                              formMapping.dataElements[\"codC_underlying\"]\r\n                            )}\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                          <div className=\"two-fields-container\">\r\n                            {renderInputField(formMapping.dataElements[\"codC_time\"])}\r\n                            {renderInputField(formMapping.dataElements[\"codC_periodType\"])}\r\n                          </div>\r\n                        </td>\r\n                        <td>{renderInputField(formMapping.dataElements[\"codC_underlying\"], \"underlying\")}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>{t(\"dueTo\")}</td>\r\n                        <td>D</td>\r\n                        <td>\r\n                          <div className=\"two-fields-container\">\r\n                            {renderInputField(formMapping.dataElements[\"codD_other_name\"],undefined,\"Enter Diagnosis (Free text)\")}\r\n                            {/* {renderInputField(formMapping.dataElements[\"codD_other_name\"])} */}\r\n                            {renderCauseOfDeathsInputField(\r\n                              formMapping.dataElements[\"codD\"],\r\n                              formMapping.dataElements[\"codD_name\"],\r\n                              formMapping.dataElements[\"codD_entityId\"],\r\n                              formMapping.dataElements[\"codD_underlying\"]\r\n                            )}\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                          <div className=\"two-fields-container\">\r\n                            {renderInputField(formMapping.dataElements[\"codD_time\"])}\r\n                            {renderInputField(formMapping.dataElements[\"codD_periodType\"])}\r\n                          </div>\r\n                        </td>\r\n                        <td>{renderInputField(formMapping.dataElements[\"codD_underlying\"], \"underlying\")}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td\r\n                          colSpan=\"5\"\r\n                          style={{\r\n                            fontWeight: \"bold\",\r\n                            textAlign: \"left\",\r\n                            backgroundColor: \"#f5f5f5\"\r\n                          }}\r\n                        >\r\n                        {\r\n                          t(\"otherReasonLeadingToDeath\")\r\n                        }\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td colSpan=\"5\">{renderInputField(formMapping.dataElements[\"codOther\"])}</td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n              <div className=\"stage-section\">\r\n                <div className=\"stage-section-title\">{t(\"results\")}</div>\r\n                <div className=\"stage-section-content\">\r\n                  <table className=\"results-table\">\r\n                    <tbody>\r\n                      <tr>\r\n                        <td>{t(\"icd11\")}</td>\r\n                        <td className=\"unselectable-field\">\r\n                          {renderInputField(formMapping.dataElements[\"underlyingCOD_code\"])}\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>{t(\"underlyingCOD\")}</td>\r\n                        <td className=\"unselectable-field\">\r\n                          {renderInputField(formMapping.dataElements[\"underlyingCOD\"])}\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>{t(\"icd11Chapter\")}</td>\r\n                        <td className=\"unselectable-field\">\r\n                          {renderInputField(formMapping.dataElements[\"underlyingCOD_chapter\"])}\r\n                        </td>\r\n                      </tr>\r\n                      <tr hidden=\"hidden\">\r\n                        <td>{t(\"icd11Grouping\")}</td>\r\n                        <td className=\"unselectable-field\">\r\n                          {renderInputField(formMapping.dataElements[\"underlyingCOD_group\"])}\r\n                        </td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                  <div className=\"results-compute\">\r\n                    <Button onClick={() => detectUnderlyingCauseOfDeath()}>\r\n                      Compute\r\n                    </Button> \r\n                    <div><pre>{getUcodResult()}</pre></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              {formMapping.otherSections.frameA && formMapping.otherSections.frameA.map( section => renderOtherSection(section) )}\r\n            </div>\r\n          </TabPane>\r\n          <TabPane tab=\"Frame B\" key=\"b\">\r\n            <div className=\"tab-container\">\r\n              {formMapping.sections.find(({name}) => name === \"Surgery\") && (<div className=\"stage-section\">\r\n                <div className=\"stage-section-title\">{t(\"surgery\")}</div>\r\n                <div className=\"stage-section-content\">\r\n                  <table className=\"surgery-table\">\r\n                    <tbody>\r\n                      <tr>\r\n                        <td>{t(\"surgeryWithin4months\")}</td>\r\n                        <td>{renderInputField(formMapping.dataElements[\"surgery\"])}</td>\r\n                        <td>{t(\"surgeryDate\")}</td>\r\n                        <td>{renderInputField(formMapping.dataElements[\"surgery_date\"])}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td colSpan=\"1\">\r\n                        {\r\n                          t(\"surgeryReason\")\r\n                        }\r\n                        </td>\r\n                        <td colSpan=\"3\">{renderInputField(formMapping.dataElements[\"surgery_reason\"])}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>{t(\"autopsy\")}</td>\r\n                        <td>{renderInputField(formMapping.dataElements[\"autopsy\"])}</td>\r\n                        <td>\r\n                        {\r\n                          t(\"findings\")\r\n                        }\r\n                        </td>\r\n                        <td>{renderInputField(formMapping.dataElements[\"autopsy_specified\"])}</td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>)}\r\n              {formMapping.sections.find(({name}) => name === \"Manner of death\") && (<div className=\"stage-section\">\r\n                <div className=\"stage-section-title\">{t(\"mannerOfDeath\")}</div>\r\n                <div className=\"stage-section-content\">\r\n                  <table className=\"manner-death-table\">\r\n                    <tbody>\r\n                      <tr>\r\n                        <td>{t(\"mannerOfDeath\")}</td>\r\n                        <td>{renderInputField(formMapping.dataElements[\"mannerOfDeath\"])}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>{t(\"posisoning\")}</td>\r\n                        <td>{renderInputField(formMapping.dataElements[\"dateOfInjury\"])}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>{t(\"describe\")}</td>\r\n                        <td>{renderInputField(formMapping.dataElements[\"externalCause\"])}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>{t(\"occurrencePlace\")}</td>\r\n                        <td>{renderInputField(formMapping.dataElements[\"externalCause_place\"])}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>{t(\"occurrenceSpecifyPlace\")}</td>\r\n                        <td>{renderInputField(formMapping.dataElements[\"externalCause_specifiedPlace\"])}</td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>)}\r\n              {(formMapping.sections.find(({name}) => name === \"Fetal or infant death\") && isShowFetalOrInfantDeath()) && (<div className=\"stage-section\">\r\n                <div className=\"stage-section-title\">{t(\"fetalOrInfantDeath\")}</div>\r\n                <div className=\"stage-section-content\">\r\n                  <table className=\"infant-death-table\">\r\n                    <tbody>\r\n                      <tr>\r\n                        <td>{t(\"pregnant\")}</td>\r\n                        <td>{renderInputField(formMapping.dataElements[\"multiple_pregnancies\"])}</td>\r\n                        <td>{t(\"stillborn\")}</td>\r\n                        <td>{renderInputField(formMapping.dataElements[\"stillborn\"])}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>{t(\"hoursSurvived\")}</td>\r\n                        <td>{renderInputField(formMapping.dataElements[\"hours_newborn_survived\"])}</td>\r\n                        <td>{t(\"birthWeight\")}</td>\r\n                        <td>{renderInputField(formMapping.dataElements[\"birth_weight\"])}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>{t(\"pregnantWeeks\")}</td>\r\n                        <td>{renderInputField(formMapping.dataElements[\"completedWeeks_pregnancy\"])}</td>\r\n                        <td>{t(\"motherAge\")}</td>\r\n                        <td>{renderInputField(formMapping.dataElements[\"age_mother\"])}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td colSpan=\"1\">{t(\"perinatal\")}</td>\r\n                        <td colSpan=\"3\">{renderInputField(formMapping.dataElements[\"pregnancy_conditions\"])}</td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>)}\r\n              {(formMapping.sections.find(({name}) => name === \"Maternal death\") && isShowMaternalDeath()) && (<div className=\"stage-section\">\r\n                <div className=\"stage-section-title\">{t(\"maternal\")}</div>\r\n                <div className=\"stage-section-content\">\r\n                  <table className=\"maternal-death-table\">\r\n                    <tbody>\r\n                      <tr>\r\n                        <td>{t(\"pregnancyLastYear\")}</td>\r\n                        <td>{renderInputField(formMapping.dataElements[\"pregnancy_inLastYear\"])}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>{t(\"timePregnancy\")}</td>\r\n                        <td>{renderInputField(formMapping.dataElements[\"time_from_pregnancy\"])}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>{t(\"pregnancyToDeath\")}</td>\r\n                        <td>{renderInputField(formMapping.dataElements[\"pregnancy_contributed_to_death\"])}</td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>)}\r\n              {formMapping.otherSections.frameB && formMapping.otherSections.frameB.map( section => renderOtherSection(section) )}\r\n            </div>\r\n          </TabPane>\r\n        </Tabs>\r\n        <div className=\"stage-save-button-container\">\r\n          <ButtonGroup>\r\n            <Button\r\n              type=\"primary\"\r\n              onClick={async () => {\r\n                setLoading(true);\r\n                const { currentEvents } = generateDhis2Payload(data, programMetadata);\r\n                await dataApi.pushEvents({ events: currentEvents });\r\n\r\n                // Dirty Check\r\n                mutateEvent(currentEvents[0].event,\"isDirty\",false);\r\n\r\n                // Notification\r\n                setLoading(false);\r\n                message.success(\"Saved Successfully!\");\r\n              }}\r\n            >\r\n            {\r\n              t(\"save\")\r\n            }\r\n            </Button>\r\n            <Button\r\n              onClick={async () => {\r\n                setLoading(true);\r\n                const { currentEvents } = generateDhis2Payload(data, programMetadata);\r\n                mutateEvent(currentEvents[0].event,\"dataValues\",{});\r\n                setLoading(false);\r\n              }}\r\n            >\r\n              Clear\r\n            </Button>\r\n          </ButtonGroup>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    metadata: state.metadata,\r\n    data: state.data\r\n  };\r\n};\r\nconst mapDispatchToProps = { mutateEvent, mutateDataValue, initNewEvent };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Stage);\r\n","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\utils\\index.js",["483","484","485","486"],"import moment from \"moment\";\r\nimport InputField from \"../components/InputField\";\r\nimport { Select, Input, DatePicker } from \"antd\";\r\nimport i18n from \"i18next\";\r\nconst { Option } = Select;\r\nconst { Search } = Input;\r\n\r\nconst sample = (d, fn = Math.random) => {\r\n  if (d.length === 0) {\r\n    return;\r\n  }\r\n  return d[Math.round(fn() * (d.length - 1))];\r\n};\r\n\r\nexport const generateCode = (limit = 11, fn = Math.random) => {\r\n  const allowedLetters = [\"abcdefghijklmnopqrstuvwxyz\", \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"].join(\"\");\r\n  const allowedChars = [\"0123456789\", allowedLetters].join(\"\");\r\n  const arr = [sample(allowedLetters, fn)]; // sample 1 to make sure it starts with a letter\r\n  for (let i = 0; i < limit - 1; i++) {\r\n    arr.push(sample(allowedChars, fn));\r\n  }\r\n  return arr.join(\"\");\r\n};\r\n\r\nexport const convertValue = (valueType, value) => {\r\n  switch (valueType) {\r\n    case \"TEXT\":\r\n    case \"INTEGER_POSITIVE\":\r\n    case \"INTEGER_NEGATIVE\":\r\n    case \"INTEGER_ZERO_OR_POSITIVE\":\r\n    case \"PERCENTAGE\":\r\n    case \"NUMBER\":\r\n    case \"INTEGER\":\r\n    case \"PHONE_NUMBER\":\r\n    case \"EMAIL\":\r\n    case \"LONG_TEXT\":\r\n      return value;\r\n    case \"DATE\":\r\n      return moment(value).format(\"YYYY-MM-DD\");\r\n    case \"DATETIME\":\r\n      return moment(value);\r\n    case \"TIME\":\r\n      return moment(value);\r\n    case \"BOOLEAN\":\r\n      return value;\r\n    case \"TRUE_ONLY\":\r\n      return value;\r\n    case \"AGE\":\r\n      return moment(value);\r\n    default:\r\n      return <span>UNSUPPORTED VALUE TYPE</span>;\r\n  }\r\n};\r\n\r\nexport const convertValueBack = (valueType, value) => {\r\n  switch (valueType) {\r\n    case \"TEXT\":\r\n    case \"INTEGER_POSITIVE\":\r\n    case \"INTEGER_NEGATIVE\":\r\n    case \"INTEGER_ZERO_OR_POSITIVE\":\r\n    case \"PERCENTAGE\":\r\n    case \"NUMBER\":\r\n    case \"INTEGER\":\r\n    case \"PHONE_NUMBER\":\r\n    case \"EMAIL\":\r\n    case \"LONG_TEXT\":\r\n      return value;\r\n    case \"DATE\":\r\n      return moment(value).format(\"YYYY-MM-DD\");\r\n    case \"DATETIME\":\r\n      return moment(value);\r\n    case \"TIME\":\r\n      return moment(value);\r\n    case \"BOOLEAN\":\r\n      return value + \"\";\r\n    case \"TRUE_ONLY\":\r\n      return value ? value + \"\" : \"\";\r\n    case \"AGE\":\r\n      return moment(value).format(\"YYYY-MM-DD\");\r\n    default:\r\n      return <span>UNSUPPORTED VALUE TYPE</span>;\r\n  }\r\n};\r\n\r\nexport const generateDhis2Payload = (data, programMetadata) => {\r\n  const newData = JSON.parse(JSON.stringify(data));\r\n  let { currentTei, currentEnrollment, currentEvents } = newData;\r\n  currentTei.attributes = Object.keys(currentTei.attributes).map((attribute) => {\r\n    const attributeMetadata = programMetadata.trackedEntityAttributes.find((attr) => attr.id === attribute);\r\n    return {\r\n      attribute,\r\n      value: convertValueBack(attributeMetadata.valueType, currentTei.attributes[attribute])\r\n    };\r\n  });\r\n  currentEnrollment.enrollmentDate = moment(currentEnrollment.enrollmentDate).format(\"YYYY-MM-DD\");\r\n  currentEnrollment.incidentDate = moment(currentEnrollment.incidentDate).format(\"YYYY-MM-DD\");\r\n\r\n  currentEvents = currentEvents.map((event) => {\r\n    const programStage = programMetadata.programStages.find((ps) => ps.id === event.programStage);\r\n    event.dataValues = Object.keys(event.dataValues).map((dataElement) => {\r\n      const dataElementMetadata = programStage.dataElements.find((de) => de.id === dataElement);\r\n      return {\r\n        dataElement,\r\n        value: convertValueBack(dataElementMetadata.valueType, event.dataValues[dataElement])\r\n      };\r\n    });\r\n    event.eventDate = moment(event.eventDate).format(\"YYYY-MM-DD\");\r\n    event.dueDate = moment(event.dueDate).format(\"YYYY-MM-DD\");\r\n    return event;\r\n  });\r\n\r\n  return { currentTei, currentEnrollment, currentEvents };\r\n};\r\n\r\nexport const generateTableColumns = (metadata, external) => {\r\n  let render = null;\r\n  if (external) {\r\n    switch (external.type) {\r\n      case \"DATE\":\r\n        render = (value) => {\r\n          return value ? moment(value).format(\"YYYY-MM-DD\") : \"\";\r\n        };\r\n        break;\r\n      default:\r\n        render = (value) => {\r\n          return value ? value : \"\";\r\n        };\r\n        break;\r\n    }\r\n  } else {\r\n    if (metadata.valueSet) {\r\n      render = (value) => {\r\n        let find = metadata.valueSet.find((e) => {\r\n          return e.value === value;\r\n        });\r\n        if (find) {\r\n          value = find.label;\r\n        }\r\n        return value;\r\n      };\r\n    } else {\r\n      switch (metadata.valueType) {\r\n        case \"TRUE_ONLY\":\r\n        case \"BOOLEAN\":\r\n          render = (value) => {\r\n            if (value == true || value == \"true\") {\r\n              value = \"Yes\";\r\n            }\r\n            if (value == false || value == \"false\") {\r\n              value = \"No\";\r\n            }\r\n            return value ? value : \"\";\r\n          };\r\n          break;\r\n        case \"DATE\":\r\n          render = (value) => {\r\n            return value ? moment(value).format(\"YYYY-MM-DD\") : \"\";\r\n          };\r\n          break;\r\n        default:\r\n          render = (value) => {\r\n            return value ? value : \"\";\r\n          };\r\n          break;\r\n      }\r\n    }\r\n  }\r\n  return render;\r\n};\r\n\r\nexport const generateTableFilter = (metadata, onFilter, external) => {\r\n  let render = null;\r\n  if (external) {\r\n    switch (external.type) {\r\n      case \"DATE\":\r\n        render = (\r\n          <div style={{ padding: \"20px\" }}>\r\n            <DatePicker\r\n              id={external.name}\r\n              style={{ width: 250 }}\r\n              onChange={(value) => {\r\n                onFilter(value ? moment(value).format(\"YYYY-MM-DD\") : value, external.name);\r\n              }}\r\n            />\r\n          </div>\r\n        );\r\n        break;\r\n      default:\r\n        render = (value) => {\r\n          return value ? value : \"\";\r\n        };\r\n        break;\r\n    }\r\n  } else {\r\n    if (metadata.valueSet) {\r\n      render = (\r\n        <div style={{ padding: \"20px\" }}>\r\n          <Select\r\n            style={{ width: 250 }}\r\n            allowClear\r\n            showSearch\r\n            placeholder={`${i18n.t(\"select\")}...`}\r\n            onChange={(value) => {\r\n              onFilter(value, metadata.id, \"select\");\r\n            }}\r\n          >\r\n            {metadata.valueSet.map((option) => {\r\n              return <Option value={option.value}>{option.label}</Option>;\r\n            })}\r\n          </Select>\r\n        </div>\r\n      );\r\n    } else {\r\n      switch (metadata.valueType) {\r\n        case \"TRUE_ONLY\":\r\n        case \"BOOLEAN\":\r\n          <div style={{ padding: \"20px\" }}>\r\n            <Select\r\n              style={{ width: 250 }}\r\n              allowClear\r\n              placeholder={`${i18n.t(\"select\")}...`}\r\n              onChange={(value) => {\r\n                onFilter(value, metadata.id);\r\n              }}\r\n            >\r\n              <Option value=\"true\">Yes</Option>\r\n              <Option value=\"false\">No</Option>\r\n            </Select>\r\n          </div>;\r\n\r\n          break;\r\n        case \"DATE\":\r\n          render = (\r\n            <div style={{ padding: \"20px\" }}>\r\n              <DatePicker\r\n                id={metadata.id}\r\n                style={{ width: 250 }}\r\n                onChange={(value) => {\r\n                  onFilter(value ? moment(value).format(\"YYYY-MM-DD\") : value, metadata.id);\r\n                }}\r\n              />\r\n            </div>\r\n          );\r\n          break;\r\n        default:\r\n          // render = (<Input style={{ width: 200 }} placeholder=\"Text Here...\" allowClear onChange={onFilter}/>)\r\n          render = (\r\n            <div style={{ padding: \"20px\" }}>\r\n              <Search\r\n                id={metadata.id}\r\n                placeholder={i18n.t(\"inputSearchText\")}\r\n                allowClear\r\n                onSearch={(value) => {\r\n                  onFilter(value, metadata.id);\r\n                }}\r\n                style={{ width: 250 }}\r\n              />\r\n            </div>\r\n          );\r\n          break;\r\n      }\r\n    }\r\n  }\r\n  return render;\r\n};\r\n\r\nexport const generateEditableDataValueCells = (metadata, mutateDataValue) => {\r\n  let render = (value, record) => {\r\n    return (\r\n      <InputField\r\n        value={value}\r\n        valueSet={metadata.valueSet ? metadata.valueSet : null}\r\n        // label={metadata.displayFormName}\r\n        valueType={metadata.valueType}\r\n        change={(value) => {\r\n          mutateDataValue(record.eventId, metadata.id, value);\r\n        }}\r\n      />\r\n    );\r\n  };\r\n  return render;\r\n};\r\nexport const numberWithCommas = (number) => {\r\n  return number.toString().replace(/\\B(?<!\\.\\d*)(?=(\\d{3})+(?!\\d))/g, \",\");\r\n};\r\n","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Translation\\TranslationTable.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\redux\\actions\\route\\type.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\redux\\actions\\metadata\\type.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Translation\\const.js",["487"],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\redux\\reducers\\data-methods.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\redux\\actions\\user\\type.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Export\\Content.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\utils\\excel.utility.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\redux\\actions\\admin\\type.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\redux\\actions\\data\\type.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Form\\WarningDialog.jsx",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Search\\Result.jsx",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\run.js",["488","489"],"import example from \"./pages/example\";\r\nimport page0 from \"./pages/page0\";\r\nimport page1 from \"./pages/page1\";\r\nimport page2 from \"./pages/page2\";\r\nimport page3 from \"./pages/page3\";\r\nimport page4 from \"./pages/page4\";\r\nimport page5 from \"./pages/page5\";\r\nimport page6 from \"./pages/page6\";\r\nimport page7 from \"./pages/page7\";\r\nimport page8 from \"./pages/page8\";\r\nimport page9 from \"./pages/page9\"\r\n\r\nconst run = (t) => {\r\n  return [\r\n    // example,\r\n    page1(t),\r\n    page2(t),\r\n    page3(t),\r\n    page4(t),\r\n    page5(t),\r\n    page6(t),\r\n    page7(t),\r\n    page8(t),\r\n    page9(t),\r\n    // page0\r\n  ];\r\n};\r\n\r\nexport default run;\r\n","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Administration\\FrameA.jsx",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Administration\\Selections.jsx",["490"],"import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCheck, faCog } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Radio, Input, Result, Button } from \"antd\";\r\n/* REDUX */\r\nimport { connect } from \"react-redux\";\r\nimport { changeStep, changeIcd11ToolUrl, changeInstallationType } from \"../../redux/actions/admin\";\r\nimport { useTranslation } from \"react-i18next\";\r\n/*       */\r\n\r\nconst Selections = ({ \r\n  changeStep, \r\n  changeIcd11ToolUrl, \r\n  changeInstallationType, \r\n  admin,\r\n  metadata: {\r\n    orgUnits,\r\n    users\r\n  } \r\n}) => {\r\n  const { t } = useTranslation();\r\n  const onChangeRadio = (e) => {\r\n    if (e.target.value === \"global\") {\r\n      changeIcd11ToolUrl(\"https://icd11restapi-developer-test.azurewebsites.net/icd/\", \"global\");\r\n    } else {\r\n      changeIcd11ToolUrl(\"\", e.target.value);\r\n    }\r\n  };\r\n  const onChangeInput = (e) => {\r\n    let type = admin.icd11ToolUrl.type;\r\n    changeIcd11ToolUrl(e.target.value, type);\r\n  };\r\n  return (\r\n    <div className=\"administration-selections-container\">\r\n      {( orgUnits.length > 0 && users.filter(({organisationUnits}) => organisationUnits > 0).length > 0 ) ? \r\n          <>  \r\n            <div className=\"administration-selections-title\">{t(\"selectionTitle\")}</div>\r\n            <div className=\"administration-selections-title\">\r\n              <Radio.Group name=\"radiogroup\" onChange={onChangeRadio} value={admin.icd11ToolUrl.type}>\r\n                <Radio value={\"global\"}>{t(\"globalICDTool\")}</Radio>\r\n                <Radio value={\"other\"}>{t(\"otherICDTool\")}</Radio>\r\n              </Radio.Group>\r\n            </div>\r\n            <div className=\"administration-selections-title\">\r\n              <Input\r\n                placeholder=\"Input Url\"\r\n                style={{ width: \"400px\" }}\r\n                value={admin.icd11ToolUrl.url}\r\n                disabled={admin.icd11ToolUrl.type === \"global\" ? true : false}\r\n                onChange={onChangeInput}\r\n              />\r\n            </div>\r\n            <div className=\"administration-selections-buttons-container\">\r\n              <div\r\n                onClick={() => {\r\n                  changeInstallationType(\"default\");\r\n                  changeStep(4);\r\n                }}\r\n              >\r\n                <div className=\"administration-selection\">{t(\"defaultInstallation\")}</div>\r\n                <FontAwesomeIcon icon={faCheck} style={{ fontSize: 80, color: \"#ffffff\" }} />\r\n                <div className=\"administration-selection-info\">{t(\"defaultInstallationInfo\")}</div>\r\n              </div>\r\n              <div\r\n                onClick={() => {\r\n                  changeInstallationType(\"custom\");\r\n                  changeStep(1);\r\n                }}\r\n              >\r\n                <div className=\"administration-selection\">{t(\"customInstallation\")}</div>\r\n                <FontAwesomeIcon icon={faCog} style={{ fontSize: 80, color: \"#ffffff\" }} />\r\n                <div className=\"administration-selection-info\">{t(\"customInstallationInfo\")}</div>\r\n              </div>\r\n            </div>\r\n            <div className=\"administration-selections-title\">{t(\"installWithDocker\")}</div>\r\n            <div style={{ width: \"100%\", textAlign: \"center\" }}>\r\n              <a target=\"_blank\" href=\"https://icd.who.int/icdapi/docs2/ICDAPI-DockerContainer\">\r\n                https://icd.who.int/icdapi/docs2/ICDAPI-DockerContainer\r\n              </a>\r\n            </div>\r\n          </> :\r\n          <Result\r\n            status=\"warning\"\r\n            title={t(\"installationWarning\")}\r\n            subTitle={t(\"installationWarningTitle\")}\r\n            extra={\r\n              <Button type=\"primary\"\r\n                onClick={() => {\r\n                  window.location.href = \"../../../dhis-web-maintenance/\";\r\n                }}\r\n              >\r\n                {t(\"backToMaintenance\")}\r\n              </Button>\r\n            }\r\n          />\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    admin: state.admin,\r\n    metadata: state.metadata\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  changeStep,\r\n  changeIcd11ToolUrl,\r\n  changeInstallationType\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Selections);\r\n","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Administration\\FrameB.jsx",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Administration\\AssignUsers.jsx",["491","492","493"],"import { Card, Select, Transfer, Button, Row, Col } from \"antd\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\r\n/* REDUX */\r\nimport { connect } from \"react-redux\";\r\nimport { changeAssignUsers } from \"../../redux/actions/admin\";\r\nimport { useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\n/*       */\r\n\r\nconst AssignUsers = ({\r\n  admin: {\r\n    users: { admin: adminUsers, capture: captureUsers, view: viewUsers },\r\n  },\r\n  existedUserGroups,\r\n  changeAssignAdminUsers,\r\n  changeAssignCaptureUsers,\r\n  changeAssignViewUsers,\r\n}) => {\r\n  const { t } = useTranslation();\r\n  const [selectedKeys, setSelectedKeys] = useState({\r\n    admin: [],\r\n    capture: [],\r\n    view: [],\r\n  });\r\n  const changeSelectedKeys = (group) => (\r\n    sourceSelectedKeys,\r\n    targetSelectedKeys\r\n  ) =>\r\n    setSelectedKeys({\r\n      ...selectedKeys,\r\n      [group]: [].concat(sourceSelectedKeys).concat(targetSelectedKeys),\r\n    });\r\n  const showedUsers = (group) => {\r\n    // const map = {\r\n    //   admin: adminUsers,\r\n    //   capture: captureUsers,\r\n    //   view: viewUsers,\r\n    // };\r\n    // const users = [];\r\n    // const arr = Object.entries(map).map(([name, groupUsers]) => {\r\n    //   if (name !== group) {\r\n    //     return;\r\n    //   }\r\n    //   users.concat(groupUsers);\r\n    // });\r\n    // return existedUsers.filter((user) => !arr.includes[user.id]);\r\n    return existedUserGroups;\r\n  };\r\n\r\n  const onChange = (group) => (nextTargetKeys, direction, moveKeys) => {\r\n    switch (group) {\r\n      case \"admin\": {\r\n        changeAssignAdminUsers(nextTargetKeys);\r\n        break;\r\n      }\r\n      case \"capture\": {\r\n        changeAssignCaptureUsers(nextTargetKeys);\r\n        break;\r\n      }\r\n      case \"view\": {\r\n        changeAssignViewUsers(nextTargetKeys);\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  // const onSelectChange = (group) => (\r\n  //   sourceSelectedKeys,\r\n  //   targetSelectedKeys\r\n  // ) => {\r\n  //   setSelectedKeys([...sourceSelectedKeys, ...targetSelectedKeys]);\r\n  // };\r\n\r\n  return (\r\n    <div className=\"administration-users-container\">\r\n      <Row style={{ margin: 10, width: \"100%\", height: \"100%\" }} gutter={16}>\r\n        <Col xs={8}>\r\n          <Card\r\n            style={{ height: \"100%\" }}\r\n            size=\"small\"\r\n            title={\r\n              <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                {t(\"adminGroup\")}\r\n                <FontAwesomeIcon\r\n                  onClick={() => {}}\r\n                  icon={faInfoCircle}\r\n                  style={{\r\n                    marginLeft: 5,\r\n                    fontSize: 17,\r\n                    color: \"#878787\",\r\n                    cursor: \"pointer\",\r\n                  }}\r\n                />\r\n              </div>\r\n            }\r\n          >\r\n            <Transfer\r\n              showSearch\r\n              pagination={{\r\n                pageSize: 20,\r\n              }}\r\n              listStyle={{\r\n                width: \"100%\",\r\n                height: \"63vh\"\r\n              }}\r\n              dataSource={existedUserGroups.map(({ id, displayName }) => ({\r\n                key: id,\r\n                title: displayName,\r\n              }))}\r\n              // dataSource={existedUsers}\r\n              targetKeys={adminUsers}\r\n              selectedKeys={selectedKeys.admin}\r\n              render={(item) => item.title}\r\n              onChange={onChange(\"admin\")}\r\n              onSelectChange={changeSelectedKeys(\"admin\")}\r\n            />\r\n          </Card>\r\n        </Col>\r\n        <Col xs={8}>\r\n          <Card\r\n            style={{ height: \"100%\" }}\r\n            size=\"small\"\r\n            title={\r\n              <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                {t(\"captureGroup\")}\r\n                <FontAwesomeIcon\r\n                  onClick={() => {}}\r\n                  icon={faInfoCircle}\r\n                  style={{\r\n                    marginLeft: 5,\r\n                    fontSize: 17,\r\n                    color: \"#878787\",\r\n                    cursor: \"pointer\",\r\n                  }}\r\n                />\r\n              </div>\r\n            }\r\n          >\r\n            <Transfer\r\n              showSearch\r\n              pagination={{\r\n                pageSize: 20,\r\n              }}\r\n              listStyle={{\r\n                width: \"100%\",\r\n                height: \"63vh\"\r\n              }}\r\n              dataSource={showedUsers(\"capture\").map(({ id, displayName }) => ({\r\n                key: id,\r\n                title: displayName,\r\n              }))}\r\n              targetKeys={captureUsers}\r\n              selectedKeys={selectedKeys.capture}\r\n              render={(item) => item.title}\r\n              onChange={onChange(\"capture\")}\r\n              onSelectChange={changeSelectedKeys(\"capture\")}\r\n            />\r\n          </Card>\r\n        </Col>\r\n        <Col xs={8}>\r\n          <Card\r\n            style={{ height: \"100%\" }}\r\n            size=\"small\"\r\n            title={\r\n              <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                {t(\"viewGroup\")}\r\n                <FontAwesomeIcon\r\n                  onClick={() => {}}\r\n                  icon={faInfoCircle}\r\n                  style={{\r\n                    marginLeft: 5,\r\n                    fontSize: 17,\r\n                    color: \"#878787\",\r\n                    cursor: \"pointer\",\r\n                  }}\r\n                />\r\n              </div>\r\n            }\r\n          >\r\n            <Transfer\r\n              showSearch\r\n              pagination={{\r\n                pageSize: 20,\r\n              }}\r\n              listStyle={{\r\n                width: \"100%\",\r\n                height: \"63vh\"\r\n              }}\r\n              dataSource={showedUsers(\"view\").map(({ id, displayName }) => ({\r\n                key: id,\r\n                title: displayName,\r\n              }))}\r\n              targetKeys={viewUsers}\r\n              selectedKeys={selectedKeys.view}\r\n              render={(item) => item.title}\r\n              onChange={onChange(\"view\")}\r\n              onSelectChange={changeSelectedKeys(\"view\")}\r\n            />\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    admin: state.admin,\r\n    existedUserGroups: state.metadata.userGroups,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  changeAssignAdminUsers: changeAssignUsers(\"admin\"),\r\n  changeAssignCaptureUsers: changeAssignUsers(\"capture\"),\r\n  changeAssignViewUsers: changeAssignUsers(\"view\"),\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AssignUsers);\r\n","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Administration\\AssignOrgUnits.jsx",["494"],"import { useState } from \"react\";\r\nimport { Select, Button } from \"antd\";\r\nimport _ from \"lodash\";\r\n/* REDUX */\r\nimport { connect } from \"react-redux\";\r\nimport { assignOrgUnits } from \"../../redux/actions/admin\";\r\nimport { useTranslation } from \"react-i18next\";\r\n/*       */\r\nimport { Components } from \"tracker-capture-app-core\";\r\nconst { Option } = Select;\r\nconst { MultipleOrgUnitSelector } = Components;\r\n\r\nconst AssignOrgUnits = ({ admin, metadata, assignOrgUnits }) => {\r\n  const { t } = useTranslation();\r\n  const [selectedOrgUnitLevel, setSelectedOrgUnitLevel] = useState(\"\");\r\n  const [selectedOrgUnitGroup, setSelectedOrgUnitGroup] = useState(\"\");\r\n\r\n  const { assignedOrgUnits } = admin;\r\n  const { orgUnitGroups, orgUnitLevels, orgUnits } = metadata;\r\n\r\n  const selectOrgUnits = (orgUnits) => {\r\n    const selectedPaths = orgUnits.map((ou) => ou.path);\r\n    const newAssignOrgUnits = _.compact([\r\n      ...assignedOrgUnits,\r\n      ...selectedPaths\r\n    ]);\r\n    assignOrgUnits(newAssignOrgUnits);\r\n  };\r\n  const deselectOrgUnits = (orgUnits) => {\r\n    const selectedPaths = orgUnits.map((ou) => ou.path);\r\n    const newAssignOrgUnits = assignedOrgUnits.filter(\r\n      (ao) => !selectedPaths.includes(ao)\r\n    );\r\n    assignOrgUnits(newAssignOrgUnits);\r\n  };\r\n\r\n  return (\r\n    <div className=\"administration-orgunit-container\">\r\n      <div className=\"administration-multiorgunit-selector-container\">\r\n        <MultipleOrgUnitSelector\r\n          selectedOrgUnits={assignedOrgUnits}\r\n          handleSelectOrgUnits={(selected) => {\r\n            assignOrgUnits(selected.selected);\r\n          }}\r\n        />\r\n      </div>\r\n      <div className=\"administration-multiorgunit-selection-container\">\r\n        <div>\r\n          <div>{t(\"OULevel\")}</div>\r\n          <div>\r\n            <Select\r\n              value={selectedOrgUnitLevel.value}\r\n              placeholder=\"Select organisation unit level\"\r\n              style={{ width: 250 }}\r\n              onChange={(value, option) => {\r\n                setSelectedOrgUnitLevel({ ...option });\r\n              }}\r\n              options={orgUnitLevels.map((oul) => {\r\n                return {\r\n                  value: oul.id,\r\n                  level: oul.level,\r\n                  label: oul.displayName\r\n                };\r\n              })}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Button\r\n              onClick={() => {\r\n                selectOrgUnits(\r\n                  orgUnits.filter(\r\n                    (ou) => ou.level === selectedOrgUnitLevel.level\r\n                  )\r\n                );\r\n              }}\r\n            >\r\n            { \r\n              t(\"Select\")\r\n            }\r\n            </Button>\r\n            <Button\r\n              onClick={() => {\r\n                deselectOrgUnits(\r\n                  orgUnits.filter(\r\n                    (ou) => ou.level === selectedOrgUnitLevel.level\r\n                  )\r\n                );\r\n              }}\r\n            >\r\n            {\r\n              t(\"deselect\")\r\n            }\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <div>{t(\"OUGroup\")}</div>\r\n          <div>\r\n            <Select\r\n              value={selectedOrgUnitGroup.value}\r\n              placeholder=\"Select organisation unit group\"\r\n              style={{ width: 250 }}\r\n              onChange={(value, option) => {\r\n                setSelectedOrgUnitGroup({ ...option });\r\n              }}\r\n              options={orgUnitGroups.map((oug) => {\r\n                return {\r\n                  value: oug.id,\r\n                  orgUnitList: oug.organisationUnits.map((ou) => ou.id),\r\n                  label: oug.displayName\r\n                };\r\n              })}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Button\r\n              onClick={() => {\r\n                if (!selectedOrgUnitGroup) return;\r\n                selectOrgUnits(\r\n                  orgUnits.filter((ou) =>\r\n                    selectedOrgUnitGroup.orgUnitList.includes(ou.id)\r\n                  )\r\n                );\r\n              }}\r\n            >\r\n            { \r\n              t(\"select\")\r\n            }\r\n            </Button>\r\n            <Button\r\n              onClick={() => {\r\n                if (!selectedOrgUnitGroup) return;\r\n                deselectOrgUnits(\r\n                  orgUnits.filter((ou) =>\r\n                    selectedOrgUnitGroup.orgUnitList.includes(ou.id)\r\n                  )\r\n                );\r\n              }}\r\n            >\r\n            {\r\n              t(\"deselect\")\r\n            }\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <div>\r\n            <Button\r\n              onClick={() => {\r\n                selectOrgUnits(orgUnits);\r\n              }}\r\n            >\r\n            { \r\n              t(\"selectAll\")\r\n            }\r\n            </Button>\r\n            <Button\r\n              onClick={() => {\r\n                deselectOrgUnits(orgUnits);\r\n              }}\r\n            >\r\n            {\r\n              t(\"deselectAll\")\r\n            }\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    admin: state.admin,\r\n    metadata: state.metadata\r\n  };\r\n};\r\nconst mapDispatchToProps = { assignOrgUnits };\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AssignOrgUnits);\r\n","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Administration\\Attributes.jsx",["495","496"],"import { Card, Select, Transfer, Button, Radio, Space } from \"antd\";\r\nimport { Hooks } from \"tracker-capture-app-core\";\r\nimport { defaultAttributes } from \"../../utils/const\";\r\n\r\n/* REDUX */\r\nimport { connect } from \"react-redux\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { changeTrackedEntityTypes, changeTrackedEntityType, setFemaleOption, setFullnameOption } from \"../../redux/actions/admin\";\r\nimport { setTeas } from \"../../redux/actions/metadata\";\r\n\r\nimport { useTranslation } from \"react-i18next\";\r\n/*       */\r\n\r\nconst { useApi } = Hooks;\r\n\r\n\r\nconst { Option } = Select;\r\n\r\nconst Attributes = ({\r\n  admin: { \r\n    trackedEntityAttributes: selectedTrackedEntityAttributes,\r\n    trackedEntityType: selectedTrackedEntityType,\r\n    femaleOption: selectedFemaleOption,\r\n    fullnameOption: selectedFullnameOption,\r\n    type\r\n  },\r\n  allExistedTrackedEntityAttributes,\r\n  allExistedTrackedEntityTypes,\r\n  programMetadata,\r\n  formMapping,\r\n  femaleCode,\r\n  fullnameOption,\r\n  changeTrackedEntityTypes,\r\n  changeTrackedEntityType,\r\n  setTeas,\r\n  setFemaleOption,\r\n  setFullnameOption\r\n}) => {\r\n  const { t } = useTranslation();\r\n  const { metadataApi } = useApi();\r\n  const [isReloading, setIsReloading] = useState(false);\r\n  const [selectedKeys, setSelectedKeys] = useState([]);\r\n  // const [fullname, setFullname] = useState(false);\r\n  const [femaleOptions, setFemaleOptions] = useState([]);\r\n  \r\n  const getDefaultTEAName = defaultName => defaultName === \"First Name\" ? \"Given Name\" :\r\n    defaultName === \"Middle Name\" ? \"Middle Name\" :\r\n    defaultName === \"Last Name\" ? \"Fammily Name\" :\r\n    defaultName === \"Date of Birth\" ? \"Date of Birth\" :\r\n    defaultName === \"Date of Birth is estimated\" ? \"Date of Birth is estimated\" :\r\n    defaultName === \"Age in years\" ? \"Age (years)\" :\r\n    defaultName === \"Address\" ? \"Address (current)\" :\r\n    defaultName === \"Sex\" ? \"Sex\" :\r\n    defaultName === \"Female Option\" ? \"Female\" :\r\n    defaultName === \"Person\" ? \"Person\" : \"\";\r\n\r\n  const showedTrackedEntityAttributes = (attribute) =>\r\n    allExistedTrackedEntityAttributes.filter(({ id }) =>\r\n      selectedTrackedEntityAttributes.every(\r\n        ([des, source]) => des !== id || source === null || (attribute ? source === attribute : false)\r\n      )\r\n    );\r\n\r\n  useEffect(() => {\r\n    if ( (selectedTrackedEntityAttributes.filter( ([,source]) => source === \"Sex\" ).length > 0) ) {\r\n      metadataApi.get(`/api/trackedEntityAttributes/${selectedTrackedEntityAttributes.find( ([,source]) => source === \"Sex\" )[0]}.json`, {} ,[\r\n        \"fields=optionSet[options[id,name,code]]\"\r\n      ]).then( json => {\r\n        setFemaleOptions(json.optionSet.options)\r\n      })\r\n    }\r\n  },[selectedTrackedEntityAttributes])\r\n\r\n  useEffect(() => {\r\n    if (programMetadata) {\r\n      let selectedAttrs = [];\r\n      selectedAttrs = defaultAttributes.map( ({name,code}) => [formMapping.attributes[code],name]);\r\n      selectedAttrs = [\r\n        ...selectedAttrs,\r\n        ...programMetadata.trackedEntityAttributes.filter( ({id}) => \r\n          !selectedAttrs.find( ([des,]) => des === id ) )\r\n        .map(({id}) => [id,null])\r\n      ]\r\n      changeTrackedEntityTypes(selectedAttrs); // This is for TEAs\r\n      changeTrackedEntityType(programMetadata.trackedEntityType);\r\n      setFemaleOption(femaleCode);\r\n      setFullnameOption(fullnameOption);\r\n    }\r\n  },[programMetadata])\r\n\r\n  const onChange = (nextTargetKeys, direction, moveKeys) => {\r\n    changeTrackedEntityTypes(\r\n      selectedTrackedEntityAttributes.filter(([, source]) => source).concat(nextTargetKeys.map((key) => [key, null]))\r\n    );\r\n  };\r\n\r\n  const onSelectChange = (sourceSelectedKeys, targetSelectedKeys) => {\r\n    setSelectedKeys([...sourceSelectedKeys, ...targetSelectedKeys]);\r\n  };\r\n\r\n  const getSelectValue = (attrId) => {\r\n    const selectedAttr = selectedTrackedEntityAttributes.find(([, source]) => source === attrId);\r\n    return selectedAttr ? selectedAttr[0] : null;\r\n  };\r\n\r\n  return (\r\n    <div className=\"administration-transfer-container\">\r\n      <div>\r\n        <Card size=\"small\" style={{marginBottom: \"10px\"}}>\r\n          <div className=\"administration-tet\">\r\n            <div><strong>{t(\"trackedEntityType\")}</strong></div>\r\n            <div>\r\n            {\r\n              type === 'default' && programMetadata === null ? getDefaultTEAName(\"Person\") :\r\n              <Select\r\n                style={{\r\n                  width: \"100%\"\r\n                }}\r\n                placeholder=\"Select tracked entity type\"\r\n                value={selectedTrackedEntityType}\r\n                onChange={(value) => changeTrackedEntityType(value)}\r\n                disabled={programMetadata}\r\n              >\r\n                {\r\n                  allExistedTrackedEntityTypes.map( tet => \r\n                    <Option key={tet.id} value={tet.id}>{tet.displayName}</Option>\r\n                  )\r\n                }\r\n              </Select>\r\n            }\r\n            </div>\r\n          </div>\r\n        </Card>\r\n        <Card size=\"small\" title={t(\"defaultAttribute\")}>\r\n          <div className=\"administration-attribute\">\r\n            <div>{defaultAttributes[0].name}</div>\r\n            <div>{\r\n              (!programMetadata) ?\r\n                t(\"systemID\")\r\n                :\r\n                allExistedTrackedEntityAttributes.find(({id}) => getSelectValue(defaultAttributes[0].name) === id) ? \r\n                  allExistedTrackedEntityAttributes.find(({id}) => getSelectValue(defaultAttributes[0].name) === id).displayName\r\n                  :\r\n                  getSelectValue(defaultAttributes[0].name)\r\n            }</div>\r\n          </div>\r\n          {\r\n            programMetadata === null ? \r\n            <>\r\n              <div className=\"administration-fullnameOption\">\r\n                <div><strong>* Select Name Option</strong></div>\r\n                <div>\r\n                  \r\n                </div>\r\n              </div>\r\n              <div className=\"administration-attribute\">\r\n                <div>\r\n                {\r\n                  type === 'default' ? \"Full Name\" : \r\n                  <Radio.Group \r\n                    size=\"small\"\r\n                    onChange={({ target: { value } }) => {\r\n                      setFullnameOption(value);\r\n\r\n                      if (value === \"noname\") {\r\n                        changeTrackedEntityTypes(selectedTrackedEntityAttributes.filter(\r\n                          ([,source]) => source !== \"First Name\" && source !== \"Middle Name\" && source !== \"Last Name\"\r\n                        ))\r\n                      }\r\n                      else if (value === \"fullname\") {\r\n                        changeTrackedEntityTypes(selectedTrackedEntityAttributes.filter(\r\n                          ([,source]) => source !== \"Middle Name\" && source !== \"Last Name\"\r\n                        ))\r\n                      }\r\n                      else if (value === \"firstlastname\") {\r\n                        changeTrackedEntityTypes(selectedTrackedEntityAttributes.filter(\r\n                          ([,source]) => source !== \"Middle Name\"\r\n                        ))\r\n                      }\r\n                    }}\r\n                    value={selectedFullnameOption}\r\n                    optionType=\"button\"\r\n                    buttonStyle=\"solid\"\r\n                  >\r\n                    <Space direction=\"vertical\">\r\n                      <Space>\r\n                        <Radio value=\"noname\">No Name</Radio>\r\n                        <Radio value=\"fullname\">Fullname</Radio>\r\n                        <Radio value=\"firstlastname\">First & Last Name</Radio>\r\n                      </Space>\r\n                      <Radio value=\"firstmidlastname\">First, Middle & Last Name</Radio>\r\n                    </Space>\r\n                  </Radio.Group>\r\n                }\r\n                </div>\r\n                <div className=\"administration-fullnameOption-inputs\">\r\n                  <div>\r\n                    {\r\n                      type === 'default' ? getDefaultTEAName(\"First Name\") :\r\n                        <Select\r\n                          filterOption={(inputValue, option) => {\r\n                            return option.children.toLocaleLowerCase().includes(inputValue.toLocaleLowerCase());\r\n                          }}\r\n                          style={{\r\n                            width: \"100%\"\r\n                          }}\r\n                          showSearch\r\n                          onChange={(value) => {\r\n                            const existedIndex = selectedTrackedEntityAttributes.findIndex(\r\n                              ([, source]) => source === \"First Name\"\r\n                            );\r\n                            let newSelectedAttributes = selectedTrackedEntityAttributes.filter(\r\n                              ([destination, source]) => source || destination !== value\r\n                            );\r\n                            if (existedIndex < 0) {\r\n                              newSelectedAttributes.push([value, \"First Name\"]);\r\n                            } else {\r\n                              newSelectedAttributes.splice(existedIndex, 1, [value, \"First Name\"]);\r\n                            }\r\n                            changeTrackedEntityTypes(newSelectedAttributes);\r\n                          }}\r\n                          value={getSelectValue(\"First Name\")}\r\n                          placeholder=\"First Name\"\r\n                          disabled={selectedFullnameOption === \"noname\" }\r\n                        >\r\n                          {showedTrackedEntityAttributes(\"First Name\")\r\n                          .filter(({ valueType }) => valueType === \"TEXT\")\r\n                          .map(({ id, displayName }) => (\r\n                            <Option key={id} value={id}>{displayName}</Option>\r\n                          ))}\r\n                        </Select>\r\n                    }\r\n                  </div>\r\n                  <div>\r\n                  {\r\n                    type === 'default' ? getDefaultTEAName(\"Middle Name\") :\r\n                      <Select\r\n                        filterOption={(inputValue, option) => {\r\n                          return option.children.toLocaleLowerCase().includes(inputValue.toLocaleLowerCase());\r\n                        }}\r\n                        style={{\r\n                          width: \"100%\"\r\n                        }}\r\n                        showSearch\r\n                        onChange={(value) => {\r\n                          const existedIndex = selectedTrackedEntityAttributes.findIndex(\r\n                            ([, source]) => source === \"Middle Name\"\r\n                          );\r\n                          let newSelectedAttributes = selectedTrackedEntityAttributes.filter(\r\n                            ([destination, source]) => source || destination !== value\r\n                          );\r\n                          if (existedIndex < 0) {\r\n                            newSelectedAttributes.push([value, \"Middle Name\"]);\r\n                          } else {\r\n                            newSelectedAttributes.splice(existedIndex, 1, [value, \"Middle Name\"]);\r\n                          }\r\n                          changeTrackedEntityTypes(newSelectedAttributes);\r\n                        }}\r\n                        value={getSelectValue(\"Middle Name\")}\r\n                        placeholder=\"Middle Name\"\r\n                        disabled={selectedFullnameOption === \"noname\" || selectedFullnameOption === \"fullname\" || selectedFullnameOption === \"firstlastname\"}\r\n                      >\r\n                        {showedTrackedEntityAttributes(\"Middle Name\")\r\n                        .filter(({ valueType }) => valueType === \"TEXT\")\r\n                        .map(({ id, displayName }) => (\r\n                          <Option key={id} value={id}>{displayName}</Option>\r\n                        ))}\r\n                      </Select>\r\n                  }\r\n                  </div>\r\n                  <div>\r\n                  {\r\n                    type === 'default' ? getDefaultTEAName(\"Last Name\") :\r\n                      <Select\r\n                        filterOption={(inputValue, option) => {\r\n                          return option.children.toLocaleLowerCase().includes(inputValue.toLocaleLowerCase());\r\n                        }}\r\n                        style={{\r\n                          width: \"100%\"\r\n                        }}\r\n                        showSearch\r\n                        onChange={(value) => {\r\n                          const existedIndex = selectedTrackedEntityAttributes.findIndex(\r\n                            ([, source]) => source === \"Last Name\"\r\n                          );\r\n                          let newSelectedAttributes = selectedTrackedEntityAttributes.filter(\r\n                            ([destination, source]) => source || destination !== value\r\n                          );\r\n                          if (existedIndex < 0) {\r\n                            newSelectedAttributes.push([value, \"Last Name\"]);\r\n                          } else {\r\n                            newSelectedAttributes.splice(existedIndex, 1, [value, \"Last Name\"]);\r\n                          }\r\n                          changeTrackedEntityTypes(newSelectedAttributes);\r\n                        }}\r\n                        value={getSelectValue(\"Last Name\")}\r\n                        placeholder=\"Last Name\"\r\n                        disabled={selectedFullnameOption === \"noname\" || selectedFullnameOption === \"fullname\"}\r\n                      >\r\n                        {showedTrackedEntityAttributes(\"Last Name\")\r\n                        .filter(({ valueType }) => valueType === \"TEXT\")\r\n                        .map(({ id, displayName }) => (\r\n                          <Option key={id} value={id}>{displayName}</Option>\r\n                        ))}\r\n                      </Select>\r\n                  }\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </>\r\n            :\r\n            <>\r\n              <div className=\"administration-attribute\">\r\n                <div>\r\n                {\r\n                  fullnameOption === \"noname\" ? \"No Name\" : \r\n                    fullnameOption === \"fullname\" ? \"Fullname\" : \r\n                      fullnameOption === \"firstlastname\" ? \"First & Last Name\" : \"First, Middle & Last Name\"\r\n                }\r\n                </div>\r\n                <div className=\"administration-fullnameOption-inputs\">\r\n                  <div>\r\n                  {\r\n                    (fullnameOption === \"fullname\" || fullnameOption === \"firstlastname\" || fullnameOption === \"firstmidlastname\") ?\r\n                      allExistedTrackedEntityAttributes.find(({ id }) => formMapping.attributes[\"given_name\"] === id).displayName : \"\"\r\n                  }\r\n                  </div>\r\n                  <div>\r\n                  {\r\n                    (fullnameOption === \"firstmidlastname\") ?\r\n                      allExistedTrackedEntityAttributes.find(({ id }) => formMapping.attributes[\"middle_name\"] === id).displayName : \"\"\r\n                  }\r\n                  </div>\r\n                  <div>\r\n                  {\r\n                    (fullnameOption === \"firstlastname\" || fullnameOption === \"firstmidlastname\") ?\r\n                      allExistedTrackedEntityAttributes.find(({ id }) => formMapping.attributes[\"family_name\"] === id).displayName : \"\"\r\n                  }\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </>\r\n          }\r\n          \r\n          {defaultAttributes.slice(4,9).map((attribute,index) => {\r\n            return (\r\n              <div key={index} className=\"administration-attribute\">\r\n                <div>{attribute.name}</div>\r\n                <div>\r\n                {\r\n                  type === 'default' && programMetadata === null ? getDefaultTEAName(attribute.name) :\r\n                    <Select\r\n                      filterOption={(inputValue, option) => {\r\n                        return option.children.toLocaleLowerCase().includes(inputValue.toLocaleLowerCase());\r\n                      }}\r\n                      style={{\r\n                        width: \"100%\"\r\n                      }}\r\n                      showSearch\r\n                      onChange={(value) => {\r\n                        const existedIndex = selectedTrackedEntityAttributes.findIndex(\r\n                          ([, source]) => source === attribute.name\r\n                        );\r\n                        let newSelectedAttributes = selectedTrackedEntityAttributes.filter(\r\n                          ([destination, source]) => source || destination !== value\r\n                        );\r\n                        if (existedIndex < 0) {\r\n                          newSelectedAttributes.push([value, attribute.name]);\r\n                        } else {\r\n                          newSelectedAttributes.splice(existedIndex, 1, [value, attribute.name]);\r\n                        }\r\n                        changeTrackedEntityTypes(newSelectedAttributes);\r\n                      }}\r\n                      value={getSelectValue(attribute.name)}\r\n                      placeholder=\"Select attribute\"\r\n                      disabled={programMetadata}\r\n                    >\r\n                      {showedTrackedEntityAttributes(attribute.name)\r\n                      .filter(({ valueType, optionSet }) => (optionSet) ? attribute.valueType === \"optionSet\" : valueType === attribute.valueType)\r\n                      .map(({ id, displayName }) => (\r\n                        <Option key={id} value={id}>{displayName}</Option>\r\n                      ))}\r\n                    </Select>\r\n                }\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n          {\r\n            (selectedTrackedEntityAttributes.filter( ([,source]) => source === \"Sex\" ).length > 0) && <div className=\"administration-femaleOption\">\r\n              <div className=\"administration-femaleOption-name\">* Female Option</div>\r\n              <div>\r\n                {\r\n                  <Select\r\n                    style={{\r\n                      width: \"100%\"\r\n                    }}\r\n                    placeholder=\"Select option\"\r\n                    value={selectedFemaleOption}\r\n                    onChange={(value) => setFemaleOption(value)}\r\n                    disabled={programMetadata}\r\n                  >\r\n                    {\r\n                      (femaleOptions.length > 0) && femaleOptions.map( opt => <Option key={opt.id} value={opt.code}>{opt.name}</Option> )\r\n                    }\r\n                  </Select>\r\n                }\r\n              </div>\r\n            </div>\r\n          }\r\n          {\r\n            (type === 'default' && programMetadata === null) && <div className=\"administration-femaleOption\">\r\n              <div className=\"administration-femaleOption-name\">* Female Option</div>\r\n              <div>\r\n              {\r\n                getDefaultTEAName(\"Female Option\")\r\n              }\r\n              </div>\r\n            </div>\r\n          }\r\n        </Card>\r\n      </div>\r\n      <div>\r\n        <Card size=\"small\" title={t(\"otherAttributes\")}>\r\n          <Transfer\r\n            showSearch\r\n            pagination={{\r\n              pageSize: 20\r\n            }}\r\n            listStyle={{\r\n              width: \"100%\",\r\n              height: 500\r\n            }}\r\n            dataSource={showedTrackedEntityAttributes().map(({ id, displayName }) => ({\r\n              title: displayName,\r\n              key: id\r\n            }))}\r\n            targetKeys={selectedTrackedEntityAttributes.filter(([, source]) => !source).map(([key]) => key)}\r\n            selectedKeys={selectedKeys}\r\n            onChange={onChange}\r\n            onSelectChange={onSelectChange}\r\n            titles={[t(\"otherAvailableAttributes\"), t(\"otherSelectedAttributes\")]}\r\n            render={(item) => item.title}\r\n            footer={(props) => {\r\n              if (props.titleText === t(\"otherAvailableAttributes\"))\r\n                return (\r\n                  <div\r\n                    style={{\r\n                      display: \"flex\",\r\n                      padding: 5,\r\n                      justifyContent: \"flex-end\"\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      onClick={() => {\r\n                        window.open(\r\n                          \"../../../dhis-web-maintenance/index.html#/list/programSection/trackedEntityAttribute\"\r\n                        );\r\n                      }}\r\n                      style={{\r\n                        marginRight: 5\r\n                      }}\r\n                      size=\"small\"\r\n                      type=\"primary\"\r\n                      disabled={type === 'default' && programMetadata === null}\r\n                    >\r\n                      Add\r\n                    </Button>\r\n                    <Button\r\n                      loading={isReloading}\r\n                      size=\"small\"\r\n                      onClick={async () => {\r\n                        setIsReloading(true);\r\n                        const { trackedEntityAttributes } = await metadataApi.getTrackedEntityAttributes();\r\n                        setIsReloading(false);\r\n                        setTeas(trackedEntityAttributes);\r\n                      }}\r\n                      disabled={type === 'default' && programMetadata === null}\r\n                    >\r\n                      Reload\r\n                    </Button>\r\n                  </div>\r\n                );\r\n              return null;\r\n            }}\r\n            disabled={type === 'default' && programMetadata === null}\r\n          />\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    admin: state.admin,\r\n    allExistedTrackedEntityAttributes: state.metadata.trackedEntityAttributes,\r\n    allExistedTrackedEntityTypes: state.metadata.trackedEntityTypes,\r\n    programMetadata: state.metadata.programMetadata,\r\n    formMapping: state.metadata.formMapping,\r\n    femaleCode: state.metadata.femaleCode,\r\n    fullnameOption: state.metadata.fullnameOption\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  changeTrackedEntityTypes,\r\n  changeTrackedEntityType,\r\n  setTeas,\r\n  setFemaleOption,\r\n  setFullnameOption\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Attributes);\r\n","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Administration\\Certificate.jsx",["497"],"import { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Stepper, Step, StepButton, StepContent } from \"@mui/material\";\r\nimport { \r\n    Row, Col, Divider, \r\n    Typography, \r\n    Input, Upload, Button,\r\n    List,\r\n    Modal, message\r\n} from \"antd\";\r\nimport CustomCertificate from \"./CustomCertificate\";\r\nimport { UploadOutlined, CaretUpFilled, CaretDownFilled, CloseCircleFilled } from '@ant-design/icons';\r\nimport { changeCerticateTemplate, setCertificateLogo } from \"../../redux/actions/admin\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst Certificate = props => {\r\n    const { t } = useTranslation();\r\n    const [type,setType] = useState(0);\r\n\r\n    const [open, setOpen] = useState(null); // Body, Footer, null\r\n    const [search, setSearch] = useState(\"\");\r\n    const [label, setLabel] = useState(\"\");\r\n    const [selected, setSelected] = useState({});\r\n\r\n    const { Search } = Input;\r\n\r\n    useEffect(() => {\r\n        props.changeCerticateTemplate(props.certificateTemplateMetadata);\r\n    },[])\r\n\r\n    const handleMoveUp = (part, index) => {\r\n        // part: info | footer\r\n        let arr = props.certificateTemplateAdmin[part];\r\n        const temp = arr[index];\r\n        arr[index] = arr[index-1];\r\n        arr[index-1]=temp;\r\n        props.changeCerticateTemplate({\r\n            ...props.certificateTemplateAdmin,\r\n            [part]: arr\r\n        });\r\n    }\r\n\r\n    const handleMoveDown = (part, index) => {\r\n        // part: info | footer\r\n        let arr = props.certificateTemplateAdmin[part];\r\n        const temp = arr[index];\r\n        arr[index] = arr[index+1];\r\n        arr[index+1]=temp;\r\n        props.changeCerticateTemplate({\r\n            ...props.certificateTemplateAdmin,\r\n            [part]: arr\r\n        });\r\n    }\r\n\r\n    const handleRemoveItem = (part, index) => {\r\n        let arr = props.certificateTemplateAdmin[part];\r\n        arr.splice(index,1);\r\n        props.changeCerticateTemplate({\r\n            ...props.certificateTemplateAdmin,\r\n            [part]: arr\r\n        });\r\n    }\r\n\r\n    const handleUpdateTitle = value => {\r\n        props.changeCerticateTemplate({\r\n            ...props.certificateTemplateAdmin,\r\n            title: value\r\n        })\r\n    }\r\n\r\n    const handleAddItem = () => {\r\n        if ( label === \"\" || selected === {} ) {\r\n            message.error('ERROR Please enter the label and selected an item.');\r\n        } else {\r\n            const key = open === \"Body\" ? \"info\" : \"footer\";\r\n            props.changeCerticateTemplate({\r\n                ...props.certificateTemplateAdmin,\r\n                [key]: [...props.certificateTemplateAdmin[key],...[{\r\n                    ...selected,\r\n                    label: label\r\n                }]]\r\n            });\r\n            handleCloseModal();\r\n        }\r\n    }\r\n\r\n    const handleCloseModal = () => {\r\n        setOpen(null);\r\n        setSelected({});\r\n        setLabel(\"\");\r\n        setSearch(\"\");\r\n    }\r\n\r\n    const handleUploadLogo = img => {\r\n        const reader = new FileReader();\r\n        reader.onload = e => {\r\n            props.setCertificateLogo({ image: e.target.result });\r\n        };\r\n\r\n        reader.readAsDataURL(img);\r\n    }\r\n\r\n    const getDisplayName = data => {\r\n        if (data) return data.displayName;\r\n        else return \"undefined\";\r\n    }\r\n\r\n    return (\r\n        <div className=\"administration-certificate-container\">\r\n            {/* {console.log(props.certificateTemplate)} */}\r\n            {(props.certificateTemplateAdmin) && <Stepper nonLinear activeStep={type} orientation=\"vertical\">\r\n                <Step>\r\n                    <StepButton onClick={() => setType(0)}>{t(\"defaultCertificate\")}</StepButton>\r\n                    <StepContent>\r\n                        <Row gutter={[16, 16]}>\r\n                            <Col span={12}>\r\n                                <div className=\"administration-certificate-box\">\r\n                                    <div className=\"administration-certificate-title-setup\">\r\n                                        <div>{t(\"certificateTitle\")}</div>\r\n                                        <div><Input placeholder=\"Certificate Name\" value={props.certificateTemplateAdmin.title} onChange={e => handleUpdateTitle(e.target.value)}/></div>\r\n                                    </div>\r\n                                    <div className=\"administration-certificate-title-setup\">\r\n                                        <div>{t(\"certificateLogo\")}</div>\r\n                                        <div>\r\n                                            <Upload\r\n                                                name=\"uploadLogo\"\r\n                                                showUploadList={false}\r\n                                                beforeUpload={handleUploadLogo}\r\n                                            >\r\n                                                <Button icon={<UploadOutlined />}>{t(\"upload\")}</Button>\r\n                                            </Upload>\r\n                                        </div>\r\n                                    </div>\r\n                                    <Divider plain orientation=\"right\"><Button onClick={() => setOpen(\"Body\")}>{t(\"addItemBody\")}</Button></Divider>\r\n                                    <div className=\"administration-certificate-setup\">\r\n                                        <List \r\n                                            size=\"small\"\r\n                                            split={false}\r\n                                            dataSource={props.certificateTemplateAdmin.info}\r\n                                            renderItem={(item,index) => (\r\n                                                <List.Item\r\n                                                    actions={[\r\n                                                        <Button type=\"text\" icon={<CaretUpFilled />} disabled={( index === 0 )} onClick={() => handleMoveUp(\"info\",index)} />,\r\n                                                        <Button type=\"text\" icon={<CaretDownFilled />} disabled={( (index + 1) === props.certificateTemplateAdmin.info.length )} onClick={() => handleMoveDown(\"info\",index)} />,\r\n                                                        <Button type=\"text\" danger icon={<CloseCircleFilled />} onClick={() => handleRemoveItem(\"info\",index)} />\r\n                                                    ]}\r\n                                                >\r\n                                                    <List.Item.Meta \r\n                                                        title={item.label}\r\n                                                        description={(item.dataElement) ? `Data Element: ${item.dataElement}` : (item.trackedEntityAttribute) ? `Attribute: ${item.trackedEntityAttribute}` : `Enrollment: ${item.enrollment}`}\r\n                                                    />\r\n                                                </List.Item>\r\n                                            )}\r\n                                        />\r\n                                    </div>\r\n                                    <Divider plain orientation=\"right\"><Button onClick={() => setOpen(\"Footer\")}>{t(\"addItemFooter\")}</Button></Divider>\r\n                                    <div className=\"administration-certificate-setup\">\r\n                                        <List \r\n                                            size=\"small\"\r\n                                            split={false}\r\n                                            dataSource={props.certificateTemplateAdmin.footer}\r\n                                            renderItem={(item,index) => (\r\n                                                <List.Item\r\n                                                    actions={[\r\n                                                        <Button type=\"text\" icon={<CaretUpFilled />} disabled={( index === 0 )} onClick={() => handleMoveUp(\"footer\",index)} />,\r\n                                                        <Button type=\"text\" icon={<CaretDownFilled />} disabled={( (index + 1) === props.certificateTemplateAdmin.footer.length )} onClick={() => handleMoveDown(\"footer\",index)} />,\r\n                                                        <Button type=\"text\" danger icon={<CloseCircleFilled />} onClick={() => handleRemoveItem(\"footer\",index)} />\r\n                                                    ]}\r\n                                                >\r\n                                                    <List.Item.Meta \r\n                                                        title={item.label}\r\n                                                        description={(item.dataElement) ? `Data Element: ${item.dataElement}` : (item.trackedEntityAttribute) ? `Attribute: ${item.trackedEntityAttribute}` : `Enrollment: ${item.enrollment}`}\r\n                                                    />\r\n                                                </List.Item>\r\n                                            )}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </Col>\r\n                            <Col span={12}>\r\n                                <div className=\"administration-certificate-box\">\r\n                                    <Divider orientation=\"center\">{t(\"reviewDefaultCertificate\")}</Divider>\r\n                                    <div style={{margin: \"20x 0px\"}}>\r\n                                        <Row gutter={[16, 16]}>\r\n                                            <Col span={4}>\r\n                                                <div className=\"administration-certificate-logo\">\r\n                                                    { props.certificateTemplateAdmin.logo !== null && <img src={props.certificateTemplateAdmin.logo} alt=\"logo\" /> }\r\n                                                </div>\r\n                                            </Col>\r\n                                            <Col span={16}>\r\n                                                <Typography.Title\r\n                                                    style={{ marginBottom: 0, textAlign: \"center\" }}\r\n                                                    level={2}\r\n                                                >\r\n                                                    {props.certificateTemplateAdmin.title}\r\n                                                </Typography.Title>\r\n                                            </Col>\r\n                                            <Col span={4}></Col>\r\n                                        </Row>\r\n                                    </div>\r\n                                    <div style={{margin: \"50px 0px\"}}>\r\n                                        {/* <Divider orientation=\"left\">Body</Divider> */}\r\n                                        <Row gutter={[16, 33]}>\r\n                                            {\r\n                                                props.certificateTemplateAdmin.info.map( row => <>\r\n                                                    <Col span={10}><strong>{row.label}</strong></Col>\r\n                                                    <Col span={14}>\r\n                                                    {\r\n                                                        (row.dataElement) ? getDisplayName(props.programMetadata.programStages[0].dataElements.find(de => de.id === row.dataElement)) :\r\n                                                            (row.trackedEntityAttribute) ? getDisplayName(props.programMetadata.trackedEntityAttributes.find(attr => attr.id === row.trackedEntityAttribute)) : row.enrollment\r\n                                                    }\r\n                                                    </Col>\r\n                                                </>)\r\n                                            }\r\n                                        </Row>\r\n                                    </div>\r\n                                    <div style={{margin: \"50px 0px\"}}>\r\n                                        {/* <Divider orientation=\"left\">Footer</Divider> */}\r\n                                        <Row gutter={[8, 25]}>\r\n                                            {\r\n                                                props.certificateTemplateAdmin.footer.map( row => <>\r\n                                                    <Col style={{ textAlign: \"right\" }} offset={10} span={8}><strong>{row.label}</strong></Col>\r\n                                                    <Col style={{ textAlign: \"right\" }} span={6}>\r\n                                                    {\r\n                                                        (row.dataElement) ? getDisplayName(props.programMetadata.programStages[0].dataElements.find(de => de.id === row.dataElement)) :\r\n                                                            (row.trackedEntityAttribute) ? getDisplayName(props.programMetadata.trackedEntityAttributes.find(attr => attr.id === row.trackedEntityAttribute)) : row.enrollment\r\n                                                    }\r\n                                                    </Col>\r\n                                                </>)\r\n                                            }\r\n                                        </Row>\r\n                                    </div>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </StepContent>\r\n                </Step>\r\n                <Step>\r\n                    <StepButton onClick={() => setType(1)}>{t(\"customCertificate\")}</StepButton>\r\n                    <StepContent>\r\n                        <div className=\"administration-custom-certificate-container\">\r\n                            <CustomCertificate />\r\n                        </div>\r\n                    </StepContent>\r\n                </Step>\r\n            </Stepper>}\r\n            <Modal\r\n                width={\"50%\"}\r\n                centered\r\n                title={`${t(\"certificateAddItemTitle\")} ${open}`}\r\n                visible={open !== null}\r\n                onCancel={handleCloseModal}\r\n                onOk={handleAddItem}\r\n            >\r\n                <div className=\"administration-certificate-modal\">\r\n                    <Input style={{ width: \"100%\" }} value={label} placeholder=\"Enter Label\" onChange={e => setLabel(e.target.value)} />\r\n                </div>\r\n                <div className=\"administration-certificate-modal\">\r\n                    <Input style={{ width: \"100%\" }} disabled={true} value={selected.displayName} placeholder=\"Selected Data\" />\r\n                </div>\r\n                <div className=\"administration-certificate-modal\">\r\n                    <div className=\"administration-certificate-modal-box\">\r\n                        <div className=\"administration-certificate-modal\">\r\n                            <Search placeholder=\"Search\" style={{ width: \"100%\" }} value={search} onChange={e => setSearch(e.target.value)} />\r\n                        </div>\r\n                        <div className=\"administration-certificate-modal-list\">\r\n                            {\r\n                            [\r\n                                {id: \"enrollmentDate\", displayName: \"Enrolment Date\"}, \r\n                                {id: \"incidentDate\", displayName: \"Incident Date\"},\r\n                                {id: \"orgUnitName\", displayName: \"Organisation Unit\"}\r\n                            ].filter( it => it.displayName.toLowerCase().includes(search.toLowerCase())).length > 0 && \r\n                            <>\r\n                                <Divider orientation=\"left\">Enrollment</Divider>\r\n                                <List \r\n                                    size=\"small\"\r\n                                    split={false}\r\n                                    dataSource={[\r\n                                        {id: \"enrollmentDate\", displayName: \"Enrolment Date\"}, \r\n                                        {id: \"incidentDate\", displayName: \"Incident Date\"},\r\n                                        {id: \"orgUnitName\", displayName: \"Organisation Unit\"}\r\n                                    ].filter( it => it.displayName.toLowerCase().includes(search.toLowerCase()))}\r\n                                    renderItem={(item) => (\r\n                                        <List.Item>\r\n                                            <div className=\"administration-certificate-modal-item\" onClick={() => setSelected({\r\n                                                enrollment: item.id,\r\n                                                displayName: item.displayName\r\n                                            })}>{item.displayName}</div>\r\n                                        </List.Item>\r\n                                    )}\r\n                                />\r\n                            </>}\r\n                            {props.programMetadata.trackedEntityAttributes.filter( it => it.displayName.toLowerCase().includes(search.toLowerCase())).length > 0 && \r\n                            <>\r\n                                <Divider orientation=\"left\">Tracked Entity Attributes</Divider>\r\n                                <List \r\n                                    size=\"small\"\r\n                                    split={false}\r\n                                    dataSource={props.programMetadata.trackedEntityAttributes.filter( it => it.displayName.toLowerCase().includes(search.toLowerCase()))}\r\n                                    renderItem={(item) => (\r\n                                        <List.Item>\r\n                                            <div className=\"administration-certificate-modal-item\" onClick={() => setSelected({\r\n                                                trackedEntityAttribute: item.id,\r\n                                                displayName: item.displayName\r\n                                            })}>{item.displayName}</div>\r\n                                        </List.Item>\r\n                                    )}\r\n                                />\r\n                            </>}\r\n                            {props.programMetadata.programStages[0].dataElements.filter( it => it.displayName.toLowerCase().includes(search.toLowerCase())).length > 0 && \r\n                            <>\r\n                                <Divider orientation=\"left\">Data Elements</Divider>\r\n                                <List \r\n                                    size=\"small\"\r\n                                    split={false}\r\n                                    dataSource={props.programMetadata.programStages[0].dataElements.filter( it => it.displayName.toLowerCase().includes(search.toLowerCase()))}\r\n                                    renderItem={(item) => (\r\n                                        <List.Item>\r\n                                            <div className=\"administration-certificate-modal-item\"\r\n                                                onClick={() => setSelected({\r\n                                                    dataElement: item.id,\r\n                                                    displayName: item.displayName\r\n                                                })}\r\n                                            >{item.displayName}</div>\r\n                                        </List.Item>\r\n                                    )}\r\n                                />\r\n                            </>}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        certificateTemplateAdmin: state.admin.certificateTemplate,\r\n        certificateTemplateMetadata: state.metadata.certificateTemplate,\r\n        programMetadata: state.metadata.programMetadata\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    changeCerticateTemplate,\r\n    setCertificateLogo\r\n};\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Certificate);","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Administration\\Review.jsx",["498","499","500"],"import {\r\n  Card,\r\n  Row,\r\n  Col,\r\n  Table,\r\n  Collapse,\r\n  Switch,\r\n  // Checkbox\r\n} from \"antd\";\r\nimport { Hooks, Components } from \"tracker-capture-app-core\";\r\n/* REDUX */\r\nimport { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { defaultAttributes } from \"../../utils/const\";\r\nimport { generateDefaultMetadata, generateCustomMetadata, updateProgramIndicators, updateSQLViews } from \"../../utils/generateMetadata\";\r\nimport { setInstallingFile } from \"../../redux/actions/admin\";\r\nimport { setFormMapping } from \"../../redux/actions/metadata\";\r\nimport { useTranslation } from \"react-i18next\";\r\n/*       */\r\nconst { useApi } = Hooks;\r\nconst { LoadingMask } = Components;\r\n\r\n// Temporally here\r\nconst fixedSections = require(\"../../asset/metadata/programStageSections.json\").programStageSections.slice(6,10);\r\nconst fixedDEs = require(\"../../asset/metadata/dataElements.json\").dataElements;\r\n\r\nconst Review = ({\r\n  admin: {\r\n    trackedEntityAttributes,\r\n    dataElements,\r\n    trackedEntityType,\r\n    assignedOrgUnits,\r\n    users,\r\n    type: installType,\r\n    fullnameOption,\r\n    femaleOption\r\n    // installingFile: metadata\r\n  },\r\n  allTeas,\r\n  allExistedDataElements,\r\n  allExistedUserGroups,\r\n  setInstallingFile,\r\n  setFormMapping\r\n}) => {\r\n  const { t } = useTranslation();\r\n  const { metadataApi } = useApi();\r\n\r\n  const [metadata, setMetadata] = useState(null);\r\n  const [generateNewUID, setgenerateNewUID] = useState(false);\r\n\r\n  const getAttr = (id) => allTeas.find(({ id: attrId }) => attrId === id);\r\n  const getUser = (id) => allExistedUserGroups.find(({ id: userId }) => userId === id);\r\n  const getDE = (id) => allExistedDataElements.find(({ id: deId }) => deId === id);\r\n  \r\n  const getUserGroupAccesses = () => {\r\n    let userAccesses = {};\r\n    for ( const group in users ) {\r\n      users[group].forEach( user => {\r\n        if ( !userAccesses[user] ) userAccesses[user] = [group];\r\n        else userAccesses[user].push(group);\r\n      });\r\n    }\r\n    let userGroupAccesses = [];\r\n    for ( const user in userAccesses ) {\r\n      let access = \"r-------\";\r\n      userAccesses[user].forEach( a => {\r\n        if ( a === \"admin\" ) access = access.substring(0,1) + \"wr\" + access.substring(3,8); \r\n        if ( a === \"capture\" ) access = access.substring(0,2) + \"rw\" + access.substring(4,8);\r\n        if ( a === \"view\" ) access = access.substring(0,2) + \"r\" + access.substring(3,8);\r\n      })\r\n      userGroupAccesses.push({\r\n        id: user,\r\n        access: access\r\n      })\r\n    }\r\n    return userGroupAccesses;\r\n  }\r\n    \r\n  useEffect( () => {\r\n    (async () => {\r\n      setMetadata(null);\r\n      let data = {};\r\n\r\n      // generate metadata (base on setting stored in redux)\r\n      if (installType === \"custom\") {\r\n        console.log(trackedEntityAttributes);\r\n        const ageAttribute = await metadataApi.get(`/api/trackedEntityAttributes.json`, { paging: false }, [`filter=id:eq:${trackedEntityAttributes.find(([,name]) => name === \"Age in years\")[0]}`,\"fields=:owner,!created,!lastUpdated,!createdBy,!lastUpdatedBy\"]);\r\n        data = generateCustomMetadata({trackedEntityAttributes,dataElements,trackedEntityType,fullnameOption}, generateNewUID,ageAttribute.trackedEntityAttributes[0]);\r\n        data.metadata.programIndicators = updateProgramIndicators(data.metadata.programIndicators,trackedEntityAttributes.find(([,name]) => name === \"Date of Birth\")[0],trackedEntityAttributes.find(([,name]) => name === \"Sex\")[0],femaleOption);\r\n        data.metadata.sqlViews = updateSQLViews(data.metadata.sqlViews,trackedEntityAttributes.find(([,name]) => name === \"Age in years\")[0],trackedEntityAttributes.find(([,name]) => name === \"Sex\")[0],femaleOption);\r\n      }\r\n      else {\r\n        data = generateDefaultMetadata(false,generateNewUID);\r\n      }\r\n\r\n      data.metadata = {\r\n        ...data.metadata,\r\n        programs: [{\r\n          ...data.metadata.programs[0],\r\n          organisationUnits: assignedOrgUnits.map( o => {return { id : o.substring(o.length-11,o.length) }}),\r\n          userGroupAccesses: getUserGroupAccesses()\r\n        }]\r\n      };\r\n\r\n      // local state\r\n      setMetadata(data.metadata);\r\n\r\n      // redux\r\n      setInstallingFile(data.metadata);\r\n      setFormMapping(data.formMapping);\r\n    })();\r\n  }, [generateNewUID]);\r\n  \r\n  const getSwitchValue = section => {\r\n    const sectionValue = dataElements.frameB.defaultSections.find(\r\n      ({name}) => section.name === name\r\n    );\r\n    if (sectionValue) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const renderCustomAttributesStep = () => {\r\n    const otherAttributes = trackedEntityAttributes.filter(\r\n      ([, source]) => !source\r\n    );\r\n    const defAttrs = trackedEntityAttributes.filter(\r\n      ([des, source]) => source && des !== ''\r\n    );\r\n    return Array.from(\r\n      {\r\n        length: Math.max(otherAttributes.length, defAttrs.length),\r\n      },\r\n      (_, index) => {\r\n        const defaultAttr = defAttrs[index];\r\n        const defaultAttrName = (defaultAttr[1] === 'First Name' && fullnameOption) ? \"Full Name\" : defaultAttr[1];\r\n        return {\r\n          key: index,\r\n          default: defaultAttrName,\r\n          name: getAttr(defaultAttr[0]) ? getAttr(defaultAttr[0]).displayName : \"\",\r\n          other: otherAttributes[index]\r\n            ? getAttr(otherAttributes[index][0]).displayName\r\n            : \"\",\r\n        };\r\n      }\r\n    );\r\n  };\r\n\r\n  const renderDefaultAttributesStep = () => {\r\n    // return fullnameOption ? \r\n    // [\r\n    //   {key:0,default:\"Unique ID\",name:metadata.trackedEntityAttributes.find(tea => tea.name === \"COD System ID\").name,other:\"\"},\r\n    //   {key:1,default:\"Full Name\",name:metadata.trackedEntityAttributes.find(tea => tea.name === \"Given name\").name,other:\"\"},\r\n    //   {key:2,default:\"Date of Birth\",name:metadata.trackedEntityAttributes.find(tea => tea.name === \"Date of birth\").name,other:\"\"},\r\n    //   {key:3,default:\"Date of Birth is estimated\",name:metadata.trackedEntityAttributes.find(tea => tea.name === \"Date of birth is estimated\").name,other:\"\"},\r\n    //   {key:4,default:\"Age in years\",name:metadata.trackedEntityAttributes.find(tea => tea.name === \"Age (years)\").name,other:\"\"},\r\n    //   {key:5,default:\"Address\",name:metadata.trackedEntityAttributes.find(tea => tea.name === \"Address (current)\").name,other:\"\"},\r\n    //   {key:6,default:\"Sex\",name:metadata.trackedEntityAttributes.find(tea => tea.name === \"Sex\").name,other:\"\"}\r\n    // ] \r\n    // : \r\n    return [\r\n      {key:0,default:\"Unique ID\",name:metadata.trackedEntityAttributes.find(tea => tea.name === \"COD System ID\").name,other:\"\"},\r\n      {key:1,default:\"First Name\",name:metadata.trackedEntityAttributes.find(tea => tea.name === \"Given name\").name,other:\"\"},\r\n      {key:2,default:\"Last Name\",name:metadata.trackedEntityAttributes.find(tea => tea.name === \"Family name\").name,other:\"\"},\r\n      {key:3,default:\"Date of Birth\",name:metadata.trackedEntityAttributes.find(tea => tea.name === \"Date of birth\").name,other:\"\"},\r\n      {key:4,default:\"Date of Birth is estimated\",name:metadata.trackedEntityAttributes.find(tea => tea.name === \"Date of birth is estimated\").name,other:\"\"},\r\n      {key:5,default:\"Age in years\",name:metadata.trackedEntityAttributes.find(tea => tea.name === \"Age (years)\").name,other:\"\"},\r\n      {key:6,default:\"Address\",name:metadata.trackedEntityAttributes.find(tea => tea.name === \"Address (current)\").name,other:\"\"},\r\n      {key:7,default:\"Sex\",name:metadata.trackedEntityAttributes.find(tea => tea.name === \"Sex\").name,other:\"\"}\r\n    ]\r\n  } \r\n\r\n  return (\r\n    <div className=\"administration-reviewfinish-container\">\r\n      {\r\n        (metadata === null) ? <LoadingMask /> : \r\n        <Row \r\n          style={{ \r\n            width: \"100%\", \r\n            height: \"100%\"\r\n          }} \r\n          gutter={[16, 24]}\r\n        >\r\n          {/* <Col span={18}\r\n            style={{ \r\n              width: \"100%\", \r\n              // height: \"100%\", \r\n              // overflow: \"auto\",\r\n              margin: \"auto\",\r\n              textAlign: \"center\"\r\n            }}  \r\n          >\r\n            <Checkbox checked={generateNewUID} onChange={() => setgenerateNewUID(!generateNewUID)}>Generate new UID for the installing metadata</Checkbox>\r\n          </Col> */}\r\n          <Col span={18}\r\n            style={{ \r\n              width: \"100%\", \r\n              height: \"100%\", \r\n              // overflow: \"auto\",\r\n              margin: \"auto\" \r\n            }} \r\n          >\r\n            <Card\r\n              style={{ marginBottom: 10 }}\r\n              type=\"inner\"\r\n              title={t(\"step2Attribute\")}\r\n            >\r\n              <Row>\r\n                <Table\r\n                  size=\"small\"\r\n                  bordered\r\n                  pagination={false}\r\n                  columns={[\r\n                    {\r\n                      title: t(\"defaultAttribute\"),\r\n                      colSpan: 2,\r\n                      dataIndex: \"default\"\r\n                    },\r\n                    {\r\n                      colSpan: 0,\r\n                      dataIndex: \"name\"\r\n                    },\r\n                    {\r\n                      title: t(\"otherAttributes\"),\r\n                      dataIndex: \"other\"\r\n                    },\r\n                  ]}\r\n                  dataSource={ installType === \"custom\" ? renderCustomAttributesStep() : renderDefaultAttributesStep()}\r\n                />\r\n              </Row>\r\n            </Card>\r\n            <Card style={{ marginBottom: 10 }} type=\"inner\" title={t(\"step3FrameA\")}>\r\n              <Row>\r\n                <Col xs={12}>\r\n                  <Card\r\n                    type=\"inner\"\r\n                    style={{ height: 255, overflow: \"auto\" }}\r\n                    size=\"small\"\r\n                    title={t(\"defaultSectionsInFrameB\")}\r\n                  >\r\n                    <Collapse\r\n                      // style={{ height: 500, overflow: \"auto\" }}\r\n                      defaultActiveKey={[]}\r\n                    >\r\n                      {metadata.programStageSections.slice(0,6).map( section => {\r\n                        return (\r\n                          <Collapse.Panel\r\n                            key={section.id}\r\n                            header={\r\n                              <div>\r\n                                <Switch\r\n                                  disabled\r\n                                  checked={true}\r\n                                  // onChange={changeSwitch(section)}\r\n                                  checkedChildren=\"Include\"\r\n                                  unCheckedChildren=\"Skip\"\r\n                                  style={{ marginRight: 8 }}\r\n                                />\r\n                                <strong>{section.name}</strong>\r\n                              </div>\r\n                            }\r\n                          >\r\n                            {section.dataElements.map( de => (\r\n                              <div key={de.id} className=\"administration-attribute\">\r\n                                {\r\n                                  metadata.dataElements.find(\r\n                                    ({ id }) => id === de.id\r\n                                  ).name\r\n                                }\r\n                              </div>\r\n                            ))}\r\n                          </Collapse.Panel>\r\n                        );\r\n                      })}\r\n                    </Collapse>\r\n                  </Card>\r\n                </Col>\r\n                <Col xs={12}>\r\n                  <Card\r\n                    type=\"inner\"\r\n                    style={{ height: 255, overflow: \"auto\" }}\r\n                    size=\"small\"\r\n                    title={t(\"otherSectionsInFrameA\")}\r\n                  >\r\n                    {(installType === \"custom\" ) && \r\n                      <Collapse defaultActiveKey={[\"1\"]}>\r\n                        {dataElements.frameA.otherSections.map(([name, des], index) => (\r\n                          <Collapse.Panel key={index} header={name}>\r\n                            <Table\r\n                              size=\"small\"\r\n                              bordered\r\n                              showHeader={false}\r\n                              pagination={false}\r\n                              columns={[\r\n                                {\r\n                                  dataIndex: 0\r\n                                }\r\n                              ]}\r\n                              dataSource={des.map((id) => [getDE(id).displayName])}\r\n                            />\r\n                          </Collapse.Panel>\r\n                        ))}\r\n                      </Collapse>\r\n                    }\r\n                  </Card>\r\n                </Col>\r\n              </Row>\r\n            </Card>\r\n            <Card style={{ marginBottom: 10 }} type=\"inner\" title={t(\"step4FrameB\")}>\r\n              <Row>\r\n                <Col xs={12}>\r\n                  <Card\r\n                    type=\"inner\"\r\n                    style={{ height: 255, overflow: \"auto\" }}\r\n                    size=\"small\"\r\n                    title={t(\"defaultSectionsInFrameB\")}\r\n                  >\r\n                    <Collapse\r\n                      // style={{ height: 500, overflow: \"auto\" }}\r\n                      defaultActiveKey={[]}\r\n                    >\r\n                      {fixedSections.map( section => {\r\n                        return (\r\n                          <Collapse.Panel\r\n                            key={section.id}\r\n                            header={\r\n                              <div>\r\n                                <Switch\r\n                                  disabled\r\n                                  checked={installType === \"default\" ? true : getSwitchValue(section)}\r\n                                  // onChange={changeSwitch(section)}\r\n                                  checkedChildren=\"Include\"\r\n                                  unCheckedChildren=\"Skip\"\r\n                                  style={{ marginRight: 8 }}\r\n                                />\r\n                                <strong>{section.name}</strong>\r\n                              </div>\r\n                            }\r\n                          >\r\n                            {section.dataElements.map( de => (\r\n                              <div key={de.id} className=\"administration-attribute\">\r\n                                {\r\n                                  fixedDEs.find(\r\n                                    ({ id }) => id === de.id\r\n                                  ).name\r\n                                  // console.log(de)\r\n                                }\r\n                              </div>\r\n                            ))}\r\n                          </Collapse.Panel>\r\n                        );\r\n                      })}\r\n                    </Collapse>\r\n                  </Card>\r\n                </Col>\r\n                <Col xs={12}>\r\n                  <Card\r\n                    type=\"inner\"\r\n                    style={{ height: 255, overflow: \"auto\" }}\r\n                    size=\"small\"\r\n                    title={t(\"otherSectionsInFrameB\")}\r\n                  >\r\n                    {(installType === \"custom\" ) && \r\n                      <Collapse>\r\n                        {dataElements.frameB.otherSections.map(([name,des], index) => {\r\n                          return (\r\n                            <Collapse.Panel key={index} header={name}>\r\n                              <Table\r\n                                size=\"small\"\r\n                                bordered\r\n                                showHeader={false}\r\n                                pagination={false}\r\n                                columns={[\r\n                                  {\r\n                                    dataIndex: 0\r\n                                  }\r\n                                ]}\r\n                                dataSource={des.map( de => [\r\n                                  getDE(de).displayName\r\n                                ])}\r\n                              />\r\n                            </Collapse.Panel>\r\n                          );\r\n                        })}\r\n                      </Collapse>\r\n                    }\r\n                  </Card>\r\n                </Col>\r\n              </Row>\r\n            </Card>\r\n            <Card\r\n              style={{ marginBottom: 10 }}\r\n              type=\"inner\"\r\n              title={t(\"step5OUs\")}\r\n            >\r\n              <div>\r\n                Number of OrgUnits assigned:{\" \"}\r\n                <strong>{assignedOrgUnits.length}</strong> org units\r\n              </div>\r\n            </Card>\r\n            <Card\r\n              style={{ marginBottom: 10 }}\r\n              type=\"inner\"\r\n              title={t(\"step6Users\")}\r\n            >\r\n              <Row>\r\n                <Col xs={24}>\r\n                  <Table\r\n                    size=\"small\"\r\n                    scroll={{\r\n                      y: \"calc(255px - 39px)\",\r\n                    }}\r\n                    bordered\r\n                    // showHeader={false}\r\n                    header={t(\"adminGroup\")}\r\n                    pagination={false}\r\n                    columns={[\r\n                      {\r\n                        title: t(\"adminGroup\"),\r\n                        dataIndex: \"admin\",\r\n                      },\r\n                      {\r\n                        title: t(\"captureGroup\"),\r\n                        dataIndex: \"capture\",\r\n                      },\r\n                      {\r\n                        title: t(\"viewGroup\"),\r\n                        dataIndex: \"view\",\r\n                      },\r\n                    ]}\r\n                    dataSource={Array.from(\r\n                      {\r\n                        length: Math.max(\r\n                          users.admin.length,\r\n                          users.capture.length,\r\n                          users.view.length\r\n                        ),\r\n                      },\r\n                      (_, index) => {\r\n                        return {\r\n                          key: index,\r\n                          admin: users.admin[index]\r\n                            ? getUser(users.admin[index]).displayName\r\n                            : \"\",\r\n                          capture: users.capture[index]\r\n                            ? getUser(users.capture[index]).displayName\r\n                            : \"\",\r\n                          view: users.view[index]\r\n                            ? getUser(users.view[index]).displayName\r\n                            : \"\",\r\n                        };\r\n                      }\r\n                    )}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  console.log(state);\r\n  return {\r\n    admin: state.admin,\r\n    allTeas: state.metadata.trackedEntityAttributes,\r\n    allExistedDataElements: state.metadata.dataElements,\r\n    allExistedUserGroups: state.metadata.userGroups,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  setInstallingFile,\r\n  setFormMapping\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Review);\r\n","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Administration\\Finish.jsx",["501","502"],"import { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n    Result,\r\n    Modal, \r\n    Button\r\n    // Row,\r\n    // Col,\r\n    // Button,\r\n    // Checkbox\r\n} from \"antd\";\r\nimport { CloseCircleOutlined, CheckCircleOutlined } from '@ant-design/icons';\r\nimport { Hooks, Components } from \"tracker-capture-app-core\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { setProgramMetadata, getICD11Options, setFemaleCode, setCertificateTemplate, setTeas, setTrackerDataElements } from \"../../redux/actions/metadata\";\r\nimport { setUserRole } from \"../../redux/actions/user\";\r\n// import { getICD11Options } from \"../../redux/actions/admin\";\r\nconst { useApi } = Hooks;\r\nconst { LoadingMask } = Components;\r\n\r\nconst Finish = ({\r\n    open,\r\n    metadata,\r\n    programMetadata,\r\n    formMapping,\r\n    femaleOption,\r\n    fullnameOption,\r\n    setProgramMetadata,\r\n    getICD11Options,\r\n    setFemaleCode,\r\n    setCertificateTemplate, setTeas, setTrackerDataElements, setUserRole\r\n}) => {\r\n    const { t } = useTranslation();\r\n    const { metadataApi } = useApi();\r\n    \r\n    const [results, setResults] = useState({});\r\n    const [status, setStatus] = useState({\r\n        title: t(\"installing\"),\r\n        subTitle: t(\"waitForInstalling\"),\r\n        status: \"installing\"\r\n    })\r\n\r\n    const importMetadata = async () => {\r\n        let temp = {};\r\n\r\n        setStatus({...status, subTitle: \"Loading metadata ...\"});\r\n        const icd11Options = require(\"../../asset/metadata/icd11_options.json\");\r\n        \r\n        if (metadata[\"attributes\"]) {\r\n            setStatus({...status, subTitle: t(\"importAttributes\")});\r\n            await metadataApi.push(`/api/metadata`, { attributes: metadata[\"attributes\"]})\r\n            .then(response => {\r\n                temp = {\r\n                    ...temp,\r\n                    attributes: response\r\n                };\r\n                setResults(temp);\r\n            });\r\n        }\r\n        if (metadata[\"legendSets\"]) {\r\n            setStatus({...status, subTitle: t(\"legendSets\")});\r\n            await metadataApi.push(`/api/metadata`, { legendSets: metadata[\"legendSets\"]})\r\n            .then(response => {\r\n                temp = {\r\n                    ...temp,\r\n                    legendSets: response\r\n                };\r\n                setResults(temp);\r\n            });\r\n        }\r\n        if (metadata[\"optionSets\"]) {\r\n            setStatus({...status, subTitle: t(\"importOptionSets\")});\r\n            await metadataApi.push(`/api/metadata`, { optionSets: metadata[\"optionSets\"]})\r\n            .then(response => {\r\n                temp = {\r\n                    ...temp,\r\n                    optionSets: response\r\n                };\r\n                setResults(temp);\r\n            });\r\n        }\r\n\r\n        // metadataApi.push(`/api/metadata`, icd11Options )\r\n        // .then(response => {\r\n        //     temp = {\r\n        //         ...temp,\r\n        //         icd11Options: response\r\n        //     };\r\n        //     setResults(temp);\r\n        // });\r\n        metadataApi.push(`/api/metadata?importStrategy=CREATE_AND_UPDATE&async=true`, icd11Options )\r\n        .then(async response => {\r\n            let importComplete = false;\r\n            while (!importComplete) {\r\n                const importReport = await metadataApi.get(response.response.relativeNotifierEndpoint);\r\n                if ( importReport.find(report => report.completed) ) {\r\n                    importComplete = true;\r\n                    temp = {\r\n                        ...temp,\r\n                        icd11Options: response\r\n                    };\r\n                    setResults(temp);\r\n                }\r\n                else {\r\n                    if ( Object.keys(results).length === Object.keys(metadata).length ) {\r\n                        setStatus({...status, subTitle: \"Import ICD11 options\"});\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        if (metadata[\"options\"]) {\r\n            setStatus({...status, subTitle: t(\"importOptions\")});\r\n            await metadataApi.push(`/api/metadata`, { options: metadata[\"options\"]})\r\n            .then(async response => {\r\n                temp = {\r\n                    ...temp,\r\n                    options: response\r\n                };\r\n                setResults(temp);\r\n            });\r\n        }\r\n\r\n        if (metadata[\"trackedEntityAttributes\"]) {\r\n            setStatus({...status, subTitle: t(\"importTrackedEntityAttributes\")});\r\n            await metadataApi.push(`/api/metadata`, { trackedEntityAttributes: metadata[\"trackedEntityAttributes\"]})\r\n            .then(response => {\r\n                temp = {\r\n                    ...temp,\r\n                    trackedEntityAttributes: response\r\n                };\r\n                setResults(temp);\r\n            });\r\n        }\r\n        if (metadata[\"trackedEntityTypes\"]) {\r\n            setStatus({...status, subTitle: t(\"importTrackedEntityTypes\")});\r\n            await metadataApi.push(`/api/metadata`, { trackedEntityTypes: metadata[\"trackedEntityTypes\"]})\r\n            .then(response => {\r\n                temp = {\r\n                    ...temp,\r\n                    trackedEntityTypes: response\r\n                };\r\n                setResults(temp);\r\n            });\r\n        }\r\n        if (metadata[\"dataElements\"]) {\r\n            setStatus({...status, subTitle: t(\"importDataElements\")});\r\n            await metadataApi.push(`/api/metadata`, { dataElements: metadata[\"dataElements\"]})\r\n            .then(response => {\r\n                temp = {\r\n                    ...temp,\r\n                    dataElements: response\r\n                };\r\n                setResults(temp);\r\n            });\r\n        }\r\n        if (metadata[\"programs\"]) {\r\n            setStatus({...status, subTitle: t(\"importPrograms\")});\r\n            await metadataApi.push(`/api/metadata`, { programs: metadata[\"programs\"]})\r\n            .then(response => {\r\n                temp = {\r\n                    ...temp,\r\n                    programs: response\r\n                };\r\n                setResults(temp);\r\n            });\r\n        }\r\n        if (metadata[\"programStages\"]) {\r\n            setStatus({...status, subTitle: t(\"importProgramStages\")});\r\n            await metadataApi.push(`/api/metadata`, { programStages: metadata[\"programStages\"]})\r\n            .then(response => {\r\n                temp = {\r\n                    ...temp,\r\n                    programStages: response\r\n                };\r\n                setResults(temp);\r\n            });\r\n        }\r\n        if (metadata[\"programStageSections\"]) {\r\n            setStatus({...status, subTitle: t(\"importProgramStageSections\")});\r\n            await metadataApi.push(`/api/metadata`, { programStageSections: metadata[\"programStageSections\"]})\r\n            .then(response => {\r\n                temp = {\r\n                    ...temp,\r\n                    programStageSections: response\r\n                };\r\n                setResults(temp);\r\n            });\r\n        }\r\n        if (metadata[\"programIndicators\"]) {\r\n            setStatus({...status, subTitle: t(\"programIndicators\")});\r\n            await metadataApi.push(`/api/metadata`, { programIndicators: metadata[\"programIndicators\"]})\r\n            .then(response => {\r\n                temp = {\r\n                    ...temp,\r\n                    programIndicators: response\r\n                };\r\n                setResults(temp);\r\n            });\r\n        }\r\n        if (metadata[\"indicatorTypes\"]) {\r\n            setStatus({...status, subTitle: t(\"indicatorTypes\")});\r\n            await metadataApi.push(`/api/metadata`, { indicatorTypes: metadata[\"indicatorTypes\"]})\r\n            .then(response => {\r\n                temp = {\r\n                    ...temp,\r\n                    indicatorTypes: response\r\n                };\r\n                setResults(temp);\r\n            });\r\n        }\r\n        if (metadata[\"indicators\"]) {\r\n            setStatus({...status, subTitle: t(\"indicators\")});\r\n            await metadataApi.push(`/api/metadata`, { indicators: metadata[\"indicators\"]})\r\n            .then(response => {\r\n                temp = {\r\n                    ...temp,\r\n                    indicators: response\r\n                };\r\n                setResults(temp);\r\n            });\r\n        }\r\n        if (metadata[\"sqlViews\"]) {\r\n            setStatus({...status, subTitle: t(\"sqlViews\")});\r\n            await metadataApi.push(`/api/metadata`, { sqlViews: metadata[\"sqlViews\"]})\r\n            .then(response => {\r\n                temp = {\r\n                    ...temp,\r\n                    sqlViews: response\r\n                };\r\n                setResults(temp);\r\n            });\r\n        }\r\n        if (metadata[\"optionGroups\"]) {\r\n            setStatus({...status, subTitle: t(\"optionGroups\")});\r\n            await metadataApi.push(`/api/metadata`, { optionGroups: metadata[\"optionGroups\"]})\r\n            .then(response => {\r\n                temp = {\r\n                    ...temp,\r\n                    optionGroups: response\r\n                };\r\n                setResults(temp);\r\n            });\r\n        }\r\n        if (metadata[\"optionGroupSets\"]) {\r\n            setStatus({...status, subTitle: t(\"optionGroupSets\")});\r\n            await metadataApi.push(`/api/metadata`, { optionGroupSets: metadata[\"optionGroupSets\"]})\r\n            .then(response => {\r\n                temp = {\r\n                    ...temp,\r\n                    optionGroupSets: response\r\n                };\r\n                setResults(temp);\r\n            });\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if ( open ) {\r\n            if ( programMetadata === null && status.status === \"installing\" ) {\r\n                importMetadata();\r\n            } else {\r\n                setStatus({\r\n                    title: t(\"complete\"),\r\n                    subTitle: `${t(\"programID\")} ${programMetadata.id}`,\r\n                    status: \"finish\"\r\n                })\r\n            }\r\n        }\r\n    }, [open])\r\n\r\n    useEffect(() => {\r\n        if ( open && Object.keys(results).length === ( Object.keys(metadata).length + 1 ) ) {\r\n\r\n            const certtificateTemplate = {\r\n                title: \"Medical Certificate of Cause of Death - specimen\",\r\n                logo: null,\r\n                info: [{\r\n                    label: \"Date of Death\",\r\n                    enrollment: \"incidentDate\"\r\n                },\r\n                {\r\n                    label: \"Reported Date\",\r\n                    enrollment: \"enrollmentDate\"\r\n                },\r\n                {\r\n                    label: \"COD System ID\",\r\n                    trackedEntityAttribute: formMapping.attributes[\"system_id\"]\r\n                },\r\n                {\r\n                    label: \"Date of Birth\",\r\n                    trackedEntityAttribute: formMapping.attributes[\"dob\"]\r\n                },\r\n                {\r\n                    label: \"Date of Birth is estimated\",\r\n                    trackedEntityAttribute: formMapping.attributes[\"estimated_dob\"]\r\n                },\r\n                {\r\n                    label: \"Age in years\",\r\n                    trackedEntityAttribute: formMapping.attributes[\"age\"]\r\n                },\r\n                {\r\n                    label: \"Address\",\r\n                    trackedEntityAttribute: formMapping.attributes[\"address\"]\r\n                },\r\n                {\r\n                    label: \"Sex\",\r\n                    trackedEntityAttribute: formMapping.attributes[\"sex\"]\r\n                },\r\n                {\r\n                    label: \"Underlying Cause of Death\",\r\n                    dataElement: formMapping.dataElements[\"underlyingCOD\"]\r\n                },\r\n                {\r\n                    label: \"ICD-11\",\r\n                    dataElement: formMapping.dataElements[\"underlyingCOD_code\"]\r\n                }],\r\n                footer: [{\r\n                    label: \"Institution Name\",\r\n                    enrollment: \"orgUnit\"\r\n                },\r\n                {\r\n                    label: \"Certificate Date\",\r\n                    enrollment: \"enrollmentDate\"\r\n                }]\r\n            }\r\n\r\n            Promise.all([\r\n                metadataApi.push(\"/api/dataStore/WHO_ICD11_COD/program\", {id: metadata[\"programs\"][0].id}, \"PUT\"),\r\n                metadataApi.push(\"/api/dataStore/WHO_ICD11_COD/femaleOption\", {code: femaleOption}, \"PUT\"),\r\n                metadataApi.push(\"/api/dataStore/WHO_ICD11_COD/icdOptionSet\", {id: metadata[\"optionSets\"].find( ({code}) => code === \"icd11\").id}, \"PUT\"),\r\n                metadataApi.push(\"/api/dataStore/WHO_ICD11_COD/formMapping\", formMapping, \"PUT\"),\r\n                metadataApi.get(\"/api/options.json\", { paging: false }, [\r\n                    \"fields=id,name,code,attributeValues[value,attribute[id]]\",\r\n                    `filter=optionSet.id:eq:${metadata[\"optionSets\"].find( ({code}) => code === \"icd11\").id}`\r\n                ]),\r\n                metadataApi.push(\r\n                    \"/api/dataStore/WHO_ICD11_COD/certificateTemplate\",\r\n                    { certificate: certtificateTemplate },\r\n                    \"PUT\"\r\n                ),\r\n                metadataApi.push(\"/api/dataStore/WHO_ICD11_COD/fullnameOption\", {fullnameOption: fullnameOption}, \"PUT\")\r\n            ])\r\n            .then( res => {\r\n                setFemaleCode(femaleOption);\r\n                setCertificateTemplate(certtificateTemplate);\r\n                getICD11Options(res[4].options);\r\n                setStatus({\r\n                    title: t(\"complete\"),\r\n                    subTitle: `${t(\"programID\")} ${metadata[\"programs\"][0].id}`,\r\n                    status: \"finish\"\r\n                });\r\n            });\r\n        }\r\n    }, [results])\r\n\r\n    return (\r\n        <Modal\r\n            width={\"50%\"}\r\n            bodyStyle={{\r\n                height: \"100%\",\r\n            }}\r\n            centered\r\n            visible={open}\r\n            closable={false}\r\n            footer={false}\r\n        >\r\n            <div style={{\r\n                height: \"55vh\"\r\n            }}>\r\n                <Result\r\n                icon={( status.status === \"installing\" ) ? <LoadingMask /> : <CheckCircleOutlined />}\r\n                title={status.title}\r\n                subTitle={status.subTitle}\r\n                extra={<Button \r\n                    disabled={status.status !== \"finish\"} \r\n                    type=\"primary\" key=\"complete\"\r\n                    onClick={() => {\r\n                        setStatus({\r\n                            ...status,\r\n                            status: \"installing\",\r\n                            title: \"Loading metadata\"\r\n                        });\r\n                        Promise.all([\r\n                            metadataApi.get(\"/api/trackedEntityAttributes.json\", { paging: false }, [\"fields=id,displayName,valueType,optionSet,formName\"]),\r\n                            metadataApi.getTrackerDataElements(),\r\n                            metadataApi.getProgramMetadata(metadata[\"programs\"][0].id),\r\n                            metadataApi.getMe()\r\n                        ]).then( results => {\r\n                            setTeas(results[0].trackedEntityAttributes);\r\n                            setTrackerDataElements(results[1].dataElements);\r\n                            setProgramMetadata(results[2]);\r\n                            setStatus({\r\n                                ...status,\r\n                                status: \"finish\",\r\n                                title: \"Install Complete\"\r\n                            });\r\n                            let roles = {\r\n                                admin: false,\r\n                                data: false,\r\n                                view: false\r\n                              };\r\n                            results[3].userGroups.forEach( userGroup => {\r\n                            const role = results[2].userGroupAccesses.find( ({id}) => id === userGroup.id );\r\n                            if ( role ) {\r\n                                if ( role.access.charAt(1) === 'w' ) {\r\n                                roles = {\r\n                                    ...roles,\r\n                                    admin: true\r\n                                }\r\n                                }\r\n                                if ( role.access.charAt(3) === 'w' ) {\r\n                                roles = {\r\n                                    ...roles,\r\n                                    data: true\r\n                                }\r\n                                }\r\n                                if ( role.access.charAt(0) === 'r' && role.access.charAt(2) === 'r'  ) {\r\n                                roles = {\r\n                                    ...roles,\r\n                                    view: true\r\n                                }\r\n                                }\r\n                            }\r\n                            });\r\n                            setUserRole(roles);\r\n                        });\r\n                    }}\r\n                >\r\n                    Finish\r\n                </Button>}\r\n            >\r\n                {\r\n                    ( programMetadata === null || Object.keys(results).length !== 0 ) && Object.keys(results).map( (key, index) => \r\n                    (<div key={index}>\r\n                    {\r\n                        (results[key].status === \"OK\") ? <CheckCircleOutlined style={{color: \"blue\"}} /> : <CloseCircleOutlined style={{color: \"red\"}} />\r\n                    }\r\n                    {\r\n                        ` ${key}`\r\n                    }\r\n                    </div>))\r\n                }\r\n            </Result>\r\n            </div>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    // console.log(state)\r\n    return {\r\n        metadata: state.admin.installingFile,\r\n        formMapping: state.metadata.formMapping,\r\n        femaleOption: state.admin.femaleOption,\r\n        fullnameOption: state.admin.fullnameOption,\r\n        programMetadata: state.metadata.programMetadata\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    setProgramMetadata,\r\n    getICD11Options,\r\n    setFemaleCode,\r\n    setCertificateTemplate,\r\n    setTeas,\r\n    setTrackerDataElements,\r\n    setUserRole\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Finish);","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\utils\\generateChildChart.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\utils.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\redux\\actions\\data\\index.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\WidgetContainer\\WidgetContainer.jsx",["503","504"],"import React, { useState, useEffect } from \"react\";\r\nimport { SyncLoader } from \"react-spinners\";\r\nimport { IoChevronDown } from \"react-icons/io5\";\r\nimport { Bar, StackedBarChart, VerticalStackedBarChart, DoubleStackedBarChart, CombinedChart, Map, Statistic, Line, Pie, Html, Treemap, Bublemap, Nodata } from \"../Widget\";\r\nimport { Menu, Dropdown, Tooltip } from \"antd\";\r\nimport IconButton from \"../IconButton\";\r\nimport \"./WidgetContainer.css\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport generateChildCharts from \"../utils/generateChildCharts\";\r\nimport { analyticData } from \"../../../utils/const\";\r\nimport { Hooks } from \"tracker-capture-app-core\";\r\nconst { useApi } = Hooks;\r\n\r\n//Why using forward ref: https://github.com/react-grid-layout/react-grid-layout#custom-child-components-and-draggable-handles\r\nconst WidgetContainer = React.forwardRef(({ style, className, selectedOrgUnit, formMapping, femaleCode, ...props }, ref) => {\r\n  const { metadataApi } = useApi();\r\n  \r\n  const [selectedChild, setSelectedChild] = useState(0);\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const { children } = props.widget;\r\n  const currentChild = children[selectedChild];\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      setLoading(true);\r\n\r\n      // Generate template\r\n      const result = await currentChild.getData();\r\n      console.log(femaleCode);\r\n\r\n      let flag = true;\r\n      if ( analyticData[`page${props.widget.i.split(\".\")[0]}`] ) {\r\n        const page = analyticData[`page${props.widget.i.split(\".\")[0]}`];\r\n        if ( page[props.widget.i] && props.widget.i.split(\".\")[0] !== \"2\" ) {\r\n          flag = false;\r\n\r\n          if ( page[props.widget.i] === \"no_data\" ) {\r\n            setData({\r\n              ...{\r\n                data: generateChildCharts(\r\n                  props.widget.i,\r\n                  null,\r\n                  result,\r\n                  femaleCode\r\n                )\r\n              }\r\n            })\r\n          }\r\n          else {\r\n            let url = currentChild[\"codes\"] ? page[props.widget.i].replace(\"[CAUSE_GROUP_CODE]\",currentChild[\"codes\"]).replaceAll(\"[YEAR]\",props.period) : page[props.widget.i].replaceAll(\"[YEAR]\",props.period);\r\n            if (url.includes(\"[ATTRIBUTE_SEX]\")) {\r\n              url = url.replace(\"[ATTRIBUTE_SEX]\",formMapping.attributes[\"sex\"]);\r\n            }\r\n            if (url.includes(\"[ATTRIBUTE_AGE]\")) {\r\n              url = url.replace(\"[ATTRIBUTE_AGE]\",formMapping.attributes[\"age\"]);\r\n            }\r\n            const data = await metadataApi.pull(url.replace(\"[ORG]\",selectedOrgUnit ? selectedOrgUnit.id : \"USER_ORGUNIT\"));\r\n\r\n            setData({ \r\n              ...{ \r\n                data: generateChildCharts(\r\n                  props.widget.i,\r\n                  data,\r\n                  result,\r\n                  femaleCode\r\n                ),\r\n                colors: result.colors\r\n              } \r\n            });\r\n          }\r\n        } else if ( props.widget.i.split(\".\")[0] === \"2\" ) {\r\n          flag = false;\r\n\r\n          let url = currentChild[\"codes\"] ? analyticData.page2[\"2.1\"].replace(\"[CAUSE_GROUP_CODE]\",currentChild[\"codes\"]).replaceAll(\"[YEAR]\",props.period) : page[props.widget.i].replaceAll(\"[YEAR]\",props.period);\r\n          if (url.includes(\"[ATTRIBUTE_SEX]\")) {\r\n            url = url.replace(\"[ATTRIBUTE_SEX]\",formMapping.attributes[\"sex\"]);\r\n          }\r\n          if (url.includes(\"[ATTRIBUTE_AGE]\")) {\r\n            url = url.replace(\"[ATTRIBUTE_AGE]\",formMapping.attributes[\"age\"]);\r\n          }\r\n          const data = await metadataApi.pull(url.replace(\"[ORG]\",selectedOrgUnit ? selectedOrgUnit.id : \"USER_ORGUNIT\"));\r\n\r\n          setData({ \r\n            ...{ \r\n              data: generateChildCharts(\r\n                \"2.1\",\r\n                data,\r\n                result,\r\n                femaleCode\r\n              ),\r\n              colors: result.colors\r\n            } \r\n          });\r\n        }\r\n      }\r\n\r\n      if ( flag ) {\r\n        setData({ ...result });\r\n      }\r\n      setLoading(false);\r\n    })();\r\n  }, [selectedChild,props.period]);\r\n\r\n  const generateWidget = () => {\r\n    switch (currentChild.type) {\r\n      case \"bar\":\r\n        return <Bar data={data} />;\r\n      case \"line\":\r\n        return <Line data={data} />;\r\n      case \"pie\":\r\n        return <Pie data={data} />;\r\n      case \"statistic\":\r\n        return <Statistic data={data} />;\r\n      case \"stackedBar\":\r\n        return <StackedBarChart data={data} />;\r\n      case \"verticalStackedBar\":\r\n        return <VerticalStackedBarChart data={data} />;\r\n      case \"doubleStackedBar\":\r\n        return <DoubleStackedBarChart data={data} />;\r\n      case \"combined\":\r\n        return <CombinedChart data={data} />;\r\n      case \"map\":\r\n        return <Map data={data} />;\r\n      case \"html\":\r\n        return <Html data={data} />;\r\n      case \"treemap\":\r\n        return <Treemap data={data} />;\r\n      case \"bubble\": \r\n        return <Bublemap data={data}/>\r\n      default:\r\n        return <Nodata data={data}/>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ ...style }} className={\"widget-wrapper \" + className} ref={ref}>\r\n      <div className=\"widget-container\">\r\n        <div className=\"widget-header\">\r\n          <div className=\"widget-title-container\">\r\n            {children.length > 1 ? (\r\n              <Dropdown\r\n                overlay={\r\n                  <Menu>\r\n                    {children.map((child, index) => {\r\n                      return (\r\n                        <Menu.Item\r\n                          key={index}\r\n                          onClick={() => {\r\n                            if (index !== selectedChild) {\r\n                              setLoading(true);\r\n                              setSelectedChild(index);\r\n                            }\r\n                          }}\r\n                        >\r\n                          {child.title}\r\n                        </Menu.Item>\r\n                      );\r\n                    })}\r\n                  </Menu>\r\n                }\r\n              >\r\n                <div className=\"page-label\">\r\n                  <div className=\"widget-title\">{currentChild.title}</div>&nbsp;&nbsp;\r\n                  <IoChevronDown />\r\n                </div>\r\n              </Dropdown>\r\n            ) : (\r\n              <div className=\"widget-title\">{currentChild.title}</div>\r\n            )}\r\n            {currentChild.subTitle && <div className=\"widget-sub-title\">{currentChild.subTitle}</div>}\r\n          </div>\r\n          <div className=\"widget-menu-container\">\r\n            <IconButton icon=\"menu\" />\r\n          </div>\r\n        </div>\r\n        <div className=\"widget\">{loading ? <SyncLoader color=\"#757575\" margin={8} size={15} /> : generateWidget()}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    selectedOrgUnit: state.metadata.selectedOrgUnit,\r\n    formMapping: state.metadata.formMapping,\r\n    femaleCode: state.metadata.femaleCode\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(WidgetContainer);\r\n","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\hocs\\withLoading.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Icd11Tool\\EmbeddedIcd11Tool.js",["505"],"import { Modal } from \"antd\";\r\nimport { useEffect, useState } from \"react\";\r\nimport \"./index.css\";\r\nimport RawCodingTool from \"./RawCodingTool\";\r\n\r\nconst Icd11Tool = ({ visible, setVisible, onSelect, defaultValue }) => {\r\n  const [selectedCod, setSelectedCod] = useState(null);\r\n  const [isClear, setIsClear] = useState(false);\r\n\r\n  useEffect(() => {\r\n    console.log(\"Modal\");\r\n    console.log(defaultValue);\r\n    console.log(visible);\r\n    if (!visible) {\r\n      setIsClear(true);\r\n    } else {\r\n      setSelectedCod(defaultValue);\r\n      setIsClear(false);\r\n    }\r\n  }, [visible]);\r\n\r\n  return (\r\n    <Modal\r\n      title=\"ICD 11 Coding Tool\"\r\n      maskClosable={false}\r\n      centered\r\n      open={visible}\r\n      onOk={() => {\r\n        setVisible(false);\r\n        onSelect(selectedCod);\r\n      }}\r\n      onCancel={() => setVisible(false)}\r\n      width=\"95%\"\r\n    >\r\n      <RawCodingTool\r\n        defaultValue={defaultValue}\r\n        isClear={isClear}\r\n        iNo={1}\r\n        onSelect={setSelectedCod}\r\n      />\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default Icd11Tool;","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\utils\\const.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\utils\\generateMetadata.js",["506","507"],"import { generateCode } from \".\";\r\n\r\nconst jsonFiles = [\r\n    \"attributes\",\r\n    \"legendSets\",\r\n    \"optionSets\",\r\n    \"trackedEntityAttributes\",\r\n    \"trackedEntityTypes\",\r\n    \"dataElements\",\r\n    \"programs\",\r\n    \"programStages\",\r\n    \"programStageSections\",\r\n    \"programIndicators\",\r\n    \"indicatorTypes\",\r\n    \"indicators\",\r\n    \"sqlViews\",\r\n    \"options\",\r\n    \"optionGroups\",\r\n    \"optionGroupSets\"\r\n]; // should order from child to parent dependenvies\r\n\r\nconst replaceUID = (mapping, data) => {\r\n    let res = data;\r\n    for( const uid in mapping) {\r\n        res = res.replaceAll(uid,mapping[uid]);\r\n    }\r\n    return res;\r\n}\r\n\r\nexport const generateDefaultMetadata = (fullnameOption, newUID) => {\r\n    let metadata = {};\r\n    let formMapping = require(\"../asset/metadata/mapping.json\");\r\n    let uidReplacement = {};\r\n\r\n    // Generate new id and map to old\r\n    jsonFiles.forEach( jsonFile => {\r\n        metadata[jsonFile] = require(`../asset/metadata/${jsonFile}.json`)[jsonFile];\r\n\r\n        if ( jsonFile === \"trackedEntityAttributes\" ) {\r\n            metadata[jsonFile] = metadata[jsonFile].filter( ({id}) => id !== \"A9yzNTl9G0f\" );\r\n        }\r\n        if ( jsonFile === \"programs\") {\r\n            metadata[jsonFile][0].programTrackedEntityAttributes = metadata[jsonFile][0].programTrackedEntityAttributes.filter( ({trackedEntityAttribute}) => trackedEntityAttribute.id !== \"A9yzNTl9G0f\");\r\n        }\r\n        \r\n        metadata[jsonFile].forEach( element => {\r\n            if (element.id) uidReplacement = {\r\n                ...uidReplacement,\r\n                [element.id]: generateCode()\r\n            }\r\n        });\r\n    });\r\n\r\n    formMapping[\"sections\"] = metadata.programStageSections;\r\n    formMapping[\"otherSections\"] = {};\r\n    // if (fullnameOption) formMapping.attributes.family_name = \"\";\r\n\r\n    if ( newUID ) {\r\n        // Replace metadata\r\n        const stringMetadata = replaceUID(uidReplacement,JSON.stringify(metadata));\r\n        metadata = JSON.parse(stringMetadata);\r\n\r\n        // Replace mapping\r\n        const stringFormMapping = replaceUID(uidReplacement,JSON.stringify(formMapping));\r\n        formMapping = JSON.parse(stringFormMapping);\r\n    }\r\n\r\n    return { \r\n        metadata: metadata,\r\n        formMapping: formMapping\r\n    };\r\n}\r\n\r\nexport const generateCustomMetadata = ( admin, newUID, ageAttribute ) => {\r\n    /** \r\n     * WHAT THIS FUNCTION DOES\r\n     * \r\n     * 1. Remove metadata\r\n     * ** TE Types\r\n     * ** TEAs\r\n     * CREATE NEW FILES (base dataelements in redux)\r\n     * ** DEs\r\n     * ** Options / Option Sets\r\n     * ** ProgramStageSections\r\n     * \r\n     * 2. Remove TEAs, DEs, [ProgramStageSections]-> use default in Redux, TE Type from Programs and Program Stages\r\n     * \r\n     * 3. Generate new UID\r\n     * \r\n     * 4. Add other DEs, sections and attributes, types to Programs and Program Stages (base on TEAs, TE Type and DEs in Redux)\r\n     */\r\n\r\n    // Check optionSet nbcADZuow7x\r\n\r\n    let formMapping = {\r\n        version: \"\",\r\n        dataElements: {},\r\n        attributes: {\r\n          system_id: \"BfkIayM14MF\"\r\n        },\r\n        programStage: \"WlWJt4lVSWw\",\r\n        optionAttributes: {\r\n          group: \"UBT4QSKzYo4\",\r\n          chapter: \"QUYTAqoXnje\"\r\n        },\r\n        sections: [],\r\n        otherSections: {}\r\n    };\r\n    \r\n\r\n    // 1. Filter DEs, optionSets and options\r\n    let metadata = {};\r\n    metadata[\"attributes\"] = require(`../asset/metadata/attributes.json`)[\"attributes\"];\r\n    metadata[\"programIndicators\"] = require(`../asset/metadata/programIndicators.json`)[\"programIndicators\"];\r\n\r\n    metadata[\"programs\"] = require(`../asset/metadata/programs.json`)[\"programs\"];\r\n    metadata[\"programStages\"] = require(`../asset/metadata/programStages.json`)[\"programStages\"];\r\n\r\n    metadata[\"optionSets\"] = require(`../asset/metadata/optionSets.json`)[\"optionSets\"];\r\n    metadata[\"dataElements\"] = require(`../asset/metadata/dataElements.json`)[\"dataElements\"];\r\n    metadata[\"options\"] = require(`../asset/metadata/options.json`)[\"options\"];\r\n\r\n    metadata[\"indicatorTypes\"] = require(`../asset/metadata/indicatorTypes.json`)[\"indicatorTypes\"];\r\n    metadata[\"indicators\"] = require(`../asset/metadata/indicators.json`)[\"indicators\"];\r\n    metadata[\"sqlViews\"] = require(`../asset/metadata/sqlViews.json`)[\"sqlViews\"];\r\n    metadata[\"optionGroups\"] = require(`../asset/metadata/optionGroups.json`)[\"optionGroups\"];\r\n    metadata[\"optionGroupSets\"] = require(`../asset/metadata/optionGroupSets.json`)[\"optionGroupSets\"];\r\n    metadata[\"legendSets\"] = require(`../asset/metadata/legendSets.json`)[\"legendSets\"];\r\n\r\n    // add system_id\r\n    metadata[\"trackedEntityAttributes\"] = require(`../asset/metadata/trackedEntityAttributes.json`)[\"trackedEntityAttributes\"].slice(0,1);\r\n    metadata[\"trackedEntityAttributes\"].push({\r\n        ...ageAttribute,\r\n        legendSets: [\r\n            ...ageAttribute.legendSets,\r\n            ...[\r\n                {\r\n                    id: \"bHqcKIS01OI\"\r\n                },\r\n                {\r\n                    id: \"S0CP6RzDx4c\"\r\n                },\r\n                {\r\n                    id: \"McFG08e1aEd\"\r\n                },\r\n                {\r\n                    id: \"YVz7lS5F4So\"\r\n                },\r\n                {\r\n                    id: \"VVnrNTCrxB1\"\r\n                }\r\n            ]\r\n        ]\r\n    });\r\n\r\n    // const admin = require(\"./admin.json\");\r\n    let dataElements = [];\r\n    let optionSets = [];\r\n    let options = [];\r\n\r\n    for ( const frame in admin.dataElements ) {\r\n        admin.dataElements[frame].defaultSections.forEach( section => {\r\n            dataElements = [\r\n                ...dataElements,\r\n                ...section.dataElements.map( de => {\r\n                    const findedDE = metadata.dataElements.find( ({id}) => de.id === id )\r\n                    if ( findedDE.optionSet ) {\r\n                        if ( !optionSets.find( ({id}) => id === findedDE.optionSet.id ) )  {\r\n                            optionSets.push(metadata.optionSets.find( ({id}) => id === findedDE.optionSet.id ));\r\n                            options = [\r\n                                ...options,\r\n                                ...metadata.options.filter( opt => opt.optionSet.id === findedDE.optionSet.id )\r\n                            ];\r\n                        }\r\n                    }\r\n                    return findedDE;\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    metadata[\"dataElements\"] = dataElements;\r\n    metadata[\"optionSets\"] = optionSets;\r\n    metadata[\"options\"] = options;\r\n    const entryForm = require(\"../asset/metadata/mapping.json\");\r\n    for ( const key in entryForm.dataElements ) {\r\n        if ( metadata[\"dataElements\"].find( ({id}) => id === entryForm.dataElements[key] ) ) {\r\n            formMapping.dataElements[key] = entryForm.dataElements[key];\r\n        }\r\n    }\r\n\r\n    // add version\r\n    formMapping.version = entryForm.version;\r\n\r\n\r\n\r\n\r\n\r\n    // 2. Remove DEs from programStages, TEAs/TE_Type from programs, and programStageSections\r\n    metadata.programStageSections = [\r\n        ...admin.dataElements.frameA.defaultSections,\r\n        ...admin.dataElements.frameB.defaultSections,\r\n    ];\r\n\r\n    delete metadata.programs[0].trackedEntityType;\r\n    metadata.programs[0].programTrackedEntityAttributes = [];\r\n\r\n    metadata.programStages[0].programStageDataElements = metadata.programStages[0].programStageDataElements.filter( ({dataElement}) =>\r\n        metadata.dataElements.find( ({id}) => id === dataElement.id )\r\n    )\r\n\r\n\r\n\r\n    // 3. Generate new UID\r\n    let uidReplacement = {};\r\n    for ( const jsonFile in metadata ) {\r\n        metadata[jsonFile].forEach( element => {\r\n            if (element.id) uidReplacement = {\r\n                ...uidReplacement,\r\n                [element.id]: generateCode()\r\n            }\r\n        });\r\n    }\r\n\r\n    if ( newUID ) {\r\n        // Replace metadata\r\n        const stringMetadata = replaceUID(uidReplacement,JSON.stringify(metadata));\r\n        metadata = JSON.parse(stringMetadata);\r\n\r\n        // Replace mapping\r\n        const stringFormMapping = replaceUID(uidReplacement,JSON.stringify(formMapping));\r\n        formMapping = JSON.parse(stringFormMapping);\r\n    }\r\n    \r\n\r\n    // 3.b Mapping for entry form**************\r\n    admin.trackedEntityAttributes.forEach( defaultAttribute => {\r\n        // if (defaultAttribute[1] === \"Unique ID\") formMapping.attributes[\"system_id\"] = defaultAttribute[0];\r\n        if (defaultAttribute[1] === \"First Name\") formMapping.attributes[\"given_name\"] = defaultAttribute[0];\r\n        if (defaultAttribute[1] === \"Last Name\") formMapping.attributes[\"family_name\"] = defaultAttribute[0];\r\n        if (defaultAttribute[1] === \"Middle Name\") formMapping.attributes[\"middle_name\"] = defaultAttribute[0];\r\n        if (defaultAttribute[1] === \"Date of Birth\") formMapping.attributes[\"dob\"] = defaultAttribute[0];\r\n        if (defaultAttribute[1] === \"Date of Birth is estimated\") formMapping.attributes[\"estimated_dob\"] = defaultAttribute[0];\r\n        if (defaultAttribute[1] === \"Age in years\") formMapping.attributes[\"age\"] = defaultAttribute[0];\r\n        if (defaultAttribute[1] === \"Address\") formMapping.attributes[\"address\"] = defaultAttribute[0];\r\n        if (defaultAttribute[1] === \"Sex\") formMapping.attributes[\"sex\"] = defaultAttribute[0];\r\n    })\r\n\r\n\r\n\r\n    // 4.a Add other attributes, types to Programs\r\n    metadata.programs[0][\"trackedEntityType\"] = { id: admin.trackedEntityType };\r\n    metadata.programs[0].programTrackedEntityAttributes = [\r\n        ...[{\r\n            \"mandatory\": true,\r\n            \"searchable\": true,\r\n            \"renderOptionsAsRadio\": false,\r\n            \"displayInList\": true,\r\n            \"sortOrder\": 1,\r\n            \"program\": { \"id\": metadata.programs[0].id },\r\n            // \"trackedEntityAttribute\": { \"id\": admin.trackedEntityAttributes[0][0] },\r\n            \"trackedEntityAttribute\": { \"id\": metadata[\"trackedEntityAttributes\"][0].id },\r\n            \"programTrackedEntityAttributeGroups\": []\r\n          }],\r\n          ...admin.trackedEntityAttributes.filter( ([des,]) => des !== '' ).map( (tea,index) => ({\r\n            \"mandatory\": false,\r\n            \"searchable\": tea[1] === \"First Name\" || tea[1] === \"Last Name\" || tea[1] === \"Date of Birth\" || tea[1] === \"Address\",\r\n            \"renderOptionsAsRadio\": false,\r\n            \"displayInList\": tea[1] === \"First Name\" || tea[1] === \"Last Name\" || tea[1] === \"Date of Birth\" || tea[1] === \"Address\",\r\n            \"sortOrder\": index+2,\r\n            \"program\": { \"id\": metadata.programs[0].id  },\r\n            \"trackedEntityAttribute\": { \"id\": tea[0] },\r\n            \"programTrackedEntityAttributeGroups\": []\r\n          }))\r\n        //   ...[{\r\n        //     \"mandatory\": false,\r\n        //     \"searchable\": true,\r\n        //     \"renderOptionsAsRadio\": false,\r\n        //     \"displayInList\": true,\r\n        //     \"sortOrder\": 2,\r\n        //     \"program\": { \"id\": metadata.programs[0].id  },\r\n        //     \"trackedEntityAttribute\": { \"id\": admin.trackedEntityAttributes[0][0] },\r\n        //     \"programTrackedEntityAttributeGroups\": []\r\n        //   },\r\n        //   {\r\n        //     \"mandatory\": false,\r\n        //     \"searchable\": true,\r\n        //     \"renderOptionsAsRadio\": false,\r\n        //     \"displayInList\": true,\r\n        //     \"sortOrder\": 3,\r\n        //     \"program\": { \"id\": metadata.programs[0].id  },\r\n        //     \"trackedEntityAttribute\": { \"id\": admin.trackedEntityAttributes[1][0] },\r\n        //     \"programTrackedEntityAttributeGroups\": []\r\n        //   },\r\n        //   {\r\n        //     \"mandatory\": false,\r\n        //     \"searchable\": true,\r\n        //     \"renderOptionsAsRadio\": false,\r\n        //     \"displayInList\": true,\r\n        //     \"sortOrder\": 4,\r\n        //     \"program\": { \"id\": metadata.programs[0].id  },\r\n        //     \"trackedEntityAttribute\": { \"id\": admin.trackedEntityAttributes[2][0] },\r\n        //     \"programTrackedEntityAttributeGroups\": []\r\n        //   },\r\n        //   {\r\n        //     \"mandatory\": false,\r\n        //     \"searchable\": false,\r\n        //     \"renderOptionsAsRadio\": false,\r\n        //     \"displayInList\": false,\r\n        //     \"sortOrder\": 5,\r\n        //     \"program\": { \"id\": metadata.programs[0].id  },\r\n        //     \"trackedEntityAttribute\": { \"id\": admin.trackedEntityAttributes[3][0] },\r\n        //     \"programTrackedEntityAttributeGroups\": []\r\n        //   },\r\n        //   {\r\n        //     \"mandatory\": false,\r\n        //     \"searchable\": false,\r\n        //     \"renderOptionsAsRadio\": false,\r\n        //     \"displayInList\": false,\r\n        //     \"sortOrder\": 6,\r\n        //     \"program\": { \"id\": metadata.programs[0].id  },\r\n        //     \"trackedEntityAttribute\": { \"id\": admin.trackedEntityAttributes[4][0] },\r\n        //     \"programTrackedEntityAttributeGroups\": []\r\n        //   },\r\n        //   {\r\n        //     \"mandatory\": false,\r\n        //     \"searchable\": true,\r\n        //     \"renderOptionsAsRadio\": false,\r\n        //     \"displayInList\": true,\r\n        //     \"sortOrder\": 7,\r\n        //     \"program\": { \"id\": metadata.programs[0].id  },\r\n        //     \"trackedEntityAttribute\": { \"id\": admin.trackedEntityAttributes[5][0] },\r\n        //     \"programTrackedEntityAttributeGroups\": []\r\n        //   },\r\n        //   {\r\n        //     \"mandatory\": false,\r\n        //     \"searchable\": false,\r\n        //     \"renderOptionsAsRadio\": false,\r\n        //     \"displayInList\": false,\r\n        //     \"sortOrder\": 8,\r\n        //     \"program\": { \"id\": metadata.programs[0].id  },\r\n        //     \"trackedEntityAttribute\": { \"id\": admin.trackedEntityAttributes[6][0] },\r\n        //     \"programTrackedEntityAttributeGroups\": []\r\n        //   }]\r\n    ];\r\n    // metadata.programs[0].programTrackedEntityAttributes = [\r\n    //     ...metadata.programs[0].programTrackedEntityAttributes,\r\n    //     ...admin.trackedEntityAttributes.slice(8,admin.trackedEntityAttributes.length).map( (tea, index) => {\r\n    //         return {\r\n    //             \"mandatory\": false,\r\n    //             \"searchable\": false,\r\n    //             \"renderOptionsAsRadio\": false,\r\n    //             \"displayInList\": false,\r\n    //             \"sortOrder\": (9 + index),\r\n    //             \"program\": { \"id\": metadata.programs[0].id  },\r\n    //             \"trackedEntityAttribute\": { \"id\": tea[0] },\r\n    //             \"programTrackedEntityAttributeGroups\": []\r\n    //         }\r\n    //     })\r\n    // ];\r\n\r\n    // 4.b Add other DEs, sections and and Program Stages\r\n    for (const frame in admin.dataElements) {\r\n        formMapping.otherSections[frame] = [];\r\n        admin.dataElements[frame].otherSections.forEach((section, index) => {\r\n            section[1].forEach( de => {\r\n                metadata.programStages[0].programStageDataElements.push({\r\n                    \"displayInReports\": false,\r\n                    \"skipSynchronization\": false,\r\n                    \"renderOptionsAsRadio\": false,\r\n                    \"compulsory\": false,\r\n                    \"allowProvidedElsewhere\": false,\r\n                    \"allowFutureDate\": false,\r\n                    \"programStage\": { \"id\": metadata.programStages[0].id },\r\n                    \"dataElement\": { \"id\": de }\r\n                })\r\n            });\r\n\r\n            metadata.programStageSections.push({\r\n                \"name\": section[0],\r\n                \"sortOrder\": 11 + index,\r\n                \"programStage\": { \"id\": metadata.programStages[0].id },\r\n                \"dataElements\": section[1].map( de => {\r\n                    return {\r\n                        \"id\": de\r\n                    }\r\n                })\r\n            });\r\n\r\n            formMapping[\"otherSections\"][frame].push({\r\n                \"name\": section[0],\r\n                \"dataElements\": section[1].map( de => {\r\n                    return {\r\n                        \"id\": de\r\n                    }\r\n                })\r\n            });\r\n        })\r\n    }\r\n    formMapping.sections = metadata.programStageSections;\r\n    \r\n    return { \r\n        metadata: metadata,\r\n        formMapping: formMapping\r\n    };\r\n}\r\n\r\nexport const updateProgramIndicators = (programIndicators, dobAttribute, sexAttribute, femaleCode) => programIndicators.map( pi => {\r\n    return {\r\n        ...pi,\r\n        filter: pi[\"filter\"].replaceAll(\"revZcilpJvK\",dobAttribute)\r\n            .replaceAll(\"F6qFXT44qay\",sexAttribute)\r\n            .replaceAll(\"FEMALE\",femaleCode)\r\n    }\r\n});\r\n\r\nexport const updateSQLViews = (sqlViews, ageAttribute, sexAttribute, femaleCode) => sqlViews.map( sv => {\r\n    return {\r\n        ...sv,\r\n        sqlQuery: sv[\"sqlQuery\"].replaceAll(\"z4jIMvqs0ff\",ageAttribute)\r\n        .replaceAll(\"F6qFXT44qay\",sexAttribute)\r\n        .replaceAll(\"FEMALE\",femaleCode)\r\n    }\r\n});","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Administration\\CustomCertificate.jsx",["508","509","510"],"import { useState, useLayoutEffect } from \"react\";\r\nimport { \r\n    Button,\r\n    Row, Col,\r\n    Input,\r\n    List,\r\n    Divider,\r\n    Modal\r\n} from \"antd\";\r\n// import fileSaver from \"file-saver\";\r\nimport { Hooks } from \"tracker-capture-app-core\";\r\nimport { convertPdfDoc2FileURL, fillPdf, showPage } from \"../../utils/certificate\";\r\n// import { Image, PictureAsPdf, Print } from \"@material-ui/icons\";\r\n\r\nconst { useApi } = Hooks;\r\n\r\nconst CustomCertificate = props => { \r\n    const { metadataApi } = useApi();\r\n    // const [pdfURL, setPdfURL] = useState(null);\r\n\r\n    const [ openModal, setOpenModal ] = useState(null);\r\n    const [ mapping, setMapping ] = useState([\r\n        {\r\n            label: \"full_name\",\r\n            value: \"#{tea.uid1} #{tea.uid2}\",\r\n            coordinate: \"132, 132\"\r\n        },\r\n        {\r\n            label: \"nationality\",\r\n            value: \"#{de.uid1} #{de.uid2}\",\r\n            coordinate: \"102, 122\"\r\n        }\r\n    ]);\r\n\r\n    const generateData = async pdfFileTemplate => {\r\n        const pdfDoc = await fillPdf(pdfFileTemplate);\r\n        // const fileURL = await convertPdfDoc2FileURL(pdfDoc);\r\n        // setPdfURL(fileURL);\r\n        await showPage(pdfDoc, 1);\r\n    };\r\n\r\n    useLayoutEffect(() => {\r\n        (async () => {\r\n            const pdfFileTemplate = await metadataApi.getResource(\"o1c2Z6zbVrS\");\r\n            generateData(pdfFileTemplate);\r\n        })();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <Row gutter={[16, 16]}>\r\n                <Col span={12}>\r\n                    <div className=\"administration-certificate-box\">\r\n                        <Divider plain orientation=\"right\"><Button onClick={() => setOpenModal(\"Add\")}>Add</Button></Divider>\r\n                        <List \r\n                            size=\"small\"\r\n                            split={false}\r\n                            dataSource={mapping}\r\n                            renderItem={ item => \r\n                                <List.Item\r\n                                    actions={[\r\n                                        <Button type=\"text\" onClick={() => setOpenModal(item.label)}>Edit</Button>,\r\n                                        <Button type=\"text\">Remove</Button>\r\n                                    ]}\r\n                                >\r\n                                    <List.Item.Meta\r\n                                        title={item.label}\r\n                                        description={item.value}\r\n                                    />\r\n                                </List.Item>\r\n                            }\r\n                        />\r\n                    </div>\r\n                </Col>\r\n                <Col span={12}>\r\n                    <div className=\"administration-certificate-box\">\r\n                        {/* <iframe \r\n                            hidden\r\n                            id=\"certificate\"\r\n                            title=\"Certificate\"\r\n                            src={pdfURL + \"#toolbar=0&navpanes=0&scrollbar=0\"}\r\n                            frameBorder=\"0\" \r\n                            height={1132}\r\n                            width={\"100%\"}\r\n                            scrolling=\"auto\"\r\n                            type=\"application/pdf\"\r\n                        /> */}\r\n                        <Row>\r\n                            <Col>\r\n                                <canvas\r\n                                    style={{ maxWidth: \"100%\" }}\r\n                                    id=\"pdf-canvas\"\r\n                                    width=\"800\"\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col>\r\n                                <canvas\r\n                                    style={{ maxWidth: \"100%\" }}\r\n                                    id=\"pdf-canvas-2\"\r\n                                    width=\"800\"\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                    {/* <Grid container spacing={1} alignItems=\"flex-end\" justify=\"flex-end\">\r\n                        <Box p={1}>\r\n                            <Button\r\n                                size=\"small\"\r\n                                color=\"primary\"\r\n                                variant=\"contained\"\r\n                                onClick={() => {\r\n                                    fileSaver.saveAs(pdfURL, \"certificate.pdf\");\r\n                                }}\r\n                                // startIcon={<PictureAsPdf />}\r\n                            >\r\n                                Download as PDF\r\n                            </Button>\r\n                        </Box>\r\n                        <Box p={1}>\r\n                        <Button\r\n                            size=\"small\"\r\n                            color=\"primary\"\r\n                            variant=\"contained\"\r\n                            onClick={() => {\r\n                                const link = document.createElement(\"a\");\r\n                                link.download = \"certificate.png\";\r\n                                link.href = document.getElementById(\"pdf-canvas\").toDataURL();\r\n                                link.click();\r\n                            }}\r\n                            // startIcon={<Image />}\r\n                        >\r\n                            Download as PNG\r\n                        </Button>\r\n                        </Box>\r\n                        <Box p={1}>\r\n                        <Button\r\n                            size=\"small\"\r\n                            color=\"primary\"\r\n                            variant=\"contained\"\r\n                            onClick={() => {\r\n                                document.getElementById(\"certificate\").contentWindow.print();\r\n                            }}\r\n                            // startIcon={<Print />}\r\n                        >\r\n                            Print\r\n                        </Button>\r\n                        </Box>\r\n                    </Grid> */}\r\n                </Col>\r\n            </Row>\r\n            <Modal\r\n                visible={ openModal !== null }\r\n                centered\r\n                onCancel={ () => setOpenModal(null) }\r\n                title={ openModal === \"Add\" ? \"Add\" : `Edit ${openModal}` }\r\n            >\r\n                <div className=\"administration-customcertificate-modal\">\r\n                    <div>Label</div>\r\n                    <div>\r\n                        <Input disabled={openModal !== null && openModal !== \"Add\"} value={openModal !== \"Add\" ? openModal : \"\"} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"administration-customcertificate-modal\">\r\n                    <div>Value</div>\r\n                    <div>\r\n                        <Input value={openModal !== null && openModal !== \"Add\" ? mapping.find( ({label}) => label === openModal ).value : \"\"} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"administration-customcertificate-modal\">\r\n                    <div>Coordinate</div>\r\n                    <div>\r\n                        <Input value={openModal !== null && openModal !== \"Add\" ? mapping.find( ({label}) => label === openModal ).coordinate : \"\"} />\r\n                    </div>\r\n                </div>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CustomCertificate;","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\utils\\generateChildCharts.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\InputField\\index.js",["511"],"import { Input, Radio, Checkbox, DatePicker, Select } from \"antd\";\r\nimport moment from \"moment\";\r\nimport \"./index.css\";\r\nconst { TextArea } = Input;\r\nconst { Option } = Select;\r\n\r\nconst InputField = (props) => {\r\n  const {\r\n    label,\r\n    error,\r\n    helper,\r\n    warning,\r\n    value,\r\n    valueType,\r\n    valueSet,\r\n    click,\r\n    addonBefore,\r\n    change,\r\n    disabled,\r\n    addonAfter,\r\n    date_limit,\r\n    placeholder,\r\n    allowClear,\r\n    disabledDate\r\n  } = props;\r\n\r\n  // function disabledDate(d) {\r\n  //   // Can not select days after today and today\r\n  //   return moment(d,\"yyyy-mm-dd\") > moment().endOf('day');\r\n  // }\r\n\r\n  const generateField = () => {\r\n    if (valueSet) {\r\n      return (\r\n        <Select\r\n          value={value}\r\n          allowClear\r\n          showSearch\r\n          style={{ width: \"100%\" }}\r\n          onChange={(selected) => {\r\n            change(selected);\r\n          }}\r\n            disabled={disabled}\r\n        >\r\n          {valueSet.map((set) => (\r\n            <Option value={set.value}>{set.label}</Option>\r\n          ))}\r\n        </Select>\r\n      );\r\n    }\r\n    switch (valueType) {\r\n      case \"TEXT\":\r\n      case \"INTEGER_POSITIVE\":\r\n      case \"INTEGER_NEGATIVE\":\r\n      case \"INTEGER_ZERO_OR_POSITIVE\":\r\n      case \"PERCENTAGE\":\r\n      case \"NUMBER\":\r\n      case \"INTEGER\":\r\n      case \"PHONE_NUMBER\":\r\n      case \"EMAIL\":\r\n        return (\r\n          <Input\r\n            addonBefore={addonBefore}\r\n            addonAfter={addonAfter}\r\n            value={value || \"\"}\r\n            onClick={click}\r\n            onChange={(event) => {\r\n              change(event.target.value);\r\n            }}\r\n            disabled={disabled}\r\n            placeholder={placeholder}\r\n            allowClear={allowClear}\r\n          />\r\n        );\r\n      case \"LONG_TEXT\":\r\n        return (\r\n          <TextArea\r\n            value={value || \"\"}\r\n            onChange={(event) => {\r\n              change(event.target.value);\r\n            }}\r\n          />\r\n        );\r\n      case \"DATE\":\r\n        return (\r\n          <DatePicker\r\n            value={value ? moment(value) : \"\"}\r\n            onChange={(momentObject) => {\r\n              change(momentObject.format(\"YYYY-MM-DD\"));\r\n            }}\r\n          />\r\n        );\r\n      case \"DATE_WITH_RANGE\":\r\n        return (\r\n          <DatePicker \r\n            value={value ? moment(value) : \"\"}\r\n            onChange={(momentObject) => {\r\n              change(momentObject.format(\"YYYY-MM-DD\"));\r\n            }}\r\n            disabledDate={disabledDate}\r\n          />\r\n        );\r\n      case \"DATETIME\":\r\n        return <div>hello</div>;\r\n      case \"TIME\":\r\n        return <div>hello</div>;\r\n      case \"BOOLEAN\":\r\n        return (\r\n          <Radio.Group\r\n            value={value}\r\n            onChange={(event) => {\r\n              change(event.target.value);\r\n            }}\r\n          >\r\n            <Radio value=\"true\" style={{ fontSize: \"13.5px\" }}>\r\n              Yes\r\n            </Radio>\r\n            <Radio value=\"false\" style={{ fontSize: \"13.5px\" }}>\r\n              No\r\n            </Radio>\r\n          </Radio.Group>\r\n        );\r\n      case \"TRUE_ONLY\":\r\n        return (\r\n          <Checkbox\r\n            checked={value}\r\n            onChange={(event) => {\r\n              change(event.target.checked);\r\n            }}\r\n            disabled={disabled}\r\n          ></Checkbox>\r\n        );\r\n      case \"AGE\":\r\n        return (\r\n          <DatePicker\r\n            value={value}\r\n            onChange={(momentObject) => {\r\n              change(momentObject);\r\n            }}\r\n          />\r\n        );\r\n      default:\r\n        return <span>UNSUPPORTED VALUE TYPE</span>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"input-container\">\r\n      {label && <div className=\"input-label\">{label}</div>}\r\n      <div className=\"input-field\">{generateField()}</div>\r\n      {error && <div className=\"input-error\">{error}</div>}\r\n      {helper && <div className=\"input-helper\">{helper}</div>}\r\n      {warning && <div className=\"input-warning\">{warning}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputField;\r\n","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\page9\\index.js",["512"],"import { AGE_RANGES_SHORT, SEXES, randomNumber } from \"../utils\";\r\nimport generateChildChart from \"../../utils/generateChildChart\";\r\n\r\nconst page9 = (t) => {\r\n  const TITLES = [\r\n    t(\"numberOfDeathsFromTbAidsMalariaAndOtherCausesAgeGroup\"),\r\n    t(\"distributionOfDeathsByTbAidsAndMalariaBySexAndAge\"),\r\n    t(\r\n      \"percentageOfDeathsFromTbAidsAndMalariaOutOfAllDeathsFromCommunicableDiseases\"\r\n    ),\r\n    t(\r\n      \"numberOfTbAndAidsDeathsAndPercentOfTheseDeathsOutOfAllDeaths15YearsAndAbove\"\r\n    ),\r\n  ];\r\n  return {\r\n    id: \"page9\",\r\n    label: `${t(\"malaria\")} - ${t(\"tb\")} - ${t(\"aids\")}`,\r\n    layout: TITLES.map((v, index) => {\r\n      return {\r\n        i: `9.${index + 1}`,\r\n        x: index % 2 ? 49 : 0,\r\n        y: Math.floor(index / 2) * 50,\r\n        w: 49,\r\n        h: 50,\r\n      };\r\n    }),\r\n    widgets: [\r\n      {\r\n        i: \"9.1\",\r\n        children: [\r\n          generateChildChart(\"verticalStackedBar\", {\r\n            title: TITLES[0],\r\n            dataLabels: [t(\"tb\"), t(\"aids\"), t(\"malaria\"), t(\"other\")],\r\n            dataSets: AGE_RANGES_SHORT.map((name) => ({\r\n              name,\r\n              data: Array(4)\r\n                .fill()\r\n                .map(() => randomNumber(1, 2000)),\r\n            })),\r\n            colors: [\"#4C7FBC\", \"#ED7B2E\", \"#CBCBCB\", \"#E0DF40\"],\r\n          }),\r\n        ],\r\n      },\r\n      {\r\n        i: \"9.2\",\r\n        children: [\r\n          generateChildChart(\"doubleStackedBar\", {\r\n            title: TITLES[1],\r\n            dataLabels: [\r\n              \"Male - TB\",\r\n              \"Male - AIDS\",\r\n              \"Male - Malaria\",\r\n              \"Female - TB\",\r\n              \"Female - AIDS\",\r\n              \"Female - Malaria\",\r\n            ],\r\n            dataSets: AGE_RANGES_SHORT.map((name) => ({\r\n              name,\r\n              data: Array(6)\r\n                .fill()\r\n                .map(() => randomNumber(1, 2000)),\r\n            })),\r\n            colors: [\r\n              \"#225FAD\",\r\n              \"#79A4DA\",\r\n              \"#BFD7F5\",\r\n              \"#7F1590\",\r\n              \"#C971D7\",\r\n              \"#F4CCFA\",\r\n            ],\r\n          }),\r\n        ],\r\n      },\r\n      {\r\n        i: \"9.3\",\r\n        children: [\r\n          generateChildChart(\"bar\", {\r\n            title: TITLES[2],\r\n            dataLabels: [t(\"numberOfDeath\")],\r\n            dataSets: AGE_RANGES_SHORT.map((name) => ({\r\n              name,\r\n              data: [randomNumber(1, 100)],\r\n            })),\r\n            colors: [\"#3F6EC3\"],\r\n          }),\r\n        ],\r\n      },\r\n      {\r\n        i: \"9.4\",\r\n        children: [\r\n          generateChildChart(\r\n            \"combined\",\r\n            {\r\n              title: TITLES[3],\r\n              dataLabels: [\r\n                t(\"percentOfTotalDeathAllCauses\"),\r\n                t(\"tb\"),\r\n                t(\"aids\"),\r\n              ],\r\n              dataSets: [\"15 - 24\", \"35 - 49\", \"50 - 74\", \"75+\"].map((name) => {\r\n                const number1 = randomNumber(0, 600);\r\n                const number2 = randomNumber(0, 600);\r\n                return {\r\n                  name,\r\n                  data: [\r\n                    ((number1 + number2) /\r\n                      (number1 + number2 + randomNumber(0, 600))) *\r\n                      100,\r\n                    number1,\r\n                    number2,\r\n                  ],\r\n                };\r\n              }),\r\n              colors: [\"#21272D\", \"#4C7FBC\", \"#ED7B2E\"],\r\n            },\r\n            [\"line\", \"stackedBar\", \"stackedBar\"]\r\n          ),\r\n        ],\r\n      },\r\n    ],\r\n  };\r\n};\r\n\r\nexport default page9;\r\n","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\page6\\index.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\page7\\index.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\page2\\index.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\page8\\index.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\page4\\index.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Icd11Tool\\RawCodingTool.js",["513","514","515","516","517"],"import React, { useCallback, useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as ECT from \"@whoicd/icd11ect\";\r\nimport \"@whoicd/icd11ect/style.css\";\r\nimport \"./index.css\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Input, Row, Col } from \"antd\";\r\nimport { debounce } from \"lodash\";\r\n\r\nconst { Search } = Input;\r\n\r\nlet apiUrl = process.env.REACT_APP_ICD11_API_URL;\r\n\r\nconst RawCodingTool = ({ onSelect, iNo, isClear, defaultValue, keyUILocale }) => {\r\n  const [searchValue, setSearchValue] = useState(\"\");\r\n  const [selectedEntity, setSelectedEntity] = useState(null);\r\n\r\n  const ectSearch = (value) => value && ECT.Handler.search(iNo, value);\r\n\r\n  const search = (value) => ectSearch(value);\r\n\r\n  const debounceSearch = useCallback(debounce(search, 275), []);\r\n\r\n  useEffect(() => {\r\n    // console.log(\"Tool\",defaultValue);\r\n    // if (isClear) {\r\n    //   setSearchValue(\"\");\r\n    //   setSelectedEntity(null);\r\n    //   ECT.Handler.clear(iNo);\r\n    // } else {\r\n    //   setSearchValue(defaultValue ? defaultValue.title : \"\");\r\n    //   search(defaultValue ? defaultValue.title : \"\");\r\n    //   setSelectedEntity(defaultValue || null);\r\n    // }\r\n  }, [isClear]);\r\n\r\n  useEffect(() => {\r\n    if (defaultValue.code === \"\") {\r\n      setSearchValue(\"\");\r\n      setSelectedEntity(null);\r\n      ECT.Handler.clear(iNo);\r\n    }\r\n    else {\r\n      setSearchValue(defaultValue ? defaultValue.title : \"\");\r\n      search(defaultValue ? defaultValue.title : \"\");\r\n      setSelectedEntity(defaultValue || null);\r\n    }\r\n  }, [defaultValue]);\r\n\r\n  useEffect(() => {\r\n    debounceSearch(searchValue);\r\n  }, [searchValue])\r\n\r\n  useEffect(() => {\r\n    const mySettings = {\r\n      autoBind: false,\r\n      apiServerUrl: \"https://icd11restapi-developer-test.azurewebsites.net\",\r\n      language: keyUILocale\r\n      // icdMinorVersion: \"2020-09\",\r\n      // icdLinearization: \"mms\",\r\n    };\r\n    const myCallbacks = {\r\n      selectedEntityFunction: (selectedEntity) => {\r\n        onSelect(selectedEntity);\r\n        setSelectedEntity(selectedEntity);\r\n      }\r\n    };\r\n    ECT.Handler.configure(mySettings, myCallbacks);\r\n    ECT.Handler.bind(iNo);\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <input hidden type=\"text\" className=\"ctw-input\" autoComplete=\"off\" data-ctw-ino={iNo} />\r\n      <Row gutter={12}>\r\n        <Col xs={12}>\r\n          <Search\r\n            width=\"50%\"\r\n            allowClear\r\n            onSearch={ectSearch(searchValue)}\r\n            value={searchValue}\r\n            placeholder=\"Type for start searching\"\r\n            onChange={(event) => {\r\n              setSearchValue(event.target.value);\r\n            }}\r\n          />\r\n        </Col>\r\n        <Col xs={12}>\r\n          <Row wrap={false} justify=\"center\" align=\"center\" gutter={6}>\r\n            <Col xs={6}>\r\n              <div style={{ lineHeight: 2, float: \"right\" }}>Your selection is:</div>\r\n            </Col>\r\n            <Col xs={18}>\r\n              <Input\r\n                addonBefore={selectedEntity && selectedEntity.code}\r\n                value={selectedEntity && selectedEntity.title}\r\n                disabled\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n      <div className=\"ctw-window icd-window\" data-ctw-ino={iNo} />\r\n    </div>\r\n  );\r\n};\r\n\r\nRawCodingTool.propTypes = {\r\n  iNo: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\r\n  onSelect: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    keyUILocale: state.metadata.keyUiLocale,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(RawCodingTool);","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\page3\\index.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\page5\\index.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\example\\index.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\page1\\index.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\page0\\index.js",["518"],"import { randomNumber } from \"../utils\";\r\nimport generateChildChart from \"../../utils/generateChildChart\";\r\nconst allChartTitles = [\r\n  \"Mortality rate, all ages\",\r\n  \"Mortality rate, neonates (0-27 days)\",\r\n  \"Mortality rate, infant (< 1 year of age)\",\r\n  \"Mortality rate, children < 5 years of age\",\r\n  \"Mortality rate, age 0-14 years \",\r\n  \"Mortality rate, age 15-49 years \",\r\n  \"Mortality rate, 50 years and above\",\r\n  \"Mortality rate, age 30-70 years\"\r\n];\r\nconst page1 = {\r\n  id: \"page0\",\r\n  label: \"Mortality levels\",\r\n  layout: allChartTitles.map((v, index) => ({\r\n    i: `0.${index + 1}`,\r\n    x: index % 2 ? 49 : 0,\r\n    y: Math.floor(index / 2) * 50,\r\n    w: 49,\r\n    h: 50\r\n  })),\r\n\r\n  widgets: allChartTitles.map((keyName, index) =>\r\n    ({\r\n      i: `0.${index + 1}`,\r\n      children: [\r\n        // generateChildChart(\"bar\", {\r\n        //   title: `${keyName} - registration`,\r\n        //   dataLabels: [\r\n        //     `${keyName.split(\",\")[0]} - Males, ${keyName.split(\",\")[1].trim()} - registration`,\r\n        //     `${keyName.split(\",\")[0]} - Females, ${keyName.split(\",\")[1].trim()} - registration`\r\n        //   ],\r\n        //   dataSets: [\"Hospital A\", \"Hospital B\", \"Hospital C\", \"Hospital D\"].map((name) => ({\r\n        //     name: name,\r\n        //     data: Array(2)\r\n        //       .fill()\r\n        //       .map((v, index) => {\r\n        //         return randomNumber(1, 90);\r\n        //       })\r\n        //   })),\r\n        //   colors: [\"#3E95CD\", \"#48b53a\"]\r\n        // })\r\n        generateChildChart(\"no_data\",{\r\n          title: `${keyName} - registration`,\r\n        })\r\n      ]\r\n    })\r\n  )\r\n};\r\nexport default page1;\r\n","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\utils\\certificate.js",["519"],"import { PDFDocument, StandardFonts } from \"pdf-lib\";\r\n\r\nasync function fillPdf(pdfFileTemplate) {\r\n    const reponsePDFBuffer = await pdfFileTemplate.arrayBuffer();\r\n\r\n    const pdfDoc = await PDFDocument.load(reponsePDFBuffer);\r\n\r\n    // const HelveticaBold = await pdfDoc.embedFont(StandardFonts.HelveticaBold);\r\n    // const FONT_SIZE = 12;\r\n    // const pages = pdfDoc.getPages();\r\n    // const PAGE_HEIGHT = pages[0].getSize().height;\r\n\r\n    // pages[0].drawText(value, {\r\n    //     x,\r\n    //     y: PAGE_HEIGHT - y,\r\n    //     size: FONT_SIZE,\r\n    //     font\r\n    // });\r\n\r\n    // const qrCodeImage = await pdfDoc.embedPng(qrCodeImageFile);\r\n    // pages[0].drawImage(qrCodeImage, {\r\n    //     x: layout.qr.x,\r\n    //     y: PAGE_HEIGHT - layout.qr.y,\r\n    //     width: layout.qr.width,\r\n    //     height: layout.qr.height,\r\n    // });\r\n\r\n    return pdfDoc;\r\n}\r\n\r\nconst convertPdfDoc2FileURL = async pdfDoc => {\r\n    let byteArray = await pdfDoc.save();\r\n    let file = new Blob([byteArray], {\r\n        type: \"application/pdf;base64\",\r\n    });\r\n    return URL.createObjectURL(file);\r\n}\r\n\r\nconst showPage = async (pdfDoc, page_no) => {\r\n    if ( pdfDoc ) {\r\n        const binaryData = await pdfDoc.save();\r\n        let _PDF_DOC;\r\n        try {\r\n            _PDF_DOC = await window.pdfjsLib.getDocument(binaryData).promise;\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n        const _CANVAS = document.querySelector(\"#pdf-canvas\");\r\n        var page = await _PDF_DOC.getPage(page_no);\r\n\r\n        // original width of the pdf page at scale 1\r\n        var pdf_original_width = page.getViewport({ scale: 1 }).width;\r\n        // as the canvas is of a fixed width we need to adjust the scale of the viewport where page is rendered\r\n        var scale_required = _CANVAS.width / pdf_original_width;\r\n\r\n        // get viewport to render the page at required scale\r\n        var viewport = page.getViewport({ scale: scale_required });\r\n\r\n        // set canvas height same as viewport height\r\n        _CANVAS.height = viewport.height;\r\n\r\n        var render_context = {\r\n            canvasContext: _CANVAS.getContext(\"2d\"),\r\n            viewport: viewport,\r\n        };\r\n\r\n        \r\n\r\n        var page_2 = await _PDF_DOC.getPage(2);\r\n        const _CANVAS_2 = document.querySelector(\"#pdf-canvas-2\");\r\n        \r\n        // original width of the pdf page at scale 1\r\n        var pdf_original_width_2 = page_2.getViewport({ scale: 1 }).width;\r\n        // as the canvas is of a fixed width we need to adjust the scale of the viewport where page is rendered\r\n        var scale_required_2 = _CANVAS_2.width / pdf_original_width_2;\r\n\r\n        // get viewport to render the page at required scale\r\n        var viewport_2 = page_2.getViewport({ scale: scale_required_2 });\r\n        _CANVAS_2.height = viewport_2.height;\r\n\r\n        var render_context_2 = {\r\n            canvasContext: _CANVAS_2.getContext(\"2d\"),\r\n            viewport: viewport_2,\r\n        };\r\n\r\n        // render the page contents in the canvas\r\n        try {\r\n            await page.render(render_context);\r\n            await page_2.render(render_context_2);\r\n        } catch (error) {\r\n            alert(error.message);\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    fillPdf,\r\n    convertPdfDoc2FileURL,\r\n    showPage\r\n}","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\Widget\\index.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\IconButton\\index.jsx",["520"],"import { Button, Radio } from \"antd\";\r\nimport { BUTTON_ICONS } from \"./const\";\r\nimport \"./index.css\";\r\n\r\nconst IconButton = (props) => {\r\n  return (\r\n    <div className=\"icon-button\">\r\n      <Button {...props} icon={BUTTON_ICONS[props.icon]}></Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IconButton;\r\n","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\example\\html-chart.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\example\\treemap-chart.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\example\\children-chart.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\Widget\\Nodata.jsx",["521"],"import {\r\n    Empty, Button\r\n  } from 'antd';\r\nimport { CloseCircleOutlined } from '@ant-design/icons';\r\n\r\nconst Nodata = ({ data }) => <Empty description={\r\n        <span>\r\n            <strong>Not Found Data</strong><br />\r\n            { data.data.message.map( m => <div>{m}</div> ) }\r\n        </span>\r\n    } >\r\n        <Button \r\n            type='primary'\r\n            onClick={ () => { window.location.href = \"../../../dhis-web-maintenance/\"; }}\r\n        >\r\n            Create Now\r\n        </Button>\r\n    </Empty>\r\n\r\n\r\nexport default Nodata;\r\n","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\Widget\\Bublemap.jsx",["522","523","524"],"import { useRef, useLayoutEffect } from 'react';\r\nimport * as am5 from \"@amcharts/amcharts5\";\r\nimport * as am5hierarchy from \"@amcharts/amcharts5/hierarchy\";\r\nimport * as am5xy from \"@amcharts/amcharts5/xy\";\r\nimport am5themes_Animated from \"@amcharts/amcharts5/themes/Animated\";\r\n\r\nconst BubbleMapWidget = ({ data }) => {\r\n\r\n    useLayoutEffect(() => {\r\n\r\n        // Create root element\r\n        let root = am5.Root.new(\"chartdiv\");\r\n\r\n        // Set themes\r\n        root.setThemes([\r\n            am5themes_Animated.new(root)\r\n        ]);\r\n\r\n        const chartData = { \r\n            ...data,\r\n            children: [{\r\n                ...data.data.children[0],\r\n                // x: am5.percent(80),\r\n                // y: am5.percent(20),\r\n            },\r\n            {\r\n                ...data.data.children[1],\r\n                // x: am5.percent(50),\r\n                // y: am5.percent(50),\r\n            },\r\n            {\r\n                ...data.data.children[2],\r\n                // x: am5.percent(20),\r\n                // y: am5.percent(40),\r\n            },\r\n            {\r\n                ...data.data.children[3],\r\n                // x: am5.percent(30),\r\n                // y: am5.percent(60),\r\n            }]\r\n        }\r\n\r\n        // Create wrapper container\r\n        const container = root.container.children.push(\r\n            am5.Container.new(root, {\r\n                width: am5.percent(100),\r\n                height: am5.percent(100),\r\n                layout: root.verticalLayout\r\n            })\r\n        );\r\n\r\n        // Create series\r\n        let series = container.children.push(\r\n            am5hierarchy.ForceDirected.new(root, {\r\n                topDepth: 1,\r\n                initialDepth: 0,\r\n                minRadius: 40,\r\n                maxRadius: am5.percent(20),\r\n                valueField: \"value\",\r\n                categoryField: \"name\",\r\n                shortNameField: \"shortName\",\r\n                childDataField: \"children\",\r\n                nodePadding: 10,\r\n                // xField: \"x\",\r\n                // yField: \"y\"\r\n            })\r\n        );\r\n\r\n        series.data.setAll([chartData]);\r\n\r\n        // Disable Toogle and Draggable\r\n        series.nodes.template.setAll({\r\n            // toggleKey: \"none\",\r\n            // cursorOverStyle: \"default\",\r\n            draggable: false\r\n        });\r\n\r\n        // Custom label\r\n        series.labels.template.setAll({\r\n            text: \"[fontSize: 15px]{shortName}[/]\\n[fontSize: 20px]{sum}[/]\",\r\n            fontSize: 14\r\n        });\r\n\r\n        // Outer circles\r\n        series.outerCircles.template.states.create(\"disabled\", {\r\n            fillOpacity: 0.5,\r\n            strokeOpacity: 0,\r\n            strokeDasharray: 0\r\n        });\r\n        series.outerCircles.template.states.create(\"hoverDisabled\", {\r\n            fillOpacity: 0.5,\r\n            strokeOpacity: 0,\r\n            strokeDasharray: 0\r\n        });\r\n\r\n        return () => {\r\n            root.dispose();\r\n        };\r\n    }, []);\r\n\r\n    return <div id=\"chartdiv\" style={{ width: \"100%\", height: \"100%\" }}></div>\r\n}\r\n\r\nexport default BubbleMapWidget;","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\Widget\\Treemap.jsx",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\IconButton\\const.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\Widget\\Html.jsx",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\Widget\\Pie.jsx",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\Widget\\Line.jsx",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\Widget\\Bar.jsx",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\Widget\\Map.jsx",["525","526","527","528","529","530","531"],"import { control } from \"leaflet\";\r\nimport { useEffect, useRef } from \"react\";\r\nimport { MapContainer, TileLayer, Marker, Popup, LayersControl, GeoJSON, useMap } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nconst GeoJsonLayer = ({ layer }) => {\r\n  const map = useMap();\r\n  const geoJson = useRef();\r\n\r\n  useEffect(() => {\r\n    map.fitBounds(geoJson.current.getBounds());\r\n  }, []);\r\n\r\n  return <GeoJSON ref={geoJson} data={layer.data} style={{ weight: 1, fill: false, color: \"#525252\" }} />;\r\n};\r\n\r\nconst ThematicLayer = ({ layer }) => {\r\n  console.log(layer);\r\n  const map = useMap();\r\n  const geoJson = useRef();\r\n\r\n  useEffect(() => {\r\n    map.fitBounds(geoJson.current.getBounds());\r\n  }, []);\r\n\r\n  return (\r\n    <GeoJSON\r\n      ref={geoJson}\r\n      data={layer.geoJson}\r\n      onEachFeature={(feature, currentLayer) => {\r\n        const currentValue = layer.data[feature.id];\r\n        const foundLegend = layer.legendSet.find((legend) => currentValue >= legend.min && currentValue <= legend.max);\r\n        const currentColor = foundLegend ? foundLegend.color : \"#ffffff\";\r\n        currentLayer.on(\"mouseover\", (thisLayer) => {\r\n          currentLayer.bindTooltip(\r\n            `<div class=\"map-tooltip\">${feature.properties.name}: <b>${\r\n              currentValue ? currentValue : \"No data\"\r\n            }</b></div>`\r\n          );\r\n        });\r\n\r\n        currentLayer.setStyle({\r\n          color: \"#525252\",\r\n          weight: 1,\r\n          fill: true,\r\n          fillOpacity: 1,\r\n          fillColor: currentColor\r\n        });\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nconst ThematicLegendControl = ({ layer }) => {\r\n  return (\r\n    <div className=\"control-container thematic-legend-container\">\r\n      {layer.legendSet.map((legend) => {\r\n        return (\r\n          <div className=\"thematic-legend-row\">\r\n            <div style={{ width: 35, height: 15, backgroundColor: legend.color }}></div>\r\n            <div>\r\n              &nbsp;{legend.min} - {legend.max}\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Map = ({ data }) => {\r\n  const generateLayers = () => {\r\n    return data.layers.map((layer) => {\r\n      switch (layer.type) {\r\n        case \"boundary\":\r\n          return <GeoJsonLayer layer={layer} />;\r\n        case \"thematic\":\r\n          return <ThematicLayer layer={layer} />;\r\n        default:\r\n          return null;\r\n      }\r\n    });\r\n  };\r\n\r\n  const generateControls = () => {\r\n    const controls = [];\r\n    data.layers.forEach((layer) => {\r\n      if (layer.type === \"thematic\") {\r\n        controls.push(<ThematicLegendControl layer={layer} />);\r\n      }\r\n    });\r\n    console.log(controls);\r\n    return controls;\r\n  };\r\n\r\n  return (\r\n    <MapContainer center={[51.505, -0.09]} zoom={13} scrollWheelZoom={false} style={{ height: \"100%\", width: \"100%\" }}>\r\n      {generateControls()}\r\n      {/* <TileLayer\r\n        attribution='&copy; <a href=\"https://carto.com/about-carto/\">CARTO</a>'\r\n        url=\"https://{s}.basemaps.cartocdn.com/rastertiles/voyager_nolabels/{z}/{x}/{y}.png\"\r\n      /> */}\r\n      {generateLayers()}\r\n    </MapContainer>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\Widget\\Statistic.jsx",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\Widget\\CombinedChart.jsx",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\Widget\\DoubleStackedBarChart.jsx",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\Widget\\StackedBarChart.jsx",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\Widget\\VerticalStackedBarChart.jsx",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\example\\stacked-bar-chart.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\example\\line-chart.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\example\\pie-chart.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\example\\combined-chart.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\example\\bar-chart.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\example\\statistic.js",[],"D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\page2\\stackedBar-chart.js",["532"],"import { AGE_RANGES, generateData, randomNumber, SEXES } from \"../utils\";\r\nimport generateChildChart from \"../../utils/generateChildChart\";\r\n\r\nconst ALL_CAUSES = [\r\n  \"tuberculosis\",\r\n  \"sexuallyTransmittedDiseasesExcludingHiv\",\r\n  \"hiv\",\r\n  \"diarrhoealDiseases\",\r\n  \"pertussis\",\r\n  \"poliomyelitis\",\r\n  \"diphtheria\",\r\n  \"measles\",\r\n  \"tetanus\",\r\n  \"meningitis\",\r\n  \"hepatitisB\",\r\n  \"hepatitisC\",\r\n  \"malaria\",\r\n  \"tropicalClusterDiseases\",\r\n  \"lowerRespiratoryInfections\",\r\n  \"maternalConditions\",\r\n  \"conditionsArisingDuringThePerinatalPeriod\",\r\n  \"nutritionalDeficiencies\",\r\n  \"mouthAndOropharynxCancers\",\r\n  \"oesophagusCancer\",\r\n  \"stomachCancer\",\r\n  \"colonAndRectumCancers\",\r\n  \"liverCancer\",\r\n  \"pancreasCancer\",\r\n  \"tracheaBronchusAndLungCancers\",\r\n  \"melanomaAndOtherSkinCancers\",\r\n  \"breastCancer\",\r\n  \"cervixUteriCancer\",\r\n  \"corpusUteriCancer\",\r\n  \"ovaryCancer\",\r\n  \"prostateCancer\",\r\n  \"bladderCancer\",\r\n  \"lymphomasAndMultipleMyeloma\",\r\n  \"leukaemia\",\r\n  \"alzheimerAndOtherDementias\",\r\n  \"parkinsonDisease\",\r\n  \"hypertensiveDisease\",\r\n  \"ischaemicHeartDisease\",\r\n  \"cerebrovascularDisease\",\r\n  \"chronicObstructivePulmonaryDisease\",\r\n  \"asthma\",\r\n  \"digestiveDiseases\",\r\n  \"genitoUrinaryDiseases\",\r\n  \"congenitalAnomalies\",\r\n  \"roadTrafficAccidents\",\r\n  \"suicide\",\r\n  \"homicide\",\r\n];\r\nconst ALL_CAUSE_CODE = [\r\n  \"0030\",\r\n  \"0040;0050;0060;0070;0080\",\r\n  \"0090\",\r\n  \"0100\",\r\n  \"0120\",\r\n  \"0130\",\r\n  \"0140\",\r\n  \"0150\",\r\n  \"0160\",\r\n  \"0170\",\r\n  \"0180\",\r\n  \"0190\",\r\n  \"0200\",\r\n  \"0210;0220;0230;0240;0250;0260;0270\",\r\n  \"0390\",\r\n  \"0420;0430;0440;0450;0460;0470;0480\",\r\n  \"0490;0500;0510;0520\",\r\n  \"0530;0540;0550;0560;0570;0580\",\r\n  \"0610\",\r\n  \"0620\",\r\n  \"0630\",\r\n  \"0640\",\r\n  \"0650\",\r\n  \"0660\",\r\n  \"0670\",\r\n  \"0680\",\r\n  \"0690\",\r\n  \"0700\",\r\n  \"0710\",\r\n  \"0720\",\r\n  \"0730\",\r\n  \"0740\",\r\n  \"0750\",\r\n  \"0760\",\r\n  \"0870\",\r\n  \"0880\",\r\n  \"1060\",\r\n  \"1070\",\r\n  \"1080\",\r\n  \"1120\",\r\n  \"1130\",\r\n  \"1150\",\r\n  \"1200\",\r\n  \"1310\",\r\n  \"1500\",\r\n  \"1570\",\r\n  \"1580\",\r\n];\r\n\r\nconst generateStackedBarChart = (i, t) => {\r\n  return {\r\n    i,\r\n    children: ALL_CAUSES.map((cause, index) => {\r\n      return generateChildChart(\"stackedBar\", {\r\n        title: `${t(\"numberOfDeathBy\")} ${t(cause)}`,\r\n        dataLabels: SEXES,\r\n        dataSets: AGE_RANGES.map((name) => ({\r\n          name,\r\n          data: Array(SEXES.length)\r\n            .fill()\r\n            .map(() => randomNumber(0, 30)),\r\n        })),\r\n        colors: [\"#4C7FBC\", \"#ED7B2E\"],\r\n        codes: ALL_CAUSE_CODE[index],\r\n      });\r\n    }),\r\n  };\r\n};\r\nexport default generateStackedBarChart;\r\n","D:\\hispvn\\gitHispVN\\icd11-cause-of-death\\src\\components\\Dashboard\\pages\\page2\\line-chart.js",["533"],"import { AGE_RANGES, generateData, randomNumber, SEXES } from \"../utils\";\r\nimport generateChildChart from \"../../utils/generateChildChart\";\r\n\r\nconst ALL_CAUSES = [\r\n  \"tuberculosis\",\r\n  \"sexuallyTransmittedDiseasesExcludingHiv\",\r\n  \"hiv\",\r\n  \"diarrhoealDiseases\",\r\n  \"pertussis\",\r\n  \"poliomyelitis\",\r\n  \"diphtheria\",\r\n  \"measles\",\r\n  \"tetanus\",\r\n  \"meningitis\",\r\n  \"hepatitisB\",\r\n  \"hepatitisC\",\r\n  \"malaria\",\r\n  \"tropicalClusterDiseases\",\r\n  \"lowerRespiratoryInfections\",\r\n  \"maternalConditions\",\r\n  \"conditionsArisingDuringThePerinatalPeriod\",\r\n  \"nutritionalDeficiencies\",\r\n  \"mouthAndOropharynxCancers\",\r\n  \"oesophagusCancer\",\r\n  \"stomachCancer\",\r\n  \"colonAndRectumCancers\",\r\n  \"liverCancer\",\r\n  \"pancreasCancer\",\r\n  \"tracheaBronchusAndLungCancers\",\r\n  \"melanomaAndOtherSkinCancers\",\r\n  \"breastCancer\",\r\n  \"cervixUteriCancer\",\r\n  \"corpusUteriCancer\",\r\n  \"ovaryCancer\",\r\n  \"prostateCancer\",\r\n  \"bladderCancer\",\r\n  \"lymphomasAndMultipleMyeloma\",\r\n  \"leukaemia\",\r\n  \"alzheimerAndOtherDementias\",\r\n  \"parkinsonDisease\",\r\n  \"hypertensiveDisease\",\r\n  \"ischaemicHeartDisease\",\r\n  \"cerebrovascularDisease\",\r\n  \"chronicObstructivePulmonaryDisease\",\r\n  \"asthma\",\r\n  \"digestiveDiseases\",\r\n  \"genitoUrinaryDiseases\",\r\n  \"congenitalAnomalies\",\r\n  \"roadTrafficAccidents\",\r\n  \"suicide\",\r\n  \"homicide\",\r\n];\r\nconst ALL_CAUSE_CODE = [\r\n  \"0030\",\r\n  \"0040;0050;0060;0070;0080\",\r\n  \"0090\",\r\n  \"0100\",\r\n  \"0120\",\r\n  \"0130\",\r\n  \"0140\",\r\n  \"0150\",\r\n  \"0160\",\r\n  \"0170\",\r\n  \"0180\",\r\n  \"0190\",\r\n  \"0200\",\r\n  \"0210;0220;0230;0240;0250;0260;0270\",\r\n  \"0390\",\r\n  \"0420;0430;0440;0450;0460;0470;0480\",\r\n  \"0490;0500;0510;0520\",\r\n  \"0530;0540;0550;0560;0570;0580\",\r\n  \"0610\",\r\n  \"0620\",\r\n  \"0630\",\r\n  \"0640\",\r\n  \"0650\",\r\n  \"0660\",\r\n  \"0670\",\r\n  \"0680\",\r\n  \"0690\",\r\n  \"0700\",\r\n  \"0710\",\r\n  \"0720\",\r\n  \"0730\",\r\n  \"0740\",\r\n  \"0750\",\r\n  \"0760\",\r\n  \"0870\",\r\n  \"0880\",\r\n  \"1060\",\r\n  \"1070\",\r\n  \"1080\",\r\n  \"1120\",\r\n  \"1130\",\r\n  \"1150\",\r\n  \"1200\",\r\n  \"1310\",\r\n  \"1500\",\r\n  \"1570\",\r\n  \"1580\",\r\n];\r\n\r\nconst generateLineChart = (i, t) => {\r\n  return {\r\n    i,\r\n    children: ALL_CAUSES.map((cause, index) => {\r\n      return generateChildChart(\"line\", {\r\n        title: `${t(\"numberOfDeathBy\")} ${t(cause)}`,\r\n        dataLabels: SEXES,\r\n        dataSets: AGE_RANGES.map((name) => ({\r\n          name,\r\n          data: Array(SEXES.length)\r\n            .fill()\r\n            .map(() => randomNumber(0, 30)),\r\n        })),\r\n        colors: [\"#4C7FBC\", \"#ED7B2E\"],\r\n        codes: ALL_CAUSE_CODE[index],\r\n      });\r\n    }),\r\n  };\r\n};\r\nexport default generateLineChart;\r\n",{"ruleId":"534","replacedBy":"535"},{"ruleId":"536","replacedBy":"537"},{"ruleId":"538","severity":1,"message":"539","line":269,"column":6,"nodeType":"540","endLine":269,"endColumn":8,"suggestions":"541"},{"ruleId":"542","severity":1,"message":"543","line":2,"column":17,"nodeType":"544","messageId":"545","endLine":2,"endColumn":20},{"ruleId":"542","severity":1,"message":"546","line":14,"column":10,"nodeType":"544","messageId":"545","endLine":14,"endColumn":24},{"ruleId":"538","severity":1,"message":"547","line":41,"column":6,"nodeType":"540","endLine":41,"endColumn":8,"suggestions":"548"},{"ruleId":"538","severity":1,"message":"549","line":65,"column":6,"nodeType":"540","endLine":68,"endColumn":4,"suggestions":"550"},{"ruleId":"538","severity":1,"message":"551","line":66,"column":5,"nodeType":"552","endLine":66,"endColumn":48},{"ruleId":"538","severity":1,"message":"551","line":67,"column":5,"nodeType":"552","endLine":67,"endColumn":48},{"ruleId":"538","severity":1,"message":"553","line":85,"column":6,"nodeType":"540","endLine":85,"endColumn":30,"suggestions":"554"},{"ruleId":"555","severity":1,"message":"556","line":383,"column":19,"nodeType":"557","endLine":388,"endColumn":20},{"ruleId":"538","severity":1,"message":"558","line":43,"column":13,"nodeType":"559","endLine":60,"endColumn":4},{"ruleId":"538","severity":1,"message":"560","line":60,"column":6,"nodeType":"540","endLine":60,"endColumn":15,"suggestions":"561"},{"ruleId":"542","severity":1,"message":"562","line":188,"column":29,"nodeType":"544","messageId":"545","endLine":188,"endColumn":34},{"ruleId":"538","severity":1,"message":"563","line":48,"column":5,"nodeType":"540","endLine":48,"endColumn":22,"suggestions":"564"},{"ruleId":"542","severity":1,"message":"565","line":6,"column":10,"nodeType":"544","messageId":"545","endLine":6,"endColumn":22},{"ruleId":"538","severity":1,"message":"566","line":58,"column":6,"nodeType":"540","endLine":58,"endColumn":8,"suggestions":"567"},{"ruleId":"542","severity":1,"message":"568","line":30,"column":10,"nodeType":"544","messageId":"545","endLine":30,"endColumn":20},{"ruleId":"542","severity":1,"message":"569","line":30,"column":22,"nodeType":"544","messageId":"545","endLine":30,"endColumn":35},{"ruleId":"570","severity":1,"message":"571","line":5,"column":1,"nodeType":"572","endLine":13,"endColumn":2},{"ruleId":"570","severity":1,"message":"571","line":28,"column":1,"nodeType":"572","endLine":57,"endColumn":2},{"ruleId":"542","severity":1,"message":"573","line":2,"column":3,"nodeType":"544","messageId":"545","endLine":2,"endColumn":23},{"ruleId":"570","severity":1,"message":"571","line":55,"column":1,"nodeType":"572","endLine":171,"endColumn":2},{"ruleId":"570","severity":1,"message":"571","line":48,"column":1,"nodeType":"572","endLine":157,"endColumn":2},{"ruleId":"570","severity":1,"message":"571","line":13,"column":1,"nodeType":"572","endLine":24,"endColumn":2},{"ruleId":"542","severity":1,"message":"574","line":1,"column":10,"nodeType":"544","messageId":"545","endLine":1,"endColumn":19},{"ruleId":"542","severity":1,"message":"575","line":73,"column":17,"nodeType":"544","messageId":"545","endLine":73,"endColumn":25},{"ruleId":"538","severity":1,"message":"576","line":76,"column":5,"nodeType":"540","endLine":76,"endColumn":7,"suggestions":"577"},{"ruleId":"538","severity":1,"message":"578","line":84,"column":6,"nodeType":"540","endLine":84,"endColumn":12,"suggestions":"579"},{"ruleId":"538","severity":1,"message":"580","line":85,"column":5,"nodeType":"540","endLine":85,"endColumn":28,"suggestions":"581"},{"ruleId":"538","severity":1,"message":"551","line":85,"column":6,"nodeType":"582","endLine":85,"endColumn":27},{"ruleId":"538","severity":1,"message":"583","line":100,"column":6,"nodeType":"540","endLine":100,"endColumn":11,"suggestions":"584"},{"ruleId":"538","severity":1,"message":"585","line":113,"column":6,"nodeType":"540","endLine":113,"endColumn":40,"suggestions":"586"},{"ruleId":"538","severity":1,"message":"587","line":152,"column":6,"nodeType":"540","endLine":152,"endColumn":8,"suggestions":"588"},{"ruleId":"538","severity":1,"message":"589","line":166,"column":6,"nodeType":"540","endLine":166,"endColumn":21,"suggestions":"590"},{"ruleId":"538","severity":1,"message":"591","line":170,"column":6,"nodeType":"540","endLine":170,"endColumn":26,"suggestions":"592"},{"ruleId":"538","severity":1,"message":"593","line":176,"column":6,"nodeType":"540","endLine":176,"endColumn":22,"suggestions":"594"},{"ruleId":"542","severity":1,"message":"595","line":192,"column":17,"nodeType":"544","messageId":"545","endLine":192,"endColumn":20},{"ruleId":"596","severity":1,"message":"597","line":146,"column":23,"nodeType":"598","messageId":"599","endLine":146,"endColumn":25},{"ruleId":"596","severity":1,"message":"597","line":146,"column":40,"nodeType":"598","messageId":"599","endLine":146,"endColumn":42},{"ruleId":"596","severity":1,"message":"597","line":149,"column":23,"nodeType":"598","messageId":"599","endLine":149,"endColumn":25},{"ruleId":"596","severity":1,"message":"597","line":149,"column":41,"nodeType":"598","messageId":"599","endLine":149,"endColumn":43},{"ruleId":"600","severity":1,"message":"601","line":1975,"column":3,"nodeType":"602","messageId":"599","endLine":1975,"endColumn":5},{"ruleId":"542","severity":1,"message":"603","line":1,"column":8,"nodeType":"544","messageId":"545","endLine":1,"endColumn":15},{"ruleId":"542","severity":1,"message":"604","line":2,"column":8,"nodeType":"544","messageId":"545","endLine":2,"endColumn":13},{"ruleId":"605","severity":1,"message":"606","line":76,"column":15,"nodeType":"557","messageId":"607","endLine":76,"endColumn":97,"fix":"608"},{"ruleId":"542","severity":1,"message":"609","line":1,"column":16,"nodeType":"544","messageId":"545","endLine":1,"endColumn":22},{"ruleId":"542","severity":1,"message":"610","line":1,"column":34,"nodeType":"544","messageId":"545","endLine":1,"endColumn":40},{"ruleId":"611","severity":1,"message":"612","line":53,"column":5,"nodeType":"613","messageId":"614","endLine":66,"endColumn":6},{"ruleId":"542","severity":1,"message":"615","line":10,"column":9,"nodeType":"544","messageId":"545","endLine":10,"endColumn":15},{"ruleId":"538","severity":1,"message":"566","line":72,"column":5,"nodeType":"540","endLine":72,"endColumn":38,"suggestions":"616"},{"ruleId":"538","severity":1,"message":"617","line":89,"column":5,"nodeType":"540","endLine":89,"endColumn":22,"suggestions":"618"},{"ruleId":"538","severity":1,"message":"619","line":29,"column":7,"nodeType":"540","endLine":29,"endColumn":9,"suggestions":"620"},{"ruleId":"542","severity":1,"message":"621","line":14,"column":10,"nodeType":"544","messageId":"545","endLine":14,"endColumn":27},{"ruleId":"542","severity":1,"message":"622","line":49,"column":26,"nodeType":"544","messageId":"545","endLine":49,"endColumn":43},{"ruleId":"538","severity":1,"message":"623","line":112,"column":6,"nodeType":"540","endLine":112,"endColumn":22,"suggestions":"624"},{"ruleId":"538","severity":1,"message":"625","line":270,"column":8,"nodeType":"540","endLine":270,"endColumn":14,"suggestions":"626"},{"ruleId":"538","severity":1,"message":"627","line":355,"column":8,"nodeType":"540","endLine":355,"endColumn":17,"suggestions":"628"},{"ruleId":"542","severity":1,"message":"629","line":5,"column":26,"nodeType":"544","messageId":"545","endLine":5,"endColumn":33},{"ruleId":"538","severity":1,"message":"630","line":105,"column":6,"nodeType":"540","endLine":105,"endColumn":34,"suggestions":"631"},{"ruleId":"538","severity":1,"message":"632","line":20,"column":6,"nodeType":"540","endLine":20,"endColumn":15,"suggestions":"633"},{"ruleId":"634","severity":1,"message":"635","line":162,"column":60,"nodeType":"559","messageId":"636","endLine":179,"endColumn":10},{"ruleId":"634","severity":1,"message":"637","line":217,"column":37,"nodeType":"559","messageId":"636","endLine":222,"endColumn":10},{"ruleId":"542","severity":1,"message":"638","line":12,"column":10,"nodeType":"544","messageId":"545","endLine":12,"endColumn":31},{"ruleId":"542","severity":1,"message":"639","line":22,"column":22,"nodeType":"544","messageId":"545","endLine":22,"endColumn":32},{"ruleId":"538","severity":1,"message":"640","line":47,"column":8,"nodeType":"540","endLine":47,"endColumn":10,"suggestions":"641"},{"ruleId":"542","severity":1,"message":"642","line":21,"column":5,"nodeType":"544","messageId":"545","endLine":21,"endColumn":15},{"ruleId":"542","severity":1,"message":"643","line":1,"column":28,"nodeType":"544","messageId":"545","endLine":1,"endColumn":33},{"ruleId":"542","severity":1,"message":"644","line":12,"column":5,"nodeType":"544","messageId":"545","endLine":12,"endColumn":11},{"ruleId":"538","severity":1,"message":"645","line":22,"column":26,"nodeType":"544","endLine":22,"endColumn":37},{"ruleId":"538","severity":1,"message":"646","line":48,"column":6,"nodeType":"540","endLine":48,"endColumn":20,"suggestions":"647"},{"ruleId":"538","severity":1,"message":"648","line":52,"column":6,"nodeType":"540","endLine":52,"endColumn":19,"suggestions":"649"},{"ruleId":"538","severity":1,"message":"650","line":70,"column":6,"nodeType":"540","endLine":70,"endColumn":8,"suggestions":"651"},{"ruleId":"542","severity":1,"message":"652","line":1,"column":10,"nodeType":"544","messageId":"545","endLine":1,"endColumn":22},{"ruleId":"542","severity":1,"message":"653","line":1,"column":23,"nodeType":"544","messageId":"545","endLine":1,"endColumn":36},{"ruleId":"542","severity":1,"message":"654","line":1,"column":18,"nodeType":"544","messageId":"545","endLine":1,"endColumn":23},{"ruleId":"542","severity":1,"message":"655","line":4,"column":10,"nodeType":"544","messageId":"545","endLine":4,"endColumn":29},{"ruleId":"542","severity":1,"message":"656","line":1,"column":10,"nodeType":"544","messageId":"545","endLine":1,"endColumn":16},{"ruleId":"542","severity":1,"message":"657","line":4,"column":13,"nodeType":"544","messageId":"545","endLine":4,"endColumn":18},{"ruleId":"538","severity":1,"message":"658","line":99,"column":8,"nodeType":"540","endLine":99,"endColumn":10,"suggestions":"659"},{"ruleId":"542","severity":1,"message":"660","line":1,"column":10,"nodeType":"544","messageId":"545","endLine":1,"endColumn":17},{"ruleId":"542","severity":1,"message":"661","line":3,"column":24,"nodeType":"544","messageId":"545","endLine":3,"endColumn":33},{"ruleId":"542","severity":1,"message":"662","line":3,"column":35,"nodeType":"544","messageId":"545","endLine":3,"endColumn":41},{"ruleId":"542","severity":1,"message":"663","line":3,"column":43,"nodeType":"544","messageId":"545","endLine":3,"endColumn":48},{"ruleId":"542","severity":1,"message":"664","line":3,"column":50,"nodeType":"544","messageId":"545","endLine":3,"endColumn":63},{"ruleId":"538","severity":1,"message":"665","line":11,"column":6,"nodeType":"540","endLine":11,"endColumn":8,"suggestions":"666"},{"ruleId":"538","severity":1,"message":"665","line":23,"column":6,"nodeType":"540","endLine":23,"endColumn":8,"suggestions":"667"},{"ruleId":"542","severity":1,"message":"668","line":1,"column":22,"nodeType":"544","messageId":"545","endLine":1,"endColumn":34},{"ruleId":"542","severity":1,"message":"668","line":1,"column":22,"nodeType":"544","messageId":"545","endLine":1,"endColumn":34},"no-native-reassign",["669"],"no-negated-in-lhs",["670"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'changeRoute', 'getICD11Options', 'getTrackedEntityTypes', 'metadataApi', 'setCertificateTemplate', 'setFemaleCode', 'setFormMapping', 'setFullnameOption', 'setIcdApiToken', 'setOrgUnitGroups', 'setOrgUnitLevels', 'setOrgUnits', 'setProgramMetadata', 'setTeas', 'setTrackerDataElements', 'setUILocale', 'setUserGroups', 'setUserRole', and 'setUsers'. Either include them or remove the dependency array. If 'setUILocale' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["671"],"no-unused-vars","'Tag' is defined but never used.","Identifier","unusedVar","'SearchOutlined' is defined but never used.","React Hook useEffect has a missing dependency: 'size'. Either include it or remove the dependency array. You can also do a functional update 'setSize(s => ...)' if you only need 'size' in the 'setSize' call.",["672"],"React Hook useEffect has missing dependencies: 'dataApi', 'programMetadata', 'selectedOrgUnit', 'setupUI', 'sortTable', and 'tableData'. Either include them or remove the dependency array. You can also do a functional update 'setTableData(t => ...)' if you only need 'tableData' in the 'setTableData' call.",["673"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","ConditionalExpression","React Hook useEffect has missing dependencies: 'dataApi', 'programMetadata.id', 'selectedOrgUnit', 'setupUI', 'tableData.page', and 'tableData.pager'. Either include them or remove the dependency array.",["674"],"jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'data.pager', 'dataApi', and 'programMetadata.id'. Either include them or remove the dependency array.",["675"],"'value' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'changeStep'. Either include it or remove the dependency array. If 'changeStep' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["676"],"'TRANSLATIONS' is defined but never used.","React Hook useEffect has a missing dependency: 'metadataApi'. Either include it or remove the dependency array.",["677"],"'periodType' is assigned a value but never used.","'setPeriodType' is assigned a value but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'GET_PROGRAM_METADATA' is defined but never used.","'useEffect' is defined but never used.","'setPages' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'formMapping.attributes', 'getTeaValue', 'metadataApi', and 'mutateAttribute'. Either include them or remove the dependency array. If 'mutateAttribute' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["678"],"React Hook useEffect has a missing dependency: 'currentEnrollment'. Either include it or remove the dependency array.",["679"],"React Hook useEffect has a missing dependency: 'data.currentEvents'. Either include it or remove the dependency array.",["680"],"MemberExpression","React Hook useEffect has missing dependencies: 'currentEvent', 'formMapping.dataElements', 'isShowFetalOrInfantDeath', 'mutateDataValue', and 'mutateEvent'. Either include them or remove the dependency array. If 'mutateEvent' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["681"],"React Hook useEffect has missing dependencies: 'currentEvent', 'formMapping.dataElements', 'isShowMaternalDeath', 'mutateDataValue', and 'mutateEvent'. Either include them or remove the dependency array. If 'mutateEvent' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["682"],"React Hook useEffect has missing dependencies: 'currentEnrollment.incidentDate', 'currentEvent', 'formMapping.dataElements', 'initNewEvent', 'mutateEvent', 'programStage.id', and 'returnInitValue'. Either include them or remove the dependency array. If 'initNewEvent' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["683"],"React Hook useEffect has a missing dependency: 'formMapping.dataElements'. Either include it or remove the dependency array.",["684"],"React Hook useEffect has a missing dependency: 'flagUnderlying'. Either include it or remove the dependency array. You can also do a functional update 'setFlagUnderlying(f => ...)' if you only need 'flagUnderlying' in the 'setFlagUnderlying' call.",["685"],"React Hook useEffect has missing dependencies: 'causeOfDeaths' and 'fillUpUnderlying'. Either include them or remove the dependency array.",["686"],"'key' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-dupe-keys","Duplicate key 'de'.","ObjectExpression","'example' is defined but never used.","'page0' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"687","text":"688"},"'Select' is defined but never used.","'Button' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'Option' is assigned a value but never used.",["689"],"React Hook useEffect has missing dependencies: 'changeTrackedEntityType', 'changeTrackedEntityTypes', 'femaleCode', 'formMapping.attributes', 'fullnameOption', 'setFemaleOption', and 'setFullnameOption'. Either include them or remove the dependency array. If 'changeTrackedEntityTypes' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["690"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["691"],"'defaultAttributes' is defined but never used.","'setgenerateNewUID' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'assignedOrgUnits', 'dataElements', 'femaleOption', 'fullnameOption', 'getUserGroupAccesses', 'installType', 'metadataApi', 'setFormMapping', 'setInstallingFile', 'trackedEntityAttributes', and 'trackedEntityType'. Either include them or remove the dependency array. If 'setInstallingFile' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["692"],"React Hook useEffect has missing dependencies: 'importMetadata', 'programMetadata', 'status.status', and 't'. Either include them or remove the dependency array.",["693"],"React Hook useEffect has missing dependencies: 'femaleOption', 'formMapping', 'fullnameOption', 'getICD11Options', 'metadata', 'metadataApi', 'open', 'setCertificateTemplate', 'setFemaleCode', and 't'. Either include them or remove the dependency array. If 'setFemaleCode' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["694"],"'Tooltip' is defined but never used.","React Hook useEffect has missing dependencies: 'currentChild', 'femaleCode', 'formMapping.attributes', 'metadataApi', 'props.widget.i', and 'selectedOrgUnit'. Either include them or remove the dependency array. If 'setData' needs the current value of 'femaleCode', you can also switch to useReducer instead of useState and read 'femaleCode' in the reducer.",["695"],"React Hook useEffect has a missing dependency: 'defaultValue'. Either include it or remove the dependency array. If 'setSelectedCod' needs the current value of 'defaultValue', you can also switch to useReducer instead of useState and read 'defaultValue' in the reducer.",["696"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'dataElements', 'dataElements', 'metadata', 'metadata', 'options', 'options', 'metadata'.","unsafeRefs","Function declared in a loop contains unsafe references to variable(s) 'uidReplacement', 'uidReplacement'.","'convertPdfDoc2FileURL' is defined but never used.","'setMapping' is assigned a value but never used.","React Hook useLayoutEffect has a missing dependency: 'metadataApi'. Either include it or remove the dependency array.",["697"],"'date_limit' is assigned a value but never used.","'SEXES' is defined but never used.","'apiUrl' is assigned a value but never used.","React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","React Hook useEffect has missing dependencies: 'iNo' and 'search'. Either include them or remove the dependency array.",["698"],"React Hook useEffect has a missing dependency: 'debounceSearch'. Either include it or remove the dependency array.",["699"],"React Hook useEffect has missing dependencies: 'iNo', 'keyUILocale', and 'onSelect'. Either include them or remove the dependency array. If 'onSelect' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["700"],"'randomNumber' is defined but never used.","'StandardFonts' is defined but never used.","'Radio' is defined but never used.","'CloseCircleOutlined' is defined but never used.","'useRef' is defined but never used.","'am5xy' is defined but never used.","React Hook useLayoutEffect has a missing dependency: 'data'. Either include it or remove the dependency array.",["701"],"'control' is defined but never used.","'TileLayer' is defined but never used.","'Marker' is defined but never used.","'Popup' is defined but never used.","'LayersControl' is defined but never used.","React Hook useEffect has a missing dependency: 'map'. Either include it or remove the dependency array.",["702"],["703"],"'generateData' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"704","fix":"705"},{"desc":"706","fix":"707"},{"desc":"708","fix":"709"},{"desc":"710","fix":"711"},{"desc":"712","fix":"713"},{"desc":"714","fix":"715"},{"desc":"716","fix":"717"},{"desc":"718","fix":"719"},{"desc":"720","fix":"721"},{"desc":"722","fix":"723"},{"desc":"724","fix":"725"},{"desc":"726","fix":"727"},{"desc":"728","fix":"729"},{"desc":"730","fix":"731"},{"desc":"732","fix":"733"},{"desc":"734","fix":"735"},[3318,3318]," rel=\"noreferrer\"",{"desc":"736","fix":"737"},{"desc":"738","fix":"739"},{"desc":"740","fix":"741"},{"desc":"742","fix":"743"},{"desc":"744","fix":"745"},{"desc":"746","fix":"747"},{"desc":"748","fix":"749"},{"desc":"750","fix":"751"},{"desc":"716","fix":"752"},{"desc":"753","fix":"754"},{"desc":"755","fix":"756"},{"desc":"757","fix":"758"},{"desc":"759","fix":"760"},{"desc":"761","fix":"762"},{"desc":"761","fix":"763"},"Update the dependencies array to be: [changeRoute, getICD11Options, getTrackedEntityTypes, metadataApi, setCertificateTemplate, setFemaleCode, setFormMapping, setFullnameOption, setIcdApiToken, setOrgUnitGroups, setOrgUnitLevels, setOrgUnits, setProgramMetadata, setTeas, setTrackerDataElements, setUILocale, setUserGroups, setUserRole, setUsers]",{"range":"764","text":"765"},"Update the dependencies array to be: [size]",{"range":"766","text":"767"},"Update the dependencies array to be: [dataApi, programMetadata, selectedOrgUnit, setupUI, sortTable, tableData]",{"range":"768","text":"769"},"Update the dependencies array to be: [dataApi, filterTable, programMetadata.id, selectedOrgUnit, setupUI, sortTable, tableData.page, tableData.pager]",{"range":"770","text":"771"},"Update the dependencies array to be: [data.pager, dataApi, filters, programMetadata.id]",{"range":"772","text":"773"},"Update the dependencies array to be: [changeStep, programMetadata]",{"range":"774","text":"775"},"Update the dependencies array to be: [metadataApi]",{"range":"776","text":"777"},"Update the dependencies array to be: [formMapping.attributes, getTeaValue, metadataApi, mutateAttribute]",{"range":"778","text":"779"},"Update the dependencies array to be: [currentEnrollment, data]",{"range":"780","text":"781"},"Update the dependencies array to be: [data.currentEvents]",{"range":"782","text":"783"},"Update the dependencies array to be: [age, currentEvent, formMapping.dataElements, isShowFetalOrInfantDeath, mutateDataValue, mutateEvent]",{"range":"784","text":"785"},"Update the dependencies array to be: [currentTeiSexAttributeValue, age, currentEvent, isShowMaternalDeath, formMapping.dataElements, mutateEvent, mutateDataValue]",{"range":"786","text":"787"},"Update the dependencies array to be: [currentEnrollment.incidentDate, currentEvent, formMapping.dataElements, initNewEvent, mutateEvent, programStage.id, returnInitValue]",{"range":"788","text":"789"},"Update the dependencies array to be: [causeOfDeaths, formMapping.dataElements]",{"range":"790","text":"791"},"Update the dependencies array to be: [checkBoxUnderlying, flagUnderlying]",{"range":"792","text":"793"},"Update the dependencies array to be: [causeOfDeaths, fillUpUnderlying, flagUnderlying]",{"range":"794","text":"795"},"Update the dependencies array to be: [metadataApi, selectedTrackedEntityAttributes]",{"range":"796","text":"797"},"Update the dependencies array to be: [changeTrackedEntityType, changeTrackedEntityTypes, femaleCode, formMapping.attributes, fullnameOption, programMetadata, setFemaleOption, setFullnameOption]",{"range":"798","text":"799"},"Update the dependencies array to be: [props]",{"range":"800","text":"801"},"Update the dependencies array to be: [assignedOrgUnits, dataElements, femaleOption, fullnameOption, generateNewUID, getUserGroupAccesses, installType, metadataApi, setFormMapping, setInstallingFile, trackedEntityAttributes, trackedEntityType]",{"range":"802","text":"803"},"Update the dependencies array to be: [importMetadata, open, programMetadata, status.status, t]",{"range":"804","text":"805"},"Update the dependencies array to be: [femaleOption, formMapping, fullnameOption, getICD11Options, metadata, metadataApi, open, results, setCertificateTemplate, setFemaleCode, t]",{"range":"806","text":"807"},"Update the dependencies array to be: [selectedChild, props.period, currentChild, femaleCode, props.widget.i, metadataApi, selectedOrgUnit, formMapping.attributes]",{"range":"808","text":"809"},"Update the dependencies array to be: [defaultValue, visible]",{"range":"810","text":"811"},{"range":"812","text":"777"},"Update the dependencies array to be: [defaultValue, iNo, search]",{"range":"813","text":"814"},"Update the dependencies array to be: [debounceSearch, searchValue]",{"range":"815","text":"816"},"Update the dependencies array to be: [iNo, keyUILocale, onSelect]",{"range":"817","text":"818"},"Update the dependencies array to be: [data]",{"range":"819","text":"820"},"Update the dependencies array to be: [map]",{"range":"821","text":"822"},{"range":"823","text":"822"},[9033,9035],"[changeRoute, getICD11Options, getTrackedEntityTypes, metadataApi, setCertificateTemplate, setFemaleCode, setFormMapping, setFullnameOption, setIcdApiToken, setOrgUnitGroups, setOrgUnitLevels, setOrgUnits, setProgramMetadata, setTeas, setTrackerDataElements, setUILocale, setUserGroups, setUserRole, setUsers]",[1444,1446],"[size]",[2022,2128],"[dataApi, programMetadata, selectedOrgUnit, setupUI, sortTable, tableData]",[2628,2652],"[dataApi, filterTable, programMetadata.id, selectedOrgUnit, setupUI, sortTable, tableData.page, tableData.pager]",[1582,1591],"[data.pager, dataApi, filters, programMetadata.id]",[1615,1632],"[changeStep, programMetadata]",[1931,1933],"[metadataApi]",[2299,2301],"[formMapping.attributes, getTeaValue, metadataApi, mutateAttribute]",[2607,2613],"[currentEnrollment, data]",[2841,2864],"[data.currentEvents]",[3486,3491],"[age, currentEvent, formMapping.dataElements, isShowFetalOrInfantDeath, mutateDataValue, mutateEvent]",[3923,3957],"[currentTeiSexAttributeValue, age, currentEvent, isShowMaternalDeath, formMapping.dataElements, mutateEvent, mutateDataValue]",[5798,5800],"[currentEnrollment.incidentDate, currentEvent, formMapping.dataElements, initNewEvent, mutateEvent, programStage.id, returnInitValue]",[6395,6410],"[causeOfDeaths, formMapping.dataElements]",[6482,6502],"[checkBoxUnderlying, flagUnderlying]",[6608,6624],"[causeOfDeaths, fillUpUnderlying, flagUnderlying]",[2688,2721],"[metadataApi, selectedTrackedEntityAttributes]",[3357,3374],"[changeTrackedEntityType, changeTrackedEntityTypes, femaleCode, formMapping.attributes, fullnameOption, programMetadata, setFemaleOption, setFullnameOption]",[1048,1050],"[props]",[4286,4302],"[assignedOrgUnits, dataElements, femaleOption, fullnameOption, generateNewUID, getUserGroupAccesses, installType, metadataApi, setFormMapping, setInstallingFile, trackedEntityAttributes, trackedEntityType]",[9972,9978],"[importMetadata, open, programMetadata, status.status, t]",[13703,13712],"[femaleOption, formMapping, fullnameOption, getICD11Options, metadata, metadataApi, open, results, setCertificateTemplate, setFemaleCode, t]",[4087,4115],"[selectedChild, props.period, currentChild, femaleCode, props.widget.i, metadataApi, selectedOrgUnit, formMapping.attributes]",[573,582],"[defaultValue, visible]",[1410,1412],[1555,1569],"[defaultValue, iNo, search]",[1635,1648],"[debounceSearch, searchValue]",[2174,2176],"[iNo, keyUILocale, onSelect]",[2977,2979],"[data]",[376,378],"[map]",[692,694]]